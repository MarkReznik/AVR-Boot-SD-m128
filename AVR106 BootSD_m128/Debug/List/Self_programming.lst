
AVRASM ver. 2.1.30  F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm Wed Aug 07 15:53:43 2024

F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1107): warning: Register r4 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1108): warning: Register r5 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1109): warning: Register r6 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1110): warning: Register r7 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1111): warning: Register r9 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1112): warning: Register r8 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1113): warning: Register r11 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1114): warning: Register r12 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1115): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32 Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Medium
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_MEDIUM_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __GETBRPF
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETBRPF_INC
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z+
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test=R4
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test_msb=R5
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test=R6
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test_msb=R7
                 	.DEF _token=R9
                 	.DEF _SectorsPerCluster=R8
                 	.DEF _pagesCnt=R11
                 	.DEF _appPages=R12
                 	.DEF _appPages_msb=R13
                 
                 	.CSEG
                 	.ORG 0xF800
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
00f800 940c f867 	JMP  __RESET
00f802 940c f800 	JMP  0xF800
00f804 940c f800 	JMP  0xF800
00f806 940c f800 	JMP  0xF800
00f808 940c f800 	JMP  0xF800
00f80a 940c f800 	JMP  0xF800
00f80c 940c f800 	JMP  0xF800
00f80e 940c f800 	JMP  0xF800
00f810 940c f800 	JMP  0xF800
00f812 940c f800 	JMP  0xF800
00f814 940c f800 	JMP  0xF800
00f816 940c f800 	JMP  0xF800
00f818 940c f800 	JMP  0xF800
00f81a 940c f800 	JMP  0xF800
00f81c 940c f800 	JMP  0xF800
00f81e 940c f800 	JMP  0xF800
00f820 940c f800 	JMP  0xF800
00f822 940c f800 	JMP  0xF800
00f824 940c f800 	JMP  0xF800
00f826 940c f800 	JMP  0xF800
00f828 940c f800 	JMP  0xF800
00f82a 940c f800 	JMP  0xF800
00f82c 940c f800 	JMP  0xF800
00f82e 940c f800 	JMP  0xF800
00f830 940c f800 	JMP  0xF800
00f832 940c f800 	JMP  0xF800
00f834 940c f800 	JMP  0xF800
00f836 940c f800 	JMP  0xF800
00f838 940c f800 	JMP  0xF800
00f83a 940c f800 	JMP  0xF800
00f83c 940c f800 	JMP  0xF800
00f83e 940c f800 	JMP  0xF800
00f840 940c f800 	JMP  0xF800
00f842 940c f800 	JMP  0xF800
00f844 940c f800 	JMP  0xF800
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00f846 f9e0
00f847 f9b4      	.DB  0xE0,0xF9,0xB4,0xF9
                 
                 _0x40000:
00f848 2030
00f849 2020
00f84a 2020
00f84b 2020      	.DB  0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00f84c 2020
00f84d 0020
00f84e 454e
00f84f 0057      	.DB  0x20,0x20,0x20,0x0,0x4E,0x45,0x57,0x0
00f850 735b
00f851 7465
00f852 6974
00f853 676e      	.DB  0x5B,0x73,0x65,0x74,0x74,0x69,0x6E,0x67
00f854 5d73
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1168): warning: .cseg .db misalignment - padding zero byte
00f855 0000      	.DB  0x73,0x5D,0x0
                 
                 __GLOBAL_INI_TBL:
00f856 0004      	.DW  0x04
00f857 0004      	.DW  0x04
00f858 f08c 0001 	.DD  __REG_VARS*2
                 
00f85a 000c      	.DW  0x0C
00f85b 0900      	.DW  _0x4000E
00f85c f090 0001 	.DD  _0x40000*2
                 
00f85e 0004      	.DW  0x04
00f85f 090c      	.DW  _0x4000E+12
00f860 f09c 0001 	.DD  _0x40000*2+12
                 
00f862 000b      	.DW  0x0B
00f863 0910      	.DW  _0x4000E+16
00f864 f0a0 0001 	.DD  _0x40000*2+16
                 
                 _0xFFFFFFFF:
00f866 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00f867 94f8      	CLI
00f868 27ee      	CLR  R30
00f869 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
00f86a e0f1      	LDI  R31,1
00f86b bff5      	OUT  MCUCR,R31
00f86c e0f2      	LDI  R31,2
00f86d bff5      	OUT  MCUCR,R31
00f86e 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00f870 e08d      	LDI  R24,(14-2)+1
00f871 e0a2      	LDI  R26,2
00f872 27bb      	CLR  R27
                 __CLEAR_REG:
00f873 93ed      	ST   X+,R30
00f874 958a      	DEC  R24
00f875 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00f876 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00f877 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00f878 e0a0      	LDI  R26,LOW(__SRAM_START)
00f879 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00f87a 93ed      	ST   X+,R30
00f87b 9701      	SBIW R24,1
00f87c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00f87d eaec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00f87e eff0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
00f87f e0d1      	LDI  R29,BYTE3(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00f880 bfdb      	OUT  RAMPZ,R29
00f881 9187      	ELPM R24,Z+
00f882 9197      	ELPM R25,Z+
00f883 9700      	SBIW R24,0
00f884 f081      	BREQ __GLOBAL_INI_END
00f885 91a7      	ELPM R26,Z+
00f886 91b7      	ELPM R27,Z+
00f887 9007      	ELPM R0,Z+
00f888 9017      	ELPM R1,Z+
00f889 91c7      	ELPM R28,Z+
00f88a 91d7      	ELPM R29,Z+
00f88b 01bf      	MOVW R22,R30
00f88c b7db      	IN   R29,RAMPZ
00f88d 01f0      	MOVW R30,R0
00f88e bfcb      	OUT  RAMPZ,R28
                 __GLOBAL_INI_LOOP:
00f88f 9007      	ELPM R0,Z+
00f890 920d      	ST   X+,R0
00f891 9701      	SBIW R24,1
00f892 f7e1      	BRNE __GLOBAL_INI_LOOP
00f893 01fb      	MOVW R30,R22
00f894 cfeb      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00f895 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00f896 bfed      	OUT  SPL,R30
00f897 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00f898 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00f899 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00f89a e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00f89b 940c f9c5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : All devices with bootloaders support.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains functions for easy reading and writing
                 ;*                       of Flash memory on parts having the "Self-programming"
                 ;*                       feature. The user functions are as follows:
                 ;*
                 ;*                       ReadFlashByte()
                 ;*                       ReadFlashPage()
                 ;*                       WriteFlashByte()
                 ;*                       WriteFlashPage()
                 ;*                       RecoverFlash()
                 ;*
                 ;*                       The remaining functions contained in this file are used
                 ;*                       by the functions listet above.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <inavr.h>
                 ;#include "Self_programming.h"
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;#include <delay.h>
                 ;
                 ;
                 ;void (*__AddrToZ24ByteToSPMCR_SPM_W_Test)(void flash *addr)= (void(*)(void flash *)) 0x0F9E0;
                 ;void (*__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test)(void flash *addr, unsigned int data)= (void(*)(void flash *, unsigne ...
                 ;
                 ;
                 ;/*!
                 ;* Declare global struct variable in EEPROM if Flash recovery enabled.
                 ;* FlashBackup pageNumber holds Flash pageaddress (/PAGESIZE) the data in Flash
                 ;* recovery buffer should be written to if data need to be recovered.
                 ;* FlashBackup.status tells if data need to be recovered.
                 ;**/
                 ;#ifdef __FLASH_RECOVER
                 ;__eeprom struct {
                 ;  unsigned int  pageNumber;
                 ;  unsigned char status;
                 ;}FlashBackup = {0};
                 ;#endif
                 ;
                 ;void MY_FILL_TEMP_WORD(unsigned long addr,unsigned int data)
                 ; 0000 003A {
                 
                 	.CSEG
                 ; 0000 003B      _FILL_TEMP_WORD(addr,data);
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ; 0000 003C }
                 ;void MY_PAGE_ERASE(unsigned long addr)
                 ; 0000 003E {
                 ; 0000 003F      _PAGE_ERASE(addr);
                 ;	addr -> Y+0
                 ; 0000 0040 }
                 ;void MY_PAGE_WRITE(unsigned long addr)
                 ; 0000 0042 {
                 ; 0000 0043      _PAGE_WRITE(addr);
                 ;	addr -> Y+0
                 ; 0000 0044 }
                 ;/*!
                 ;* The function Returns one byte located on Flash address given by ucFlashStartAdr.
                 ;**/
                 ;unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 ; 0000 0048 unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 _ReadFlashByte:
                 ; .FSTART _ReadFlashByte
                 ; 0000 0049 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 004A   return (unsigned char)*((MyFlashCharPointer)flashStartAdr);
00f89d d6d8      	RCALL __PUTPARD2
                 ;	flashStartAdr -> Y+0
00f89e d4dd      	RCALL SUBOPT_0x0
                +
00f89f bf6b     +OUT RAMPZ , R22
00f8a0 91e6     +ELPM R30 , Z
                 	__GETBRPF 30
00f8a1 940c fc78 	JMP  _0x200000A
                 ; 0000 004B //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 004C } // Returns data from Flash
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function reads one Flash page from address flashStartAdr and stores data
                 ;* in array dataPage[]. The number of bytes stored is depending upon the
                 ;* Flash page size. The function returns FALSE if input address is not a Flash
                 ;* page address, else TRUE.
                 ;**/
                 ;unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 ; 0000 0054 unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 _ReadFlashPage:
                 ; .FSTART _ReadFlashPage
                 ; 0000 0055   unsigned int index;
                 ; 0000 0056   if(!(flashStartAdr & (PAGESIZE-1))){      // If input address is a page address
00f8a3 93ba      	ST   -Y,R27
00f8a4 93aa      	ST   -Y,R26
00f8a5 931a      	ST   -Y,R17
00f8a6 930a      	ST   -Y,R16
                 ;	flashStartAdr -> Y+4
                 ;	*dataPage -> Y+2
                 ;	index -> R16,R17
                +
00f8a7 81ec     +LDD R30 , Y + 4
00f8a8 81fd     +LDD R31 , Y + 4 + 1
00f8a9 816e     +LDD R22 , Y + 4 + 2
00f8aa 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00f8ab 30e0      	CPI  R30,0
00f8ac f4f9      	BRNE _0x3
                 ; 0000 0057     for(index = 0; index < PAGESIZE; index++){
                +
00f8ad e000     +LDI R16 , LOW ( 0 )
00f8ae e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5:
                +
00f8af 3000     +CPI R16 , LOW ( 256 )
00f8b0 e0e1     +LDI R30 , HIGH ( 256 )
00f8b1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f8b2 f4b0      	BRSH _0x6
                 ; 0000 0058       dataPage[index] = ReadFlashByte(flashStartAdr + index);
00f8b3 01f8      	MOVW R30,R16
00f8b4 81aa      	LDD  R26,Y+2
00f8b5 81bb      	LDD  R27,Y+2+1
00f8b6 0fea      	ADD  R30,R26
00f8b7 1ffb      	ADC  R31,R27
00f8b8 93ff      	PUSH R31
00f8b9 93ef      	PUSH R30
00f8ba 01f8      	MOVW R30,R16
                +
00f8bb 81ac     +LDD R26 , Y + 4
00f8bc 81bd     +LDD R27 , Y + 4 + 1
00f8bd 818e     +LDD R24 , Y + 4 + 2
00f8be 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00f8bf 2766      	CLR  R22
00f8c0 2777      	CLR  R23
00f8c1 d605      	RCALL __ADDD21
00f8c2 dfda      	RCALL _ReadFlashByte
00f8c3 91af      	POP  R26
00f8c4 91bf      	POP  R27
00f8c5 93ec      	ST   X,R30
                 ; 0000 0059     }
                +
00f8c6 5f0f     +SUBI R16 , LOW ( - 1 )
00f8c7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00f8c8 cfe6      	RJMP _0x5
                 _0x6:
                 ; 0000 005A     return TRUE;                            // Return TRUE if valid page address
00f8c9 e0e1      	LDI  R30,LOW(1)
00f8ca 940c fc64 	JMP  _0x200000B
                 ; 0000 005B   }
                 ; 0000 005C   else{
                 _0x3:
                 ; 0000 005D     return FALSE;                           // Return FALSE if not valid page address
00f8cc e0e0      	LDI  R30,LOW(0)
00f8cd 940c fc64 	JMP  _0x200000B
                 ; 0000 005E   }
                 ; 0000 005F }
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function writes byte data to Flash address flashAddr. Returns FALSE if
                 ;* input address is not valid Flash byte address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0065 unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0066   MyAddressType  pageAdr;
                 ; 0000 0067   unsigned char eepromInterruptSettings,sregSettings;
                 ; 0000 0068   if( AddressCheck( flashAddr & ~(PAGESIZE-1) )){
                 ;	flashAddr -> Y+7
                 ;	data -> Y+6
                 ;	pageAdr -> Y+2
                 ;	eepromInterruptSettings -> R17
                 ;	sregSettings -> R16
                 ; 0000 0069 
                 ; 0000 006A     eepromInterruptSettings= EECR & (1<<EERIE); // Stores EEPROM interrupt mask
                 ; 0000 006B     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
                 ; 0000 006C     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 ; 0000 006D 
                 ; 0000 006E     sregSettings= SREG;
                 ; 0000 006F     #asm("cli");
                 ; 0000 0070     pageAdr=flashAddr & ~(PAGESIZE-1);      // Gets Flash page address from byte address
                 ; 0000 0071 
                 ; 0000 0072     #ifdef __FLASH_RECOVER
                 ; 0000 0073     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 0074                                             // not contain data for writing
                 ; 0000 0075     while(EECR & (1<<EEWE));
                 ; 0000 0076     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                 ; 0000 0077     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 0078     FlashBackup.pageNumber = (unsigned int) (pageAdr/PAGESIZE); // Stores page address
                 ; 0000 0079                                                        // data should be written to
                 ; 0000 007A     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 007B                                                // contains unwritten data
                 ; 0000 007C     while(EECR & (1<<EEWE));
                 ; 0000 007D     #endif
                 ; 0000 007E 
                 ; 0000 007F     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082     WriteBufToFlash(pageAdr);               // Writes to Flash
                 ; 0000 0083 
                 ; 0000 0084     #ifdef __FLASH_RECOVER
                 ; 0000 0085     FlashBackup.status = 0;                 // Indicates that Flash recovery buffer
                 ; 0000 0086                                             // does not contain unwritten data
                 ; 0000 0087     while(EECR & (1<<EEWE));
                 ; 0000 0088     #endif
                 ; 0000 0089 
                 ; 0000 008A     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
                 ; 0000 008B     SREG = sregSettings;
                 ; 0000 008C     return TRUE;                            // Return TRUE if address
                 ; 0000 008D                                             // valid for writing
                 ; 0000 008E   }
                 ; 0000 008F   else
                 ; 0000 0090     return FALSE;                           // Return FALSE if address not
                 ; 0000 0091                                             // valid for writing
                 ; 0000 0092 }
                 ;
                 ;/*!
                 ;* The function writes data from array dataPage[] to Flash page address
                 ;* flashStartAdr. The Number of bytes written is depending upon the Flash page
                 ;* size. Returns FALSE if input argument ucFlashStartAdr is not a valid Flash
                 ;* page address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage)
                 ; 0000 009B {
                 _WriteFlashPage:
                 ; .FSTART _WriteFlashPage
                 ; 0000 009C   unsigned int index;
                 ; 0000 009D   unsigned char eepromInterruptSettings,sregSettings;
                 ; 0000 009E   if( AddressCheck(flashStartAdr) ){
00f8cf 93ba      	ST   -Y,R27
00f8d0 93aa      	ST   -Y,R26
00f8d1 d5e4      	RCALL __SAVELOCR4
                 ;	flashStartAdr -> Y+6
                 ;	*dataPage -> Y+4
                 ;	index -> R16,R17
                 ;	eepromInterruptSettings -> R19
                 ;	sregSettings -> R18
00f8d2 d4ab      	RCALL SUBOPT_0x1
00f8d3 d044      	RCALL _AddressCheck
00f8d4 30e0      	CPI  R30,0
00f8d5 f1f1      	BREQ _0xD
                 ; 0000 009F     eepromInterruptSettings = EECR & (1<<EERIE); // Stoes EEPROM interrupt mask
00f8d6 b3ec      	IN   R30,0x1C
00f8d7 70e8      	ANDI R30,LOW(0x8)
00f8d8 2f3e      	MOV  R19,R30
                 ; 0000 00A0     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
00f8d9 98e3      	CBI  0x1C,3
                 ; 0000 00A1     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 _0xE:
00f8da 99e1      	SBIC 0x1C,1
00f8db cffe      	RJMP _0xE
                 ; 0000 00A2 
                 ; 0000 00A3     sregSettings= SREG;
00f8dc b72f      	IN   R18,63
                 ; 0000 00A4     #asm("cli");
00f8dd 94f8      	CLI
                 ; 0000 00A5 
                 ; 0000 00A6     #ifdef __FLASH_RECOVER
                 ; 0000 00A7     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00A8                                             // not contain data for writing
                 ; 0000 00A9     while(EECR & (1<<EEWE));
                 ; 0000 00AA 
                 ; 0000 00AB     //_ENABLE_RWW_SECTION();
                 ; 0000 00AC 
                 ; 0000 00AD     _WAIT_FOR_SPM();
                 ; 0000 00AE     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00AF 
                 ; 0000 00B0     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                 ; 0000 00B1       //_WAIT_FOR_SPM();
                 ; 0000 00B2       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00B3       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00B4     }
                 ; 0000 00B5 
                 ; 0000 00B6     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 00B7     FlashBackup.pageNumber=(unsigned int)(flashStartAdr/PAGESIZE);
                 ; 0000 00B8     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 00B9                                            // contains unwritten data
                 ; 0000 00BA     while(EECR & (1<<EEWE));
                 ; 0000 00BB     #endif
                 ; 0000 00BC 
                 ; 0000 00BD     if(index==0xFFF1)
00f8de efe1      	LDI  R30,LOW(65521)
00f8df efff      	LDI  R31,HIGH(65521)
00f8e0 17e0      	CP   R30,R16
00f8e1 07f1      	CPC  R31,R17
00f8e2 f451      	BRNE _0x11
                 ; 0000 00BE     {
                 ; 0000 00BF         __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
00f8e3 d49f      	RCALL SUBOPT_0x2
00f8e4 e0a0      	LDI  R26,LOW(0)
00f8e5 e0b0      	LDI  R27,0
00f8e6 d0ab      	RCALL ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0000 00C0         __AddrToZ24ByteToSPMCR_SPM_W((void flash *)0x1EF00);
00f8e7 d4a1      	RCALL SUBOPT_0x3
00f8e8 d0b8      	RCALL ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0000 00C1         __AddrToZ24ByteToSPMCR_SPM_E((void flash *)0x1EF00);
00f8e9 d49f      	RCALL SUBOPT_0x3
00f8ea d0c2      	RCALL ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0000 00C2         __AddrToZ24ByteToSPMCR_SPM_EW((void flash *)0x1EF00);
00f8eb d49d      	RCALL SUBOPT_0x3
00f8ec d0cc      	RCALL ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0000 00C3     }
                 ; 0000 00C4     _WAIT_FOR_SPM();
                 _0x11:
                 _0x12:
00f8ed 91e0 0068 	LDS  R30,104
00f8ef 70e1      	ANDI R30,LOW(0x1)
00f8f0 f7e1      	BRNE _0x12
                 ; 0000 00C5     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00C6     //_ENABLE_RWW_SECTION();
                 ; 0000 00C7 
                 ; 0000 00C8     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                +
00f8f1 e000     +LDI R16 , LOW ( 0 )
00f8f2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16:
                +
00f8f3 3000     +CPI R16 , LOW ( 256 )
00f8f4 e0e1     +LDI R30 , HIGH ( 256 )
00f8f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f8f6 f4a8      	BRSH _0x17
                 ; 0000 00C9       //_WAIT_FOR_SPM();
                 ; 0000 00CA       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00CB       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
00f8f7 01f8      	MOVW R30,R16
00f8f8 2766      	CLR  R22
00f8f9 2777      	CLR  R23
00f8fa d676      	RCALL __PUTPARD1
00f8fb 01f8      	MOVW R30,R16
00f8fc d491      	RCALL SUBOPT_0x4
00f8fd 900c      	LD   R0,X
00f8fe 2411      	CLR  R1
00f8ff 01f8      	MOVW R30,R16
00f900 9631      	ADIW R30,1
00f901 d48c      	RCALL SUBOPT_0x4
00f902 91ec      	LD   R30,X
00f903 2ffe      	MOV  R31,R30
00f904 e0e0      	LDI  R30,0
00f905 01d0      	MOVW R26,R0
00f906 0fae      	ADD  R26,R30
00f907 1fbf      	ADC  R27,R31
00f908 d089      	RCALL ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0000 00CC     }
                +
00f909 5f0e     +SUBI R16 , LOW ( - 2 )
00f90a 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00f90b cfe7      	RJMP _0x16
                 _0x17:
                 ; 0000 00CD     //_PAGE_WRITE( flashStartAdr );
                 ; 0000 00CE     WriteBufToFlash(flashStartAdr);         // Writes to Flash
00f90c d471      	RCALL SUBOPT_0x1
00f90d d020      	RCALL _WriteBufToFlash
                 ; 0000 00CF     #ifdef __FLASH_RECOVER
                 ; 0000 00D0       FlashBackup.status=0;                 // Inicate that Flash buffer does
                 ; 0000 00D1                                             // not contain data for writing
                 ; 0000 00D2       while(EECR & (1<<EEWE));
                 ; 0000 00D3     #endif
                 ; 0000 00D4 
                 ; 0000 00D5     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
00f90e b3ec      	IN   R30,0x1C
00f90f 2be3      	OR   R30,R19
00f910 bbec      	OUT  0x1C,R30
                 ; 0000 00D6     SREG = sregSettings;
00f911 bf2f      	OUT  0x3F,R18
                 ; 0000 00D7     return TRUE;                            // Return TRUE if address
00f912 e0e1      	LDI  R30,LOW(1)
00f913 c001      	RJMP _0x200000C
                 ; 0000 00D8                                             // valid for writing
                 ; 0000 00D9   }
                 ; 0000 00DA   else
                 _0xD:
                 ; 0000 00DB     return FALSE;                           // Return FALSE if not address not
00f914 e0e0      	LDI  R30,LOW(0)
                 ; 0000 00DC                                             // valid for writing
                 ; 0000 00DD }
                 _0x200000C:
00f915 d5a7      	RCALL __LOADLOCR4
00f916 962a      	ADIW R28,10
00f917 9508      	RET
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function checks if global variable FlashBackup.status indicates that Flash recovery
                 ;* buffer contains data that needs to be written to Flash. Writes data from
                 ;* Flash recovery buffer to Flash page address given by FLASH_recovery.pageAdr.
                 ;* This function should be called at program startup if FLASH recovery option
                 ;* is enabeled.
                 ;**/
                 ;unsigned char RecoverFlash(){
                 ; 0000 00E6 unsigned char RecoverFlash(){
                 ; 0000 00E7 #ifdef __FLASH_RECOVER
                 ; 0000 00E8   unsigned int index;
                 ; 0000 00E9   unsigned long flashStartAdr = (MyAddressType)FlashBackup.pageNumber * PAGESIZE;
                 ; 0000 00EA   if(FlashBackup.status == FLASH_BUFFER_FULL_ID){ // Checks if Flash recovery
                 ; 0000 00EB                                                   //  buffer contains data
                 ; 0000 00EC 
                 ; 0000 00ED     for(index=0; index < PAGESIZE; index+=2){     // Writes to Flash write buffer
                 ; 0000 00EE         _WAIT_FOR_SPM();
                 ; 0000 00EF         MY_FILL_TEMP_WORD( index, *((MyFlashIntPointer)(ADR_FLASH_BUFFER+index)) );
                 ; 0000 00F0     }
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3     //WriteBufToFlash((MyAddressType)FlashBackup.pageNumber * PAGESIZE);
                 ; 0000 00F4     _WAIT_FOR_SPM();
                 ; 0000 00F5     MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 00F6     _WAIT_FOR_SPM();
                 ; 0000 00F7     MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 00F8     _WAIT_FOR_SPM();
                 ; 0000 00F9     _ENABLE_RWW_SECTION();
                 ; 0000 00FA     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00FB                                             // not contain data for writing
                 ; 0000 00FC     while(EECR & (1<<EEWE));
                 ; 0000 00FD     return TRUE;                            // Returns TRUE if recovery has
                 ; 0000 00FE                                             // taken place
                 ; 0000 00FF   }
                 ; 0000 0100 #endif
                 ; 0000 0101   return FALSE;
                 ; 0000 0102 }
                 ;
                 ;
                 ;/*!
                 ;* The function checks if input argument is a valid Flash page address for
                 ;* writing. Returns TRUE only if:
                 ;* - Address points to the beginning of a Flash page
                 ;* - Address is within the limits defined in Self_programming.h
                 ;* - Address is not equal to page address used for buffring by the Flash recovery
                 ;*   functions (if enabled).
                 ;* Returns FALSE else.
                 ;**/
                 ;unsigned char AddressCheck(MyAddressType flashAdr){
                 ; 0000 010E unsigned char AddressCheck(MyAddressType flashAdr){
                 _AddressCheck:
                 ; .FSTART _AddressCheck
                 ; 0000 010F   #ifdef __FLASH_RECOVER
                 ; 0000 0110   // The next line gives a warning 'pointless comparison with zero' if ADR_LIMIT_LOW is 0. Ignore it.
                 ; 0000 0111   if( (flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) &&
                 ; 0000 0112       (flashAdr != ADR_FLASH_BUFFER) && !(flashAdr & (PAGESIZE-1)) )
                 ; 0000 0113     return TRUE;                            // Address is a valid page address
                 ; 0000 0114   else
                 ; 0000 0115     return FALSE;                           // Address is not a valid page address
                 ; 0000 0116   #else
                 ; 0000 0117   if((flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) && !(flashAdr & (PAGESIZE-1) ) )
00f918 d47a      	RCALL SUBOPT_0x5
                 ;	flashAdr -> Y+0
00f919 d661      	RCALL __CPD20
00f91a f060      	BRLO _0x1A
00f91b d47a      	RCALL SUBOPT_0x6
                +
00f91c 30a0     +CPI R26 , LOW ( 0x1F000 )
00f91d efe0     +LDI R30 , HIGH ( 0x1F000 )
00f91e 07be     +CPC R27 , R30
00f91f e0e1     +LDI R30 , BYTE3 ( 0x1F000 )
00f920 078e     +CPC R24 , R30
00f921 e0e0     +LDI R30 , BYTE4 ( 0x1F000 )
00f922 079e     +CPC R25 , R30
                 	__CPD2N 0x1F000
00f923 f418      	BRSH _0x1A
00f924 d457      	RCALL SUBOPT_0x0
00f925 30e0      	CPI  R30,0
00f926 f009      	BREQ _0x1B
                 _0x1A:
00f927 c003      	RJMP _0x19
                 _0x1B:
                 ; 0000 0118     return TRUE;                            // Address is a valid page address
00f928 e0e1      	LDI  R30,LOW(1)
00f929 940c fc78 	JMP  _0x200000A
                 ; 0000 0119   else
                 _0x19:
                 ; 0000 011A   {
                 ; 0000 011B     /*
                 ; 0000 011C     while(1)
                 ; 0000 011D     {
                 ; 0000 011E       PORTC.5=0;
                 ; 0000 011F       delay_ms(500);
                 ; 0000 0120       PORTC.5=1;
                 ; 0000 0121       delay_ms(500);
                 ; 0000 0122     }
                 ; 0000 0123     */
                 ; 0000 0124     return FALSE;                           // Address is not a valid page address
00f92b e0e0      	LDI  R30,LOW(0)
00f92c 940c fc78 	JMP  _0x200000A
                 ; 0000 0125   }
                 ; 0000 0126   #endif
                 ; 0000 0127 }
                 ; .FEND
                 ;
                 ;
                 ;/*!
                 ;* The function writes Flash temporary buffer to Flash page address given by
                 ;* input argument.
                 ;**/
                 ;
                 ;void WriteBufToFlash(MyAddressType flashStartAdr) {
                 ; 0000 012F void WriteBufToFlash(MyAddressType flashStartAdr) {
                 _WriteBufToFlash:
                 ; .FSTART _WriteBufToFlash
                 ; 0000 0130     //_WAIT_FOR_SPM();
                 ; 0000 0131     //MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 0132     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 0133     //_WAIT_FOR_SPM();
                 ; 0000 0134     //_ENABLE_RWW_SECTION();
                 ; 0000 0135     //MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 0136     _PAGE_WRITE( flashStartAdr );
00f92e d464      	RCALL SUBOPT_0x5
                 ;	flashStartAdr -> Y+0
00f92f d089      	RCALL ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0000 0137     //_WAIT_FOR_SPM();
                 ; 0000 0138     //_ENABLE_RWW_SECTION();
                 ; 0000 0139 /*
                 ; 0000 013A #pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 013B   #ifdef __HAS_RAMPZ__
                 ; 0000 013C   RAMPZ = (unsigned char)(flashStartAdr >> 16);
                 ; 0000 013D   #endif
                 ; 0000 013E   _PAGE_ERASE(flashStartAdr);
                 ; 0000 013F   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0140   _PAGE_WRITE(flashStartAdr);
                 ; 0000 0141   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0142   #ifdef RWWSRE
                 ; 0000 0143   __DataToR0ByteToSPMCR_SPM( 0, (unsigned char)(1<<RWWSRE)|(1<<SPMEN)); // Enable RWW
                 ; 0000 0144   #endif
                 ; 0000 0145 #pragma diag_default=Pe1053 // Back to default.
                 ; 0000 0146 */
                 ; 0000 0147 }
00f930 940c fc78 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function reads Flash page given by flashAddr, replaces one byte given by
                 ;* flashAddr with data, and stores entire page in Flash temporary buffer.
                 ;**/
                 ;void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 ; 0000 014D void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 ; 0000 014E //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 014F     unsigned int index, oddByte, pcWord;
                 ; 0000 0150 
                 ; 0000 0151     MyAddressType  pageAdr;
                 ; 0000 0152     oddByte=(unsigned char)flashAddr & 1;
                 ;	flashAddr -> Y+11
                 ;	data -> Y+10
                 ;	index -> R16,R17
                 ;	oddByte -> R18,R19
                 ;	pcWord -> R20,R21
                 ;	pageAdr -> Y+6
                 ; 0000 0153     pcWord=(unsigned int)flashAddr & (PAGESIZE-2); // Used when writing FLASH temp buffer
                 ; 0000 0154     pageAdr=flashAddr & ~(PAGESIZE-1);        // Get FLASH page address from byte address
                 ; 0000 0155     //while( SPMCR_REG & (1<<SPMEN) );
                 ; 0000 0156     //_ENABLE_RWW_SECTION();
                 ; 0000 0157 
                 ; 0000 0158     for(index=0; index < PAGESIZE; index+=2){
                 ; 0000 0159         if(index==pcWord){
                 ; 0000 015A           if(oddByte){
                 ; 0000 015B             //MY_FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
                 ; 0000 015C             _FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
                 ; 0000 015D           }                                     // Write odd byte in temporary buffer
                 ; 0000 015E           else{
                 ; 0000 015F             //MY_FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
                 ; 0000 0160             _FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
                 ; 0000 0161           }                                     // Write even byte in temporary buffer
                 ; 0000 0162         }
                 ; 0000 0163         else{
                 ; 0000 0164           //MY_FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
                 ; 0000 0165           _FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
                 ; 0000 0166         }                                       // Write Flash word directly to temporary buffer
                 ; 0000 0167     }
                 ; 0000 0168 //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 0169 }
                 ;/*****************************************************************************
                 ;*
                 ;* (C) 2010, HP InfoTech srl, www.hpinfotech.com
                 ;*
                 ;* File              : flash.c
                 ;* Compiler          : CodeVisionAVR V2.xx
                 ;* Revision          : $Revision: 1.0 $
                 ;* Date              : $Date: December 9, 2010 $
                 ;* Updated by        : $Author: HP InfoTech $
                 ;*
                 ;* Target platform   : All AVRs with bootloader support
                 ;*
                 ;* AppNote           : AVR109 - Self-programming
                 ;*
                 ;* Description       : Flash operations for AVR109 Self-programming
                 ;****************************************************************************/
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;
                 ;//#define	SPMCR_REG	SPMCSR
                 ;
                 ;void dospmew(void)
                 ; 0001 0018 {
                 
                 	.CSEG
                 _dospmew:
                 ; .FSTART _dospmew
                 ; 0001 0019     #asm
                 ; 0001 001A          ldi   r22,$03
00f932 e063               ldi   r22,$03
                 ; 0001 001B          WR_SPMCR_REG_R22
00f933 9360 0068          WR_SPMCR_REG_R22
                 ; 0001 001C          spm
00f935 95e8               spm
                 ; 0001 001D     #endasm
                 ; 0001 001E     _WAIT_FOR_SPM();
                 _0x20003:
00f936 91e0 0068 	LDS  R30,104
00f938 70e1      	ANDI R30,LOW(0x1)
00f939 f7e1      	BRNE _0x20003
                 ; 0001 001F     #asm
                 ; 0001 0020         ldi   r22,$05
00f93a e065              ldi   r22,$05
                 ; 0001 0021         WR_SPMCR_REG_R22
00f93b 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0022         spm
00f93d 95e8              spm
                 ; 0001 0023     #endasm
                 ; 0001 0024     _WAIT_FOR_SPM();
                 _0x20006:
00f93e 91e0 0068 	LDS  R30,104
00f940 70e1      	ANDI R30,LOW(0x1)
00f941 f7e1      	BRNE _0x20006
                 ; 0001 0025     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20009:
00f942 91e0 0068 	LDS  R30,104
00f944 74e0      	ANDI R30,LOW(0x40)
00f945 f049      	BREQ _0x2000B
                 ; 0001 0026     {
                 ; 0001 0027     #asm
                 ; 0001 0028         ldi   r22,$11
00f946 e161              ldi   r22,$11
                 ; 0001 0029         WR_SPMCR_REG_R22
00f947 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 002A         spm
00f949 95e8              spm
                 ; 0001 002B     #endasm
                 ; 0001 002C         _WAIT_FOR_SPM();
                 _0x2000C:
00f94a 91e0 0068 	LDS  R30,104
00f94c 70e1      	ANDI R30,LOW(0x1)
00f94d f7e1      	BRNE _0x2000C
                 ; 0001 002D     }
00f94e cff3      	RJMP _0x20009
                 _0x2000B:
                 ; 0001 002E }
00f94f 9508      	RET
                 ; .FEND
                 ;
                 ;void dospmw(void)
                 ; 0001 0031 {
                 _dospmw:
                 ; .FSTART _dospmw
                 ; 0001 0032     #asm
                 ; 0001 0033         ldi   r22,$05
00f950 e065              ldi   r22,$05
                 ; 0001 0034         WR_SPMCR_REG_R22
00f951 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0035         spm
00f953 95e8              spm
                 ; 0001 0036     #endasm
                 ; 0001 0037     _WAIT_FOR_SPM();
                 _0x2000F:
00f954 91e0 0068 	LDS  R30,104
00f956 70e1      	ANDI R30,LOW(0x1)
00f957 f7e1      	BRNE _0x2000F
                 ; 0001 0038     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20012:
00f958 91e0 0068 	LDS  R30,104
00f95a 74e0      	ANDI R30,LOW(0x40)
00f95b f049      	BREQ _0x20014
                 ; 0001 0039     {
                 ; 0001 003A     #asm
                 ; 0001 003B         ldi   r22,$11
00f95c e161              ldi   r22,$11
                 ; 0001 003C         WR_SPMCR_REG_R22
00f95d 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 003D         spm
00f95f 95e8              spm
                 ; 0001 003E     #endasm
                 ; 0001 003F         _WAIT_FOR_SPM();
                 _0x20015:
00f960 91e0 0068 	LDS  R30,104
00f962 70e1      	ANDI R30,LOW(0x1)
00f963 f7e1      	BRNE _0x20015
                 ; 0001 0040     }
00f964 cff3      	RJMP _0x20012
                 _0x20014:
                 ; 0001 0041 }
00f965 9508      	RET
                 ; .FEND
                 ;
                 ;void dospme(void)
                 ; 0001 0044 {
                 _dospme:
                 ; .FSTART _dospme
                 ; 0001 0045     #asm
                 ; 0001 0046         ldi   r22,$03
00f966 e063              ldi   r22,$03
                 ; 0001 0047         WR_SPMCR_REG_R22
00f967 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0048         spm
00f969 95e8              spm
                 ; 0001 0049     #endasm
                 ; 0001 004A     _WAIT_FOR_SPM();
                 _0x20018:
00f96a 91e0 0068 	LDS  R30,104
00f96c 70e1      	ANDI R30,LOW(0x1)
00f96d f7e1      	BRNE _0x20018
                 ; 0001 004B     while( SPMCR_REG & (1<<RWWSB) )
                 _0x2001B:
00f96e 91e0 0068 	LDS  R30,104
00f970 74e0      	ANDI R30,LOW(0x40)
00f971 f049      	BREQ _0x2001D
                 ; 0001 004C     {
                 ; 0001 004D     #asm
                 ; 0001 004E         ldi   r22,$11
00f972 e161              ldi   r22,$11
                 ; 0001 004F         WR_SPMCR_REG_R22
00f973 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0050         spm
00f975 95e8              spm
                 ; 0001 0051     #endasm
                 ; 0001 0052         _WAIT_FOR_SPM();
                 _0x2001E:
00f976 91e0 0068 	LDS  R30,104
00f978 70e1      	ANDI R30,LOW(0x1)
00f979 f7e1      	BRNE _0x2001E
                 ; 0001 0053     }
00f97a cff3      	RJMP _0x2001B
                 _0x2001D:
                 ; 0001 0054 }
00f97b 9508      	RET
                 ; .FEND
                 ;
                 ;void dospm(void)
                 ; 0001 0057 {
                 _dospm:
                 ; .FSTART _dospm
                 ; 0001 0058     #asm
                 ; 0001 0059          ldi   r22,$01
00f97c e061               ldi   r22,$01
                 ; 0001 005A          WR_SPMCR_REG_R22
00f97d 9360 0068          WR_SPMCR_REG_R22
                 ; 0001 005B          spm
00f97f 95e8               spm
                 ; 0001 005C     #endasm
                 ; 0001 005D     _WAIT_FOR_SPM();
                 _0x20021:
00f980 91e0 0068 	LDS  R30,104
00f982 70e1      	ANDI R30,LOW(0x1)
00f983 f7e1      	BRNE _0x20021
                 ; 0001 005E     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20024:
00f984 91e0 0068 	LDS  R30,104
00f986 74e0      	ANDI R30,LOW(0x40)
00f987 f049      	BREQ _0x20026
                 ; 0001 005F     {
                 ; 0001 0060     #asm
                 ; 0001 0061         ldi   r22,$11
00f988 e161              ldi   r22,$11
                 ; 0001 0062         WR_SPMCR_REG_R22
00f989 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0063         spm
00f98b 95e8              spm
                 ; 0001 0064     #endasm
                 ; 0001 0065         _WAIT_FOR_SPM();
                 _0x20027:
00f98c 91e0 0068 	LDS  R30,104
00f98e 70e1      	ANDI R30,LOW(0x1)
00f98f f7e1      	BRNE _0x20027
                 ; 0001 0066     }
00f990 cff3      	RJMP _0x20024
                 _0x20026:
                 ; 0001 0067 }
00f991 9508      	RET
                 ; .FEND
                 ;
                 ;#pragma warn-
                 ;
                 ;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
                 ; 0001 006C {
                 ; 0001 006D #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 006E      ldd  r30,y+1
                 ; 0001 006F      ldd  r31,y+2
                 ; 0001 0070      ld   r22,y
                 ; 0001 0071      WR_SPMCR_REG_R22
                 ; 0001 0072      lpm
                 ; 0001 0073      mov  r30,r0
                 ; 0001 0074 #endasm
                 ; 0001 0075 }
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0001 0078 {
                 ; 0001 0079 #asm
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 007A      ldd  r0,y+1
                 ; 0001 007B      ld   r22,y
                 ; 0001 007C      WR_SPMCR_REG_R22
                 ; 0001 007D      spm
                 ; 0001 007E #endasm
                 ; 0001 007F }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 0082 {
                 ; 0001 0083     #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0084          ldd  r30,y+3
                 ; 0001 0085          ldd  r31,y+4
                 ; 0001 0086          ldd  r0,y+1
                 ; 0001 0087          ldd  r1,y+2
                 ; 0001 0088          ld   r22,y
                 ; 0001 0089          WR_SPMCR_REG_R22
                 ; 0001 008A          spm
                 ; 0001 008B     #endasm
                 ; 0001 008C }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 008F {
                 ; 0001 0090 _WAIT_FOR_SPM();
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 ; 0001 0091     #asm
                 ; 0001 0092          ldd  r30,y+2
                 ; 0001 0093          ldd  r31,y+3
                 ; 0001 0094          ldd  r0,y+0
                 ; 0001 0095          ldd  r1,y+1
                 ; 0001 0096          //ldi   r22,LOW(1)
                 ; 0001 0097          //WR_SPMCR_REG_R22
                 ; 0001 0098          //spm
                 ; 0001 0099     #endasm
                 ; 0001 009A dospm();
                 ; 0001 009B }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 009E {
                 ; 0001 009F #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00A0      ldd  r30,y+1
                 ; 0001 00A1      ldd  r31,y+2
                 ; 0001 00A2      ld   r22,y
                 ; 0001 00A3      WR_SPMCR_REG_R22
                 ; 0001 00A4      spm
                 ; 0001 00A5 #endasm
                 ; 0001 00A6 }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00A9 {
                 ; 0001 00AA _WAIT_FOR_SPM();
                 ;	*addr -> Y+0
                 ; 0001 00AB #asm
                 ; 0001 00AC      ldd  r30,y+0
                 ; 0001 00AD      ldd  r31,y+1
                 ; 0001 00AE      //ld   r22,y
                 ; 0001 00AF      //WR_SPMCR_REG_R22
                 ; 0001 00B0      //spm
                 ; 0001 00B1 #endasm
                 ; 0001 00B2 dospmew();
                 ; 0001 00B3 }
                 ;
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 00B7 {
                 ; 0001 00B8 #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00B9      ldd  r30,y+3
                 ; 0001 00BA      ldd  r31,y+4
                 ; 0001 00BB      ldd  r22,y+5
                 ; 0001 00BC      out  rampz,r22
                 ; 0001 00BD      ldd  r0,y+1
                 ; 0001 00BE      ldd  r1,y+2
                 ; 0001 00BF      ld   r22,y
                 ; 0001 00C0      WR_SPMCR_REG_R22
                 ; 0001 00C1      spm
                 ; 0001 00C2 #endasm
                 ; 0001 00C3 }
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 00C6 {
                 ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F:
                 ; .FSTART ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0001 00C7 _WAIT_FOR_SPM();
00f992 93ba      	ST   -Y,R27
00f993 93aa      	ST   -Y,R26
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 _0x20030:
00f994 91e0 0068 	LDS  R30,104
00f996 70e1      	ANDI R30,LOW(0x1)
00f997 f7e1      	BRNE _0x20030
                 ; 0001 00C8 #asm
                 ; 0001 00C9      ldd  r30,y+2
00f998 81ea           ldd  r30,y+2
                 ; 0001 00CA      ldd  r31,y+3
00f999 81fb           ldd  r31,y+3
                 ; 0001 00CB      ldd  r22,y+4
00f99a 816c           ldd  r22,y+4
                 ; 0001 00CC      out  rampz,r22
00f99b bf6b           out  rampz,r22
                 ; 0001 00CD      ldd  r0,y+0
00f99c 8008           ldd  r0,y+0
                 ; 0001 00CE      ldd  r1,y+1
00f99d 8019           ldd  r1,y+1
                 ; 0001 00CF      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00D0      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00D1      //spm
                      //spm
                 ; 0001 00D2 #endasm
                 ; 0001 00D3 dospm();
00f99e dfdd      	RCALL _dospm
                 ; 0001 00D4 }
00f99f 940c fd09 	JMP  _0x2000004
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 00D7 {
                 ; 0001 00D8 #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00D9      ldd  r30,y+1
                 ; 0001 00DA      ldd  r31,y+2
                 ; 0001 00DB      ldd  r22,y+3
                 ; 0001 00DC      out  rampz,r22
                 ; 0001 00DD      ld   r22,y
                 ; 0001 00DE      WR_SPMCR_REG_R22
                 ; 0001 00DF      spm
                 ; 0001 00E0 #endasm
                 ; 0001 00E1 }
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00E4 {
                 ___AddrToZ24ByteToSPMCR_SPM_W:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0001 00E5 _WAIT_FOR_SPM();
00f9a1 d5d4      	RCALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20033:
00f9a2 91e0 0068 	LDS  R30,104
00f9a4 70e1      	ANDI R30,LOW(0x1)
00f9a5 f7e1      	BRNE _0x20033
                 ; 0001 00E6 #asm
                 ; 0001 00E7      ldd  r30,y+0
00f9a6 81e8           ldd  r30,y+0
                 ; 0001 00E8      ldd  r31,y+1
00f9a7 81f9           ldd  r31,y+1
                 ; 0001 00E9      ldd  r22,y+2
00f9a8 816a           ldd  r22,y+2
                 ; 0001 00EA      out  rampz,r22
00f9a9 bf6b           out  rampz,r22
                 ; 0001 00EB      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00EC      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00ED      //spm
                      //spm
                 ; 0001 00EE #endasm
                 ; 0001 00EF dospmw();
00f9aa dfa5      	RCALL _dospmw
                 ; 0001 00F0 }
00f9ab 940c fc78 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_E(void flash *addr)
                 ; 0001 00F3 {
                 ___AddrToZ24ByteToSPMCR_SPM_E:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0001 00F4 _WAIT_FOR_SPM();
00f9ad d5c8      	RCALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20036:
00f9ae 91e0 0068 	LDS  R30,104
00f9b0 70e1      	ANDI R30,LOW(0x1)
00f9b1 f7e1      	BRNE _0x20036
                 ; 0001 00F5 #asm
                 ; 0001 00F6      ldd  r30,y+0
00f9b2 81e8           ldd  r30,y+0
                 ; 0001 00F7      ldd  r31,y+1
00f9b3 81f9           ldd  r31,y+1
                 ; 0001 00F8      ldd  r22,y+2
00f9b4 816a           ldd  r22,y+2
                 ; 0001 00F9      out  rampz,r22
00f9b5 bf6b           out  rampz,r22
                 ; 0001 00FA      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00FB      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00FC      //spm
                      //spm
                 ; 0001 00FD #endasm
                 ; 0001 00FE dospme();
00f9b6 dfaf      	RCALL _dospme
                 ; 0001 00FF }
00f9b7 940c fc78 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_EW(void flash *addr)
                 ; 0001 0102 {
                 ___AddrToZ24ByteToSPMCR_SPM_EW:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0001 0103 _WAIT_FOR_SPM();
00f9b9 d5bc      	RCALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20039:
00f9ba 91e0 0068 	LDS  R30,104
00f9bc 70e1      	ANDI R30,LOW(0x1)
00f9bd f7e1      	BRNE _0x20039
                 ; 0001 0104 #asm
                 ; 0001 0105      ldd  r30,y+0
00f9be 81e8           ldd  r30,y+0
                 ; 0001 0106      ldd  r31,y+1
00f9bf 81f9           ldd  r31,y+1
                 ; 0001 0107      ldd  r22,y+2
00f9c0 816a           ldd  r22,y+2
                 ; 0001 0108      out  rampz,r22
00f9c1 bf6b           out  rampz,r22
                 ; 0001 0109      //ld   r22,y
                      //ld   r22,y
                 ; 0001 010A      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 010B      //spm
                      //spm
                 ; 0001 010C #endasm
                 ; 0001 010D dospmew();
00f9c2 df6f      	RCALL _dospmew
                 ; 0001 010E }
00f9c3 940c fc78 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;#ifdef _WARNINGS_ON_
                 ;#pragma warn+
                 ;#endif
                 ;
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming_main.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : This example is written for ATmega128.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains an example program using the Flash R/W
                 ;*                       functions provided with the files Self_programming.h /
                 ;*                       Self_programming.c . The program should be compiled using
                 ;*                       a linker file (*.xcl) that is configured to place the
                 ;*                       entire program code into the Boot section of the Flash memory.
                 ;*                       Please refer to the application note document for more
                 ;*                       information.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;*****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;#include "Self_programming.h"
                 ;#include "spi_sdcard.h"
                 ;
                 ;#define SDBUF_SIZE  512
                 ;#define PAGES_PER_SDBUF (SDBUF_SIZE/PAGESIZE)
                 ;
                 ;
                 ;unsigned char result[5], sdBuf[SDBUF_SIZE], testBuf[PAGESIZE], token, SectorsPerCluster, pagesCnt;
                 ;unsigned long appStartAdr,adr,SectorsPerFat,fat_begin_lba;
                 ;unsigned long cluster_begin_lba,root_dir_first_cluster,fat_file_adr,fat_file_next_adr,filesize,readbytes;
                 ;unsigned int appPages,bytesChecksum,checksumCnt;
                 ;unsigned int Number_of_Reserved_Sectors;
                 ;//(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
                 ;//(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FA ...
                 ;//(unsigned char)sectors_per_cluster = BPB_SecPerClus;
                 ;//(unsigned long)root_dir_first_cluster = BPB_RootClus;
                 ;//void testWrite();
                 ;
                 ;#ifdef DEBUGLED
                 ;void errorSD(unsigned char err);
                 ;#endif
                 ;
                 ;unsigned long buf2num(unsigned char *buf,unsigned char len);
                 ;unsigned char compbuf(const unsigned char *src,unsigned char *dest);
                 ;void (*app_pointer)(void) = (void(*)(void))0x0000;
                 ;
                 ;void main( void ){
                 ; 0002 0039 void main( void ){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0002 003A 
                 ; 0002 003B   unsigned int i,j,k;
                 ; 0002 003C   unsigned char rollnum;
                 ; 0002 003D   unsigned char rollbuf[11];
                 ; 0002 003E /* globally enable interrupts */
                 ; 0002 003F #asm("sei")
00f9c5 972c      	SBIW R28,12
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                 ;	rollnum -> Y+11
                 ;	rollbuf -> Y+0
00f9c6 9478      	SEI
                 ; 0002 0040 
                 ; 0002 0041 #ifdef DEBUGLED
                 ; 0002 0042   DDRC=0xFF;
                 ; 0002 0043   PORTC=0xFF;
                 ; 0002 0044     //do
                 ; 0002 0045     {
                 ; 0002 0046       PORTC.0=0;
                 ; 0002 0047       PORTC.1=1;
                 ; 0002 0048       delay_ms(500);
                 ; 0002 0049       PORTC.1=0;
                 ; 0002 004A       PORTC.0=1;
                 ; 0002 004B       delay_ms(500);
                 ; 0002 004C       PORTC=0xFF;
                 ; 0002 004D     }
                 ; 0002 004E     //while(1);
                 ; 0002 004F #endif
                 ; 0002 0050   //init SD
                 ; 0002 0051   if((result[0]=SD_init())!=SD_SUCCESS){
00f9c7 d306      	RCALL _SD_init
00f9c8 93e0 091b 	STS  _result,R30
                 ; 0002 0052 #ifdef DEBUGLED
                 ; 0002 0053     errorSD(0);
                 ; 0002 0054 #endif
                 ; 0002 0055   }
                 ; 0002 0056 
                 ; 0002 0057   // read MBR get FAT start sector
                 ; 0002 0058   if((result[0]=SD_readSingleBlock(0, sdBuf, &token))!=SD_SUCCESS){
00f9ca d3b8      	RCALL SUBOPT_0x2
00f9cb d3cc      	RCALL SUBOPT_0x7
                 ; 0002 0059 #ifdef DEBUGLED
                 ; 0002 005A     errorSD(1);
                 ; 0002 005B #endif
                 ; 0002 005C   }
                 ; 0002 005D 
                 ; 0002 005E   adr=buf2num(&sdBuf[445+9],4);//FAT start sector. 1 sector = 512 bytes
                +
00f9cc eee6     +LDI R30 , LOW ( _sdBuf + ( 454 ) )
00f9cd e0fa     +LDI R31 , HIGH ( _sdBuf + ( 454 ) )
                 	__POINTW1MN _sdBuf,454
00f9ce d3d3      	RCALL SUBOPT_0x8
00f9cf d3d6      	RCALL SUBOPT_0x9
                 ; 0002 005F 
                 ; 0002 0060   //load and read FAT ID (1st) sector. Get FAT info. Secors per Cluster and etc..
                 ; 0002 0061   if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00f9d0 d3de      	RCALL SUBOPT_0xA
                 ; 0002 0062     #ifdef DEBUGLED
                 ; 0002 0063     errorSD(2);
                 ; 0002 0064     #endif
                 ; 0002 0065   }
                 ; 0002 0066 
                 ; 0002 0067   SectorsPerCluster=sdBuf[0x0D];// 8 sectors per cluster
                +
00f9d1 9080 092d+LDS R8 , _sdBuf + ( 13 )
                 	__GETBRMN 8,_sdBuf,13
                 ; 0002 0068   SectorsPerFat=buf2num(&sdBuf[0x24],4); // 0xF10 for test sdcard
                +
00f9d3 e4e4     +LDI R30 , LOW ( _sdBuf + ( 36 ) )
00f9d4 e0f9     +LDI R31 , HIGH ( _sdBuf + ( 36 ) )
                 	__POINTW1MN _sdBuf,36
00f9d5 d3cc      	RCALL SUBOPT_0x8
00f9d6 93e0 0c28 	STS  _SectorsPerFat,R30
00f9d8 93f0 0c29 	STS  _SectorsPerFat+1,R31
00f9da 9360 0c2a 	STS  _SectorsPerFat+2,R22
00f9dc 9370 0c2b 	STS  _SectorsPerFat+3,R23
                 ; 0002 0069   Number_of_Reserved_Sectors=buf2num(&sdBuf[0x0E],2); // 0x20 usually
                +
00f9de e2ee     +LDI R30 , LOW ( _sdBuf + ( 14 ) )
00f9df e0f9     +LDI R31 , HIGH ( _sdBuf + ( 14 ) )
                 	__POINTW1MN _sdBuf,14
00f9e0 93fa      	ST   -Y,R31
00f9e1 93ea      	ST   -Y,R30
00f9e2 e0a2      	LDI  R26,LOW(2)
00f9e3 d220      	RCALL _buf2num
00f9e4 93e0 0c48 	STS  _Number_of_Reserved_Sectors,R30
00f9e6 93f0 0c49 	STS  _Number_of_Reserved_Sectors+1,R31
                 ; 0002 006A   //read the FAT fils/directories info from Root Directory cluster (usually 2),Number_of_Reserved_Sectors (usually 0x20) ...
                 ; 0002 006B   //(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
                 ; 0002 006C   fat_begin_lba=adr+Number_of_Reserved_Sectors;//0x20;//first sector of FAT data
00f9e8 91a0 0c24 	LDS  R26,_adr
00f9ea 91b0 0c25 	LDS  R27,_adr+1
00f9ec 9180 0c26 	LDS  R24,_adr+2
00f9ee 9190 0c27 	LDS  R25,_adr+3
00f9f0 2766      	CLR  R22
00f9f1 2777      	CLR  R23
00f9f2 d4cf      	RCALL __ADDD12
00f9f3 93e0 0c2c 	STS  _fat_begin_lba,R30
00f9f5 93f0 0c2d 	STS  _fat_begin_lba+1,R31
00f9f7 9360 0c2e 	STS  _fat_begin_lba+2,R22
00f9f9 9370 0c2f 	STS  _fat_begin_lba+3,R23
                 ; 0002 006D   //(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_ ...
                 ; 0002 006E   //Number_of_FATs always 2. Offset 0x10 8bit
                 ; 0002 006F   cluster_begin_lba=fat_begin_lba+(2*SectorsPerFat);//number of sector where data begin
00f9fb 91e0 0c28 	LDS  R30,_SectorsPerFat
00f9fd 91f0 0c29 	LDS  R31,_SectorsPerFat+1
00f9ff 9160 0c2a 	LDS  R22,_SectorsPerFat+2
00fa01 9170 0c2b 	LDS  R23,_SectorsPerFat+3
00fa03 d4ff      	RCALL __LSLD1
00fa04 91a0 0c2c 	LDS  R26,_fat_begin_lba
00fa06 91b0 0c2d 	LDS  R27,_fat_begin_lba+1
00fa08 9180 0c2e 	LDS  R24,_fat_begin_lba+2
00fa0a 9190 0c2f 	LDS  R25,_fat_begin_lba+3
00fa0c d4b5      	RCALL __ADDD12
00fa0d 93e0 0c30 	STS  _cluster_begin_lba,R30
00fa0f 93f0 0c31 	STS  _cluster_begin_lba+1,R31
00fa11 9360 0c32 	STS  _cluster_begin_lba+2,R22
00fa13 9370 0c33 	STS  _cluster_begin_lba+3,R23
                 ; 0002 0070   //read root dir (sector 2 but always offset 2 too then 0) to find folder 0 FAT reference. and find Flash.dat sector
                 ; 0002 0071   //lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;
                 ; 0002 0072   adr=cluster_begin_lba +(2-2)*SectorsPerCluster;
00fa15 d390      	RCALL SUBOPT_0x9
                 ; 0002 0073   //adr*=512UL;
                 ; 0002 0074   result[1]=0;
00fa16 e0e0      	LDI  R30,LOW(0)
                +
00fa17 93e0 091c+STS _result + ( 1 ) , R30
                 	__PUTB1MN _result,1
                 ; 0002 0075   for(i=0;i<SectorsPerCluster;i++)
                +
00fa19 e000     +LDI R16 , LOW ( 0 )
00fa1a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x40007:
00fa1b d39d      	RCALL SUBOPT_0xB
00fa1c f4d0      	BRSH _0x40008
                 ; 0002 0076   {
                 ; 0002 0077       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00fa1d d391      	RCALL SUBOPT_0xA
                 ; 0002 0078     #ifdef DEBUGLED
                 ; 0002 0079         errorSD(3);
                 ; 0002 007A     #endif
                 ; 0002 007B       }
                 ; 0002 007C       for(j=0;j<(16);j++)
                +
00fa1e e020     +LDI R18 , LOW ( 0 )
00fa1f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4000B:
                +
00fa20 3120     +CPI R18 , LOW ( 16 )
00fa21 e0e0     +LDI R30 , HIGH ( 16 )
00fa22 073e     +CPC R19 , R30
                 	__CPWRN 18,19,16
00fa23 f438      	BRSH _0x4000C
                 ; 0002 007D       {
                 ; 0002 007E            if((result[1]=compbuf("0          ",&sdBuf[j*32]))!=0)
                +
00fa24 e0e0     +LDI R30 , LOW ( _0x4000E + ( 0 ) )
00fa25 e0f9     +LDI R31 , HIGH ( _0x4000E + ( 0 ) )
                 	__POINTW1MN _0x4000E,0
00fa26 d398      	RCALL SUBOPT_0xC
00fa27 f419      	BRNE _0x4000C
                 ; 0002 007F            {
                 ; 0002 0080                 break;//dir 0 is found
                 ; 0002 0081            }
                 ; 0002 0082       }
                +
00fa28 5f2f     +SUBI R18 , LOW ( - 1 )
00fa29 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00fa2a cff5      	RJMP _0x4000B
                 _0x4000C:
                 ; 0002 0083       if(result[1]!=0)
                +
00fa2b 91e0 091c+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00fa2d 30e0      	CPI  R30,0
00fa2e f021      	BREQ _0x4000F
                 ; 0002 0084       {
                 ; 0002 0085         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
00fa2f d39e      	RCALL SUBOPT_0xD
00fa30 d3a3      	RCALL SUBOPT_0xE
                 ; 0002 0086         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
00fa31 d3b1      	RCALL SUBOPT_0xF
                 ; 0002 0087         break;
00fa32 c004      	RJMP _0x40008
                 ; 0002 0088       }
                 ; 0002 0089       else
                 _0x4000F:
                 ; 0002 008A         adr++;
00fa33 d3c6      	RCALL SUBOPT_0x10
                 ; 0002 008B   }
                +
00fa34 5f0f     +SUBI R16 , LOW ( - 1 )
00fa35 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00fa36 cfe4      	RJMP _0x40007
                 _0x40008:
                 ; 0002 008C   adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
00fa37 d3cb      	RCALL SUBOPT_0x11
                 ; 0002 008D   for(i=0;i<SectorsPerCluster;i++)
                 _0x40012:
00fa38 d380      	RCALL SUBOPT_0xB
00fa39 f548      	BRSH _0x40013
                 ; 0002 008E   {
                 ; 0002 008F       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00fa3a d374      	RCALL SUBOPT_0xA
                 ; 0002 0090     #ifdef DEBUGLED
                 ; 0002 0091         errorSD(4);
                 ; 0002 0092     #endif
                 ; 0002 0093       }
                 ; 0002 0094       for(j=0;j<(16);j++)
                +
00fa3b e020     +LDI R18 , LOW ( 0 )
00fa3c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40016:
                +
00fa3d 3120     +CPI R18 , LOW ( 16 )
00fa3e e0e0     +LDI R30 , HIGH ( 16 )
00fa3f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,16
00fa40 f438      	BRSH _0x40017
                 ; 0002 0095       {
                 ; 0002 0096            if((result[1]=compbuf("NEW",&sdBuf[j*32]))!=0)
                +
00fa41 e0ec     +LDI R30 , LOW ( _0x4000E + ( 12 ) )
00fa42 e0f9     +LDI R31 , HIGH ( _0x4000E + ( 12 ) )
                 	__POINTW1MN _0x4000E,12
00fa43 d37b      	RCALL SUBOPT_0xC
00fa44 f419      	BRNE _0x40017
                 ; 0002 0097            {
                 ; 0002 0098                 break;//file Flash... is found
                 ; 0002 0099            }
                 ; 0002 009A       }
                +
00fa45 5f2f     +SUBI R18 , LOW ( - 1 )
00fa46 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00fa47 cff5      	RJMP _0x40016
                 _0x40017:
                 ; 0002 009B       if(result[1]!=0)
                +
00fa48 91e0 091c+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00fa4a 30e0      	CPI  R30,0
00fa4b f099      	BREQ _0x40019
                 ; 0002 009C       {
                 ; 0002 009D         //read 1st number of cluster where data placed
                 ; 0002 009E         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
00fa4c d381      	RCALL SUBOPT_0xD
00fa4d d386      	RCALL SUBOPT_0xE
                 ; 0002 009F         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
00fa4e d394      	RCALL SUBOPT_0xF
                 ; 0002 00A0         filesize = buf2num(&sdBuf[j*32+0x1C],8);
00fa4f d37e      	RCALL SUBOPT_0xD
                +
00fa50 5ce4     +SUBI R30 , LOW ( - _sdBuf - ( 28 ) )
00fa51 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 28 ) )
                 	__ADDW1MN _sdBuf,28
00fa52 93fa      	ST   -Y,R31
00fa53 93ea      	ST   -Y,R30
00fa54 e0a8      	LDI  R26,LOW(8)
00fa55 d1ae      	RCALL _buf2num
00fa56 93e0 0c3c 	STS  _filesize,R30
00fa58 93f0 0c3d 	STS  _filesize+1,R31
00fa5a 9360 0c3e 	STS  _filesize+2,R22
00fa5c 9370 0c3f 	STS  _filesize+3,R23
                 ; 0002 00A1         break;
00fa5e c004      	RJMP _0x40013
                 ; 0002 00A2       }
                 ; 0002 00A3       else
                 _0x40019:
                 ; 0002 00A4         adr++;
00fa5f d39a      	RCALL SUBOPT_0x10
                 ; 0002 00A5   }
                +
00fa60 5f0f     +SUBI R16 , LOW ( - 1 )
00fa61 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00fa62 cfd5      	RJMP _0x40012
                 _0x40013:
                 ; 0002 00A6 
                 ; 0002 00A7   if(result[1]==0){// error if file not found
                 ; 0002 00A8     #ifdef DEBUGLED
                 ; 0002 00A9         errorSD(4);
                 ; 0002 00AA     #endif
                 ; 0002 00AB   }
                 ; 0002 00AC   //change filename to DON after good prog
                 ; 0002 00AD   sdBuf[j*32+0]='D';sdBuf[j*32+1]='O';sdBuf[j*32+2]='N';
00fa63 d36a      	RCALL SUBOPT_0xD
                +
00fa64 5ee0     +SUBI R30 , LOW ( - _sdBuf - ( 0 ) )
00fa65 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 0 ) )
                 	__ADDW1MN _sdBuf,0
00fa66 e4a4      	LDI  R26,LOW(68)
00fa67 83a0      	STD  Z+0,R26
00fa68 d365      	RCALL SUBOPT_0xD
                +
00fa69 5def     +SUBI R30 , LOW ( - _sdBuf - ( 1 ) )
00fa6a 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 1 ) )
                 	__ADDW1MN _sdBuf,1
00fa6b e4af      	LDI  R26,LOW(79)
00fa6c 83a0      	STD  Z+0,R26
00fa6d d360      	RCALL SUBOPT_0xD
                +
00fa6e 5dee     +SUBI R30 , LOW ( - _sdBuf - ( 2 ) )
00fa6f 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 2 ) )
                 	__ADDW1MN _sdBuf,2
00fa70 e4ae      	LDI  R26,LOW(78)
00fa71 83a0      	STD  Z+0,R26
                 ; 0002 00AE   result[0]=SD_writeSingleBlock(adr, sdBuf, &token);
00fa72 91e0 0c24 	LDS  R30,_adr
00fa74 91f0 0c25 	LDS  R31,_adr+1
00fa76 9160 0c26 	LDS  R22,_adr+2
00fa78 9170 0c27 	LDS  R23,_adr+3
00fa7a d4f6      	RCALL __PUTPARD1
00fa7b e2e0      	LDI  R30,LOW(_sdBuf)
00fa7c e0f9      	LDI  R31,HIGH(_sdBuf)
00fa7d 93fa      	ST   -Y,R31
00fa7e 93ea      	ST   -Y,R30
00fa7f e0a9      	LDI  R26,LOW(9)
00fa80 e0b0      	LDI  R27,HIGH(9)
00fa81 d2bd      	RCALL _SD_writeSingleBlock
00fa82 93e0 091b 	STS  _result,R30
                 ; 0002 00AF 
                 ; 0002 00B0 
                 ; 0002 00B1   //check FAT for chain of clusters to read
                 ; 0002 00B2   readbytes=0;
00fa84 e0e0      	LDI  R30,LOW(0)
00fa85 93e0 0c40 	STS  _readbytes,R30
00fa87 93e0 0c41 	STS  _readbytes+1,R30
00fa89 93e0 0c42 	STS  _readbytes+2,R30
00fa8b 93e0 0c43 	STS  _readbytes+3,R30
                 ; 0002 00B3   while(fat_file_adr != 0x0FFFFFFFUL)
                 _0x4001C:
00fa8d 91a0 0c34 	LDS  R26,_fat_file_adr
00fa8f 91b0 0c35 	LDS  R27,_fat_file_adr+1
00fa91 9180 0c36 	LDS  R24,_fat_file_adr+2
00fa93 9190 0c37 	LDS  R25,_fat_file_adr+3
00fa95 d38c      	RCALL SUBOPT_0x12
00fa96 f409      	BRNE PC+2
00fa97 c154      	RJMP _0x4001E
                 ; 0002 00B4   {
                 ; 0002 00B5     //read where next cluster from FAT, check that not EOF
                 ; 0002 00B6     if((result[0]=SD_readSingleBlock(fat_begin_lba, sdBuf, &token))!=SD_SUCCESS){
00fa98 91e0 0c2c 	LDS  R30,_fat_begin_lba
00fa9a 91f0 0c2d 	LDS  R31,_fat_begin_lba+1
00fa9c 9160 0c2e 	LDS  R22,_fat_begin_lba+2
00fa9e 9170 0c2f 	LDS  R23,_fat_begin_lba+3
00faa0 d4d0      	RCALL __PUTPARD1
00faa1 d2f6      	RCALL SUBOPT_0x7
                 ; 0002 00B7     #ifdef DEBUGLED
                 ; 0002 00B8         errorSD(5);
                 ; 0002 00B9     #endif
                 ; 0002 00BA     }
                 ; 0002 00BB     fat_file_next_adr=buf2num(&sdBuf[fat_file_adr*4],4);
00faa2 91a0 0c34 	LDS  R26,_fat_file_adr
00faa4 91b0 0c35 	LDS  R27,_fat_file_adr+1
00faa6 e0e4      	LDI  R30,LOW(4)
00faa7 940e ff3f 	CALL __MULB1W2U
00faa9 5ee0      	SUBI R30,LOW(-_sdBuf)
00faaa 4ff6      	SBCI R31,HIGH(-_sdBuf)
00faab d2f6      	RCALL SUBOPT_0x8
00faac 93e0 0c38 	STS  _fat_file_next_adr,R30
00faae 93f0 0c39 	STS  _fat_file_next_adr+1,R31
00fab0 9360 0c3a 	STS  _fat_file_next_adr+2,R22
00fab2 9370 0c3b 	STS  _fat_file_next_adr+3,R23
                 ; 0002 00BC 
                 ; 0002 00BD     adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
00fab4 d34e      	RCALL SUBOPT_0x11
                 ; 0002 00BE     for(i=0;i<SectorsPerCluster;i++)
                 _0x40021:
00fab5 d303      	RCALL SUBOPT_0xB
00fab6 f008      	BRLO PC+2
00fab7 c123      	RJMP _0x40022
                 ; 0002 00BF     {
                 ; 0002 00C0         //read data from next sector of file cluster
                 ; 0002 00C1         if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00fab8 d2f6      	RCALL SUBOPT_0xA
                 ; 0002 00C2         #ifdef DEBUGLED
                 ; 0002 00C3             errorSD(6);
                 ; 0002 00C4         #endif
                 ; 0002 00C5           }
                 ; 0002 00C6         //address 2000 = start adr flash app 3 bytes, flash pages 2 bytes, checksum 2 bytes
                 ; 0002 00C7         //app bytes starts from 2048, roll 0x88
                 ; 0002 00C8         if(readbytes<512){
00fab9 d370      	RCALL SUBOPT_0x13
                +
00faba 30a0     +CPI R26 , LOW ( 0x200 )
00fabb e0e2     +LDI R30 , HIGH ( 0x200 )
00fabc 07be     +CPC R27 , R30
00fabd e0e0     +LDI R30 , BYTE3 ( 0x200 )
00fabe 078e     +CPC R24 , R30
00fabf e0e0     +LDI R30 , BYTE4 ( 0x200 )
00fac0 079e     +CPC R25 , R30
                 	__CPD2N 0x200
00fac1 f5d8      	BRSH _0x40024
                 ; 0002 00C9             //j=0x99;
                 ; 0002 00CA             for(j=0;j<256;j++){//find roll
                +
00fac2 e020     +LDI R18 , LOW ( 0 )
00fac3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40026:
                +
00fac4 3020     +CPI R18 , LOW ( 256 )
00fac5 e0e1     +LDI R30 , HIGH ( 256 )
00fac6 073e     +CPC R19 , R30
                 	__CPWRN 18,19,256
00fac7 f578      	BRSH _0x40027
                 ; 0002 00CB                if(j>0){
00fac8 2400      	CLR  R0
00fac9 1602      	CP   R0,R18
00faca 0603      	CPC  R0,R19
00facb f4c8      	BRSH _0x40028
                 ; 0002 00CC                    for(k=0;k<10;k++){//[settings]
                +
00facc e040     +LDI R20 , LOW ( 0 )
00facd e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4002A:
                +
00face 304a     +CPI R20 , LOW ( 10 )
00facf e0e0     +LDI R30 , HIGH ( 10 )
00fad0 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
00fad1 f498      	BRSH _0x4002B
                 ; 0002 00CD                         rollbuf[k]=(sdBuf[k]<<1)|(sdBuf[k]>>7);  //ROL
00fad2 01fa      	MOVW R30,R20
00fad3 01de      	MOVW R26,R28
00fad4 0fea      	ADD  R30,R26
00fad5 1ffb      	ADC  R31,R27
00fad6 01bf      	MOVW R22,R30
00fad7 d35b      	RCALL SUBOPT_0x14
00fad8 0fee      	LSL  R30
00fad9 2e0e      	MOV  R0,R30
00fada d358      	RCALL SUBOPT_0x14
00fadb d35d      	RCALL SUBOPT_0x15
                 ; 0002 00CE                         rollbuf[k]^=j;  //XOR   j=roll
00fadc 01de      	MOVW R26,R28
00fadd 0fa4      	ADD  R26,R20
00fade 1fb5      	ADC  R27,R21
00fadf 91ec      	LD   R30,X
00fae0 27e2      	EOR  R30,R18
00fae1 93ec      	ST   X,R30
                 ; 0002 00CF                    }
                +
00fae2 5f4f     +SUBI R20 , LOW ( - 1 )
00fae3 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00fae4 cfe9      	RJMP _0x4002A
                 _0x4002B:
                 ; 0002 00D0                }
                 ; 0002 00D1                result[1]=compbuf("[settings]",&rollbuf[0]);
                 _0x40028:
                +
00fae5 e1e0     +LDI R30 , LOW ( _0x4000E + ( 16 ) )
00fae6 e0f9     +LDI R31 , HIGH ( _0x4000E + ( 16 ) )
                 	__POINTW1MN _0x4000E,16
00fae7 93fa      	ST   -Y,R31
00fae8 93ea      	ST   -Y,R30
00fae9 01de      	MOVW R26,R28
00faea 9612      	ADIW R26,2
00faeb d102      	RCALL _compbuf
                +
00faec 93e0 091c+STS _result + ( 1 ) , R30
                 	__PUTB1MN _result,1
                 ; 0002 00D2                if(result[1]!=0){
                +
00faee 91e0 091c+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00faf0 30e0      	CPI  R30,0
00faf1 f011      	BREQ _0x4002C
                 ; 0002 00D3                     rollnum=j;
                +
00faf2 872b     +STD Y + 11 , R18
                 	__PUTBSR 18,11
                 ; 0002 00D4                     break;
00faf3 c003      	RJMP _0x40027
                 ; 0002 00D5                }
                 ; 0002 00D6             }
                 _0x4002C:
                +
00faf4 5f2f     +SUBI R18 , LOW ( - 1 )
00faf5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00faf6 cfcd      	RJMP _0x40026
                 _0x40027:
                 ; 0002 00D7             if(result[1]==0){//roll didn't found
                +
00faf7 91e0 091c+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00faf9 30e0      	CPI  R30,0
00fafa f411      	BRNE _0x4002D
                 ; 0002 00D8                 #ifdef DEBUGLED
                 ; 0002 00D9                 errorSD(7);
                 ; 0002 00DA                 #endif
                 ; 0002 00DB                 return;
00fafb 962c      	ADIW R28,12
                 _0x4002E:
00fafc cfff      	RJMP _0x4002E
                 ; 0002 00DC             }
                 ; 0002 00DD         }
                 _0x4002D:
                 ; 0002 00DE         for(j=0;j<512;j++)
                 _0x40024:
                +
00fafd e020     +LDI R18 , LOW ( 0 )
00fafe e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40030:
                +
00faff 3020     +CPI R18 , LOW ( 512 )
00fb00 e0e2     +LDI R30 , HIGH ( 512 )
00fb01 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00fb02 f520      	BRSH _0x40031
                 ; 0002 00DF         {
                 ; 0002 00E0             if(rollnum!=0){
00fb03 85eb      	LDD  R30,Y+11
00fb04 30e0      	CPI  R30,0
00fb05 f091      	BREQ _0x40032
                 ; 0002 00E1                 sdBuf[j]=(sdBuf[j]<<1)|(sdBuf[j]>>7);  //ROL
00fb06 01f9      	MOVW R30,R18
00fb07 5ee0      	SUBI R30,LOW(-_sdBuf)
00fb08 4ff6      	SBCI R31,HIGH(-_sdBuf)
00fb09 01bf      	MOVW R22,R30
00fb0a d335      	RCALL SUBOPT_0x16
00fb0b 0fee      	LSL  R30
00fb0c 2e0e      	MOV  R0,R30
00fb0d d332      	RCALL SUBOPT_0x16
00fb0e d32a      	RCALL SUBOPT_0x15
                 ; 0002 00E2                 sdBuf[j]^=rollnum;//0x88;  //XOR
00fb0f 01f9      	MOVW R30,R18
00fb10 5ee0      	SUBI R30,LOW(-_sdBuf)
00fb11 4ff6      	SBCI R31,HIGH(-_sdBuf)
00fb12 010f      	MOVW R0,R30
00fb13 81e0      	LD   R30,Z
00fb14 85ab      	LDD  R26,Y+11
00fb15 27ea      	EOR  R30,R26
00fb16 01d0      	MOVW R26,R0
00fb17 93ec      	ST   X,R30
                 ; 0002 00E3             }
                 ; 0002 00E4             checksumCnt+=sdBuf[j];
                 _0x40032:
00fb18 d327      	RCALL SUBOPT_0x16
00fb19 e0f0      	LDI  R31,0
00fb1a 91a0 0c46 	LDS  R26,_checksumCnt
00fb1c 91b0 0c47 	LDS  R27,_checksumCnt+1
00fb1e 0fea      	ADD  R30,R26
00fb1f 1ffb      	ADC  R31,R27
00fb20 93e0 0c46 	STS  _checksumCnt,R30
00fb22 93f0 0c47 	STS  _checksumCnt+1,R31
                 ; 0002 00E5         }
                +
00fb24 5f2f     +SUBI R18 , LOW ( - 1 )
00fb25 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00fb26 cfd8      	RJMP _0x40030
                 _0x40031:
                 ; 0002 00E6         readbytes+=512;
00fb27 91e0 0c40 	LDS  R30,_readbytes
00fb29 91f0 0c41 	LDS  R31,_readbytes+1
00fb2b 9160 0c42 	LDS  R22,_readbytes+2
00fb2d 9170 0c43 	LDS  R23,_readbytes+3
                +
00fb2f 50e0     +SUBI R30 , LOW ( - 512 )
00fb30 4ffe     +SBCI R31 , HIGH ( - 512 )
00fb31 4f6f     +SBCI R22 , BYTE3 ( - 512 )
00fb32 4f7f     +SBCI R23 , BYTE4 ( - 512 )
                 	__ADDD1N 512
00fb33 93e0 0c40 	STS  _readbytes,R30
00fb35 93f0 0c41 	STS  _readbytes+1,R31
00fb37 9360 0c42 	STS  _readbytes+2,R22
00fb39 9370 0c43 	STS  _readbytes+3,R23
                 ; 0002 00E7         //read app data
                 ; 0002 00E8         if(readbytes>2048)
00fb3b d2ee      	RCALL SUBOPT_0x13
                +
00fb3c 30a1     +CPI R26 , LOW ( 0x801 )
00fb3d e0e8     +LDI R30 , HIGH ( 0x801 )
00fb3e 07be     +CPC R27 , R30
00fb3f e0e0     +LDI R30 , BYTE3 ( 0x801 )
00fb40 078e     +CPC R24 , R30
00fb41 e0e0     +LDI R30 , BYTE4 ( 0x801 )
00fb42 079e     +CPC R25 , R30
                 	__CPD2N 0x801
00fb43 f1b8      	BRLO _0x40033
                 ; 0002 00E9         {
                 ; 0002 00EA            for(pagesCnt=0;pagesCnt<PAGES_PER_SDBUF;pagesCnt++)
00fb44 24bb      	CLR  R11
                 _0x40035:
00fb45 e0e2      	LDI  R30,LOW(2)
00fb46 16be      	CP   R11,R30
00fb47 f590      	BRSH _0x40036
                 ; 0002 00EB            {
                 ; 0002 00EC                if(WriteFlashPage(appStartAdr, &sdBuf[pagesCnt*PAGESIZE])==0)
00fb48 d2fd      	RCALL SUBOPT_0x17
00fb49 d427      	RCALL __PUTPARD1
00fb4a 2dab      	MOV  R26,R11
00fb4b e0b0      	LDI  R27,0
00fb4c e0e0      	LDI  R30,LOW(256)
00fb4d e0f1      	LDI  R31,HIGH(256)
00fb4e d3f6      	RCALL __MULW12
00fb4f 5ee0      	SUBI R30,LOW(-_sdBuf)
00fb50 4ff6      	SBCI R31,HIGH(-_sdBuf)
00fb51 01df      	MOVW R26,R30
00fb52 dd7c      	RCALL _WriteFlashPage
00fb53 30e0      	CPI  R30,0
00fb54 f449      	BRNE _0x40037
                 ; 0002 00ED                {
                 ; 0002 00EE                     //while(1)
                 ; 0002 00EF                     do
                 _0x40039:
                 ; 0002 00F0                     {
                 ; 0002 00F1                       PORTC.6=0;
00fb55 98ae      	CBI  0x15,6
                 ; 0002 00F2                       delay_ms(500);
00fb56 efa4      	LDI  R26,LOW(500)
00fb57 e0b1      	LDI  R27,HIGH(500)
00fb58 d42b      	RCALL _delay_ms
                 ; 0002 00F3                       PORTC.6=1;
00fb59 9aae      	SBI  0x15,6
                 ; 0002 00F4                       delay_ms(500);
00fb5a efa4      	LDI  R26,LOW(500)
00fb5b e0b1      	LDI  R27,HIGH(500)
00fb5c d427      	RCALL _delay_ms
                 ; 0002 00F5                     }while(1);
00fb5d cff7      	RJMP _0x40039
                 ; 0002 00F6                }
                 ; 0002 00F7                appStartAdr+=PAGESIZE;
                 _0x40037:
00fb5e d2e7      	RCALL SUBOPT_0x17
                +
00fb5f 50e0     +SUBI R30 , LOW ( - 256 )
00fb60 4fff     +SBCI R31 , HIGH ( - 256 )
00fb61 4f6f     +SBCI R22 , BYTE3 ( - 256 )
00fb62 4f7f     +SBCI R23 , BYTE4 ( - 256 )
                 	__ADDD1N 256
00fb63 d2eb      	RCALL SUBOPT_0x18
                 ; 0002 00F8                appPages--;
00fb64 01f6      	MOVW R30,R12
00fb65 9731      	SBIW R30,1
00fb66 016f      	MOVW R12,R30
                 ; 0002 00F9                if(appPages==0)
00fb67 2c0c      	MOV  R0,R12
00fb68 280d      	OR   R0,R13
00fb69 f471      	BRNE _0x4003F
                 ; 0002 00FA                {
                 ; 0002 00FB                     app_pointer();
                +
00fb6a 91e0 0c4a+LDS R30 , _app_pointer + ( 0 )
00fb6c 91f0 0c4b+LDS R31 , _app_pointer + ( 0 ) + 1
00fb6e 9509     +ICALL
                 	__CALL1MN _app_pointer,0
                 ; 0002 00FC                     do
                 _0x40041:
                 ; 0002 00FD                     {
                 ; 0002 00FE                       PORTC.5=0;
00fb6f 98ad      	CBI  0x15,5
                 ; 0002 00FF                       delay_ms(500);
00fb70 efa4      	LDI  R26,LOW(500)
00fb71 e0b1      	LDI  R27,HIGH(500)
00fb72 d411      	RCALL _delay_ms
                 ; 0002 0100                       PORTC.5=1;
00fb73 9aad      	SBI  0x15,5
                 ; 0002 0101                       delay_ms(500);
00fb74 efa4      	LDI  R26,LOW(500)
00fb75 e0b1      	LDI  R27,HIGH(500)
00fb76 d40d      	RCALL _delay_ms
                 ; 0002 0102                     }while(1);
00fb77 cff7      	RJMP _0x40041
                 ; 0002 0103                }
                 ; 0002 0104            }
                 _0x4003F:
00fb78 94b3      	INC  R11
00fb79 cfcb      	RJMP _0x40035
                 _0x40036:
                 ; 0002 0105         }
                 ; 0002 0106         //read app start adr, num of pages, checksum
                 ; 0002 0107         else if(readbytes>=2000)//Offset=512-48=464
00fb7a c039      	RJMP _0x40047
                 _0x40033:
00fb7b d2ae      	RCALL SUBOPT_0x13
                +
00fb7c 3da0     +CPI R26 , LOW ( 0x7D0 )
00fb7d e0e7     +LDI R30 , HIGH ( 0x7D0 )
00fb7e 07be     +CPC R27 , R30
00fb7f e0e0     +LDI R30 , BYTE3 ( 0x7D0 )
00fb80 078e     +CPC R24 , R30
00fb81 e0e0     +LDI R30 , BYTE4 ( 0x7D0 )
00fb82 079e     +CPC R25 , R30
                 	__CPD2N 0x7D0
00fb83 f180      	BRLO _0x40048
                 ; 0002 0108         {
                 ; 0002 0109            appStartAdr=(unsigned long)sdBuf[464]<<16;
                +
00fb84 91e0 0af0+LDS R30 , _sdBuf + ( 464 )
                 	__GETB1MN _sdBuf,464
00fb86 e0f0      	LDI  R31,0
00fb87 d38a      	RCALL __CWD1
00fb88 d384      	RCALL __LSLD16
00fb89 d2c5      	RCALL SUBOPT_0x18
                 ; 0002 010A            appStartAdr|=(unsigned long)sdBuf[465]<<8;
                +
00fb8a 91e0 0af1+LDS R30 , _sdBuf + ( 465 )
                 	__GETB1MN _sdBuf,465
00fb8c e0f0      	LDI  R31,0
00fb8d d384      	RCALL __CWD1
00fb8e 01df      	MOVW R26,R30
00fb8f 01cb      	MOVW R24,R22
00fb90 e0e8      	LDI  R30,LOW(8)
00fb91 d343      	RCALL __LSLD12
00fb92 d2c5      	RCALL SUBOPT_0x19
                 ; 0002 010B            appStartAdr|=(unsigned long)sdBuf[466];
                +
00fb93 91e0 0af2+LDS R30 , _sdBuf + ( 466 )
                 	__GETB1MN _sdBuf,466
00fb95 e0f0      	LDI  R31,0
00fb96 d37b      	RCALL __CWD1
00fb97 d2c0      	RCALL SUBOPT_0x19
                 ; 0002 010C            appPages=(unsigned int)sdBuf[467]<<8;
                +
00fb98 91f0 0af3+LDS R31 , _sdBuf + ( 467 )
                 	__GETBRMN 31,_sdBuf,467
00fb9a e0e0      	LDI  R30,LOW(0)
00fb9b 016f      	MOVW R12,R30
                 ; 0002 010D            appPages|=(unsigned int)sdBuf[468];
                +
00fb9c 91e0 0af4+LDS R30 , _sdBuf + ( 468 )
                 	__GETB1MN _sdBuf,468
00fb9e e0f0      	LDI  R31,0
                +
00fb9f 2ace     +OR R12 , R30
00fba0 2adf     +OR R13 , R31
                 	__ORWRR 12,13,30,31
                 ; 0002 010E            bytesChecksum=(unsigned int)sdBuf[469]<<8;
                +
00fba1 91f0 0af5+LDS R31 , _sdBuf + ( 469 )
                 	__GETBRMN 31,_sdBuf,469
00fba3 e0e0      	LDI  R30,LOW(0)
00fba4 d2bd      	RCALL SUBOPT_0x1A
                 ; 0002 010F            bytesChecksum|=(unsigned int)sdBuf[470];
                +
00fba5 91e0 0af6+LDS R30 , _sdBuf + ( 470 )
                 	__GETB1MN _sdBuf,470
00fba7 e0f0      	LDI  R31,0
00fba8 91a0 0c44 	LDS  R26,_bytesChecksum
00fbaa 91b0 0c45 	LDS  R27,_bytesChecksum+1
00fbac 2bea      	OR   R30,R26
00fbad 2bfb      	OR   R31,R27
00fbae d2b3      	RCALL SUBOPT_0x1A
                 ; 0002 0110            checksumCnt=0;
00fbaf e0e0      	LDI  R30,LOW(0)
00fbb0 93e0 0c46 	STS  _checksumCnt,R30
00fbb2 93e0 0c47 	STS  _checksumCnt+1,R30
                 ; 0002 0111         }
                 ; 0002 0112         if(fat_file_next_adr == 0x0FFFFFFFUL)
                 _0x40048:
                 _0x40047:
00fbb4 91a0 0c38 	LDS  R26,_fat_file_next_adr
00fbb6 91b0 0c39 	LDS  R27,_fat_file_next_adr+1
00fbb8 9180 0c3a 	LDS  R24,_fat_file_next_adr+2
00fbba 9190 0c3b 	LDS  R25,_fat_file_next_adr+3
00fbbc d265      	RCALL SUBOPT_0x12
00fbbd f4c9      	BRNE _0x40049
                 ; 0002 0113             if(readbytes >= filesize)
00fbbe 91e0 0c3c 	LDS  R30,_filesize
00fbc0 91f0 0c3d 	LDS  R31,_filesize+1
00fbc2 9160 0c3e 	LDS  R22,_filesize+2
00fbc4 9170 0c3f 	LDS  R23,_filesize+3
00fbc6 d263      	RCALL SUBOPT_0x13
00fbc7 d3b7      	RCALL __CPD21
00fbc8 f490      	BRSH _0x40022
                 ; 0002 0114             {
                 ; 0002 0115                 break;
                 ; 0002 0116             }
                 ; 0002 0117             else
                 ; 0002 0118             {
                 ; 0002 0119 
                 ; 0002 011A                 if(  WriteFlashPage(0x1EF00, sdBuf))//;     // Writes testbuffer1 to Flash page 2
00fbc9 d29d      	RCALL SUBOPT_0x1B
00fbca e2a0      	LDI  R26,LOW(_sdBuf)
00fbcb e0b9      	LDI  R27,HIGH(_sdBuf)
00fbcc dd02      	RCALL _WriteFlashPage
00fbcd 30e0      	CPI  R30,0
00fbce f009      	BREQ _0x4004C
                 ; 0002 011B                     PORTC.5=0;                                          // Function returns TRUE
00fbcf 98ad      	CBI  0x15,5
                 ; 0002 011C                 if(  ReadFlashPage (0x1EF00, testBuf))//;      // Reads back Flash page 2 to TestBuffer2
                 _0x4004C:
00fbd0 d296      	RCALL SUBOPT_0x1B
00fbd1 e2a0      	LDI  R26,LOW(_testBuf)
00fbd2 e0bb      	LDI  R27,HIGH(_testBuf)
00fbd3 dccf      	RCALL _ReadFlashPage
00fbd4 30e0      	CPI  R30,0
00fbd5 f009      	BREQ _0x4004F
                 ; 0002 011D                     PORTC.6=0;
00fbd6 98ae      	CBI  0x15,6
                 ; 0002 011E             }
                 _0x4004F:
                 ; 0002 011F 
                 ; 0002 0120         adr++;
                 _0x40049:
00fbd7 d222      	RCALL SUBOPT_0x10
                 ; 0002 0121     }
                +
00fbd8 5f0f     +SUBI R16 , LOW ( - 1 )
00fbd9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00fbda ceda      	RJMP _0x40021
                 _0x40022:
                 ; 0002 0122     fat_file_adr = fat_file_next_adr;
00fbdb 91e0 0c38 	LDS  R30,_fat_file_next_adr
00fbdd 91f0 0c39 	LDS  R31,_fat_file_next_adr+1
00fbdf 9160 0c3a 	LDS  R22,_fat_file_next_adr+2
00fbe1 9170 0c3b 	LDS  R23,_fat_file_next_adr+3
00fbe3 93e0 0c34 	STS  _fat_file_adr,R30
00fbe5 93f0 0c35 	STS  _fat_file_adr+1,R31
00fbe7 9360 0c36 	STS  _fat_file_adr+2,R22
00fbe9 9370 0c37 	STS  _fat_file_adr+3,R23
                 ; 0002 0123   }
00fbeb cea1      	RJMP _0x4001C
                 _0x4001E:
                 ; 0002 0124 
                 ; 0002 0125 
                 ; 0002 0126   while(1);
                 _0x40052:
00fbec cfff      	RJMP _0x40052
                 ; 0002 0127   //static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
                 ; 0002 0128   //if(PORTA==0x55)
                 ; 0002 0129     //testWrite();                                          // Returns TRUE
                 ; 0002 012A   //__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
                 ; 0002 012B   //__AddrToZ24ByteToSPMCR_SPM_W((void flash *)0);
                 ; 0002 012C   /*
                 ; 0002 012D   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
                 ; 0002 012E   unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
                 ; 0002 012F                                             // code stack
                 ; 0002 0130   int index;
                 ; 0002 0131 
                 ; 0002 0132   DDRC=0xFF;
                 ; 0002 0133   PORTC=0xFF;
                 ; 0002 0134   //DDRC=0x00;
                 ; 0002 0135   //PORTC=0x00;
                 ; 0002 0136   //MCUCR |= (1<<IVSEL);
                 ; 0002 0137                         // Move interrupt vectors to boot
                 ; 0002 0138   //RecoverFlash();
                 ; 0002 0139 
                 ; 0002 013A   dospm();
                 ; 0002 013B 
                 ; 0002 013C   for(index=0; index<PAGESIZE; index++){
                 ; 0002 013D     testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
                 ; 0002 013E   }
                 ; 0002 013F   PORTC.4=0;
                 ; 0002 0140   //for(;;){
                 ; 0002 0141   if(  WriteFlashPage(0x1000, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
                 ; 0002 0142     PORTC.5=0;                                          // Function returns TRUE
                 ; 0002 0143   if(  ReadFlashPage(0x1000, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
                 ; 0002 0144     PORTC.6=0;                                          // Function returns TRUE
                 ; 0002 0145   if(  WriteFlashByte(0x1004, 0x38))//;            // Writes 0x38 to byte address 0x204
                 ; 0002 0146     PORTC.5=0;                                          // Same as byte 4 on page 2
                 ; 0002 0147   */
                 ; 0002 0148 
                 ; 0002 0149   //}
                 ; 0002 014A }
                 _0x40055:
00fbed cfff      	RJMP _0x40055
                 ; .FEND
                 
                 	.DSEG
                 _0x4000E:
000900           	.BYTE 0x1B
                 ;
                 ;unsigned char compbuf(const unsigned char *src,unsigned char *dest)
                 ; 0002 014D {
                 
                 	.CSEG
                 _compbuf:
                 ; .FSTART _compbuf
                 ; 0002 014E     while(*src)
00fbee 93ba      	ST   -Y,R27
00fbef 93aa      	ST   -Y,R26
                 ;	*src -> Y+2
                 ;	*dest -> Y+0
                 _0x40056:
00fbf0 81aa      	LDD  R26,Y+2
00fbf1 81bb      	LDD  R27,Y+2+1
00fbf2 91ec      	LD   R30,X
00fbf3 30e0      	CPI  R30,0
00fbf4 f069      	BREQ _0x40058
                 ; 0002 014F     {
                 ; 0002 0150         if(*src++ != *dest++)
00fbf5 900d      	LD   R0,X+
00fbf6 83aa      	STD  Y+2,R26
00fbf7 83bb      	STD  Y+2+1,R27
00fbf8 81a8      	LD   R26,Y
00fbf9 81b9      	LDD  R27,Y+1
00fbfa 91ed      	LD   R30,X+
00fbfb 83a8      	ST   Y,R26
00fbfc 83b9      	STD  Y+1,R27
00fbfd 15e0      	CP   R30,R0
00fbfe f011      	BREQ _0x40059
                 ; 0002 0151             return 0;
00fbff e0e0      	LDI  R30,LOW(0)
00fc00 c077      	RJMP _0x200000A
                 ; 0002 0152         //src++;dest++;
                 ; 0002 0153         //len--;
                 ; 0002 0154     }
                 _0x40059:
00fc01 cfee      	RJMP _0x40056
                 _0x40058:
                 ; 0002 0155     return 1;
00fc02 e0e1      	LDI  R30,LOW(1)
00fc03 c074      	RJMP _0x200000A
                 ; 0002 0156 }
                 ; .FEND
                 ;
                 ;#ifdef DEBUGLED
                 ;void errorSD(unsigned char err)
                 ;{
                 ;#ifdef DEBUGLED
                 ;    unsigned int repeat=10;
                 ;    do{
                 ;       PORTC &= ~(1<<err);
                 ;       delay_ms(500);
                 ;       PORTC = 0xFF;
                 ;       delay_ms(500);
                 ;    }
                 ;    while(repeat--);
                 ;#endif
                 ;    app_pointer();
                 ;}
                 ;#endif
                 ;
                 ;unsigned long buf2num(unsigned char *buf,unsigned char len)
                 ; 0002 016A {
                 _buf2num:
                 ; .FSTART _buf2num
                 ; 0002 016B     unsigned long num=0;
                 ; 0002 016C     //unsigned char i;
                 ; 0002 016D     for(;len>0;len--)
00fc04 93aa      	ST   -Y,R26
00fc05 9724      	SBIW R28,4
00fc06 e0e0      	LDI  R30,LOW(0)
00fc07 83e8      	ST   Y,R30
00fc08 83e9      	STD  Y+1,R30
00fc09 83ea      	STD  Y+2,R30
00fc0a 83eb      	STD  Y+3,R30
                 ;	*buf -> Y+5
                 ;	len -> Y+4
                 ;	num -> Y+0
                 _0x4005B:
00fc0b 81ac      	LDD  R26,Y+4
00fc0c 30a1      	CPI  R26,LOW(0x1)
00fc0d f0b0      	BRLO _0x4005C
                 ; 0002 016E     {
                 ; 0002 016F         num<<=8;
00fc0e d187      	RCALL SUBOPT_0x6
00fc0f e0e8      	LDI  R30,LOW(8)
00fc10 d2c4      	RCALL __LSLD12
00fc11 d25b      	RCALL SUBOPT_0x1C
                 ; 0002 0170         num|=buf[len-1];
00fc12 81ec      	LDD  R30,Y+4
00fc13 e0f0      	LDI  R31,0
00fc14 9731      	SBIW R30,1
00fc15 81ad      	LDD  R26,Y+5
00fc16 81be      	LDD  R27,Y+5+1
00fc17 0fae      	ADD  R26,R30
00fc18 1fbf      	ADC  R27,R31
00fc19 91ec      	LD   R30,X
00fc1a d17b      	RCALL SUBOPT_0x6
00fc1b 27ff      	CLR  R31
00fc1c 2766      	CLR  R22
00fc1d 2777      	CLR  R23
00fc1e d2ad      	RCALL __ORD12
00fc1f d24d      	RCALL SUBOPT_0x1C
                 ; 0002 0171     }
00fc20 81ec      	LDD  R30,Y+4
00fc21 50e1      	SUBI R30,LOW(1)
00fc22 83ec      	STD  Y+4,R30
00fc23 cfe7      	RJMP _0x4005B
                 _0x4005C:
                 ; 0002 0172     return num;
00fc24 d157      	RCALL SUBOPT_0x0
00fc25 9627      	ADIW R28,7
00fc26 9508      	RET
                 ; 0002 0173 }
                 ; .FEND
                 ;
                 ;/*
                 ;void testWrite()
                 ;{
                 ;  unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
                 ;  unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
                 ;                                            // code stack
                 ;
                 ;
                 ;  static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
                 ;  int index;
                 ;
                 ;  //DDRC=0xFF;
                 ;  //PORTC=0xFF;
                 ;  //DDRC=0x00;
                 ;  //PORTC=0x00;
                 ;  //MCUCR |= (1<<IVSEL);
                 ;                        // Move interrupt vectors to boot
                 ;  //RecoverFlash();
                 ;
                 ;  //dospm();
                 ;
                 ;  for(index=0; index<PAGESIZE; index++){
                 ;    testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
                 ;  }
                 ;  PORTC.4=0;
                 ;  //for(;;){
                 ;  if(  WriteFlashPage(0x1EF00, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
                 ;    PORTC.5=0;                                          // Function returns TRUE
                 ;  if(  ReadFlashPage(0x1EF00, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
                 ;    PORTC.6=0;                                          // Function returns TRUE
                 ;  if(  WriteFlashByte(0x1EF04, 0x38))//;            // Writes 0x38 to byte address 0x204
                 ;    PORTC.5=1;                                          // Same as byte 4 on page 2
                 ;  testChar = ReadFlashByte(0x1EF04);        // Reads back value from address 0x204
                 ;
                 ;  if(testChar==0x38)
                 ;  {
                 ;    while(1)
                 ;    {
                 ;      PORTC.6=0;
                 ;      delay_ms(500);
                 ;      PORTC.6=1;
                 ;      delay_ms(500);;
                 ;    }
                 ;  }
                 ;}
                 ;*/
                 ;#include "spi_sdcard.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;void SPI_init()
                 ; 0003 0007 {
                 
                 	.CSEG
                 _SPI_init:
                 ; .FSTART _SPI_init
                 ; 0003 0008     // set CS, MOSI and SCK to output
                 ; 0003 0009     DDR_SPI = (1 << CS) | (1 << MOSI) | (1 << SCK);
00fc27 e0e7      	LDI  R30,LOW(7)
00fc28 bbe7      	OUT  0x17,R30
                 ; 0003 000A     PORT_SPI|=(1 << CS);
00fc29 9ac0      	SBI  0x18,0
                 ; 0003 000B     // enable pull up resistor in MISO
                 ; 0003 000C     DDR_SPI &= ~(1 << MISO);
00fc2a 98bb      	CBI  0x17,3
                 ; 0003 000D     PORT_SPI &= ~(1 << MISO);
00fc2b 98c3      	CBI  0x18,3
                 ; 0003 000E     //PORT_SPI |= (1 << MISO);
                 ; 0003 000F 
                 ; 0003 0010     // enable SPI, set as master, and clock to fosc/128
                 ; 0003 0011     SPCR = (1 << SPE) | (1 << MSTR) | (0 << SPR1) | (0 << SPR0);
00fc2c e5e0      	LDI  R30,LOW(80)
00fc2d b9ed      	OUT  0xD,R30
                 ; 0003 0012 }
00fc2e 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char SPI_transfer(unsigned char data)
                 ; 0003 0015 {
                 _SPI_transfer:
                 ; .FSTART _SPI_transfer
                 ; 0003 0016     // load data into register
                 ; 0003 0017     SPDR = data;
00fc2f 93aa      	ST   -Y,R26
                 ;	data -> Y+0
00fc30 81e8      	LD   R30,Y
00fc31 b9ef      	OUT  0xF,R30
                 ; 0003 0018 
                 ; 0003 0019     // Wait for transmission complete
                 ; 0003 001A     while(!(SPSR & (1 << SPIF)));
                 _0x60003:
00fc32 9b77      	SBIS 0xE,7
00fc33 cffe      	RJMP _0x60003
                 ; 0003 001B 
                 ; 0003 001C     // return SPDR
                 ; 0003 001D     return SPDR;
00fc34 b1ef      	IN   R30,0xF
00fc35 9621      	ADIW R28,1
00fc36 9508      	RET
                 ; 0003 001E }
                 ; .FEND
                 ;
                 ;
                 ;void SD_powerUpSeq()
                 ; 0003 0022 {
                 _SD_powerUpSeq:
                 ; .FSTART _SD_powerUpSeq
                 ; 0003 0023     unsigned char i;
                 ; 0003 0024 
                 ; 0003 0025     SPI_init();
00fc37 931a      	ST   -Y,R17
                 ;	i -> R17
00fc38 dfee      	RCALL _SPI_init
                 ; 0003 0026 
                 ; 0003 0027     // make sure card is deselected
                 ; 0003 0028     CS_DISABLE();
00fc39 9ac0      	SBI  0x18,0
                 ; 0003 0029 
                 ; 0003 002A     // give SD card time to power up
                 ; 0003 002B     delay_ms(1);
00fc3a e0a1      	LDI  R26,LOW(1)
00fc3b e0b0      	LDI  R27,0
00fc3c d347      	RCALL _delay_ms
                 ; 0003 002C 
                 ; 0003 002D     // send 80 clock cycles to synchronize
                 ; 0003 002E     for(i = 0; i < 10; i++)
00fc3d e010      	LDI  R17,LOW(0)
                 _0x60007:
00fc3e 301a      	CPI  R17,10
00fc3f f420      	BRSH _0x60008
                 ; 0003 002F         SPI_transfer(0xFF);
00fc40 efaf      	LDI  R26,LOW(255)
00fc41 dfed      	RCALL _SPI_transfer
00fc42 5f1f      	SUBI R17,-1
00fc43 cffa      	RJMP _0x60007
                 _0x60008:
                 ; 0003 0032 PORTB |= (1 << 0       );
00fc44 9ac0      	SBI  0x18,0
                 ; 0003 0033     SPI_transfer(0xFF);
00fc45 efaf      	LDI  R26,LOW(255)
00fc46 dfe8      	RCALL _SPI_transfer
                 ; 0003 0034 }
00fc47 c084      	RJMP _0x2000007
                 ; .FEND
                 ;
                 ;unsigned char SD_command(unsigned char cmd, unsigned long arg, unsigned char crc)
                 ; 0003 0037 {
                 _SD_command:
                 ; .FSTART _SD_command
                 ; 0003 0038     unsigned char res,count;
                 ; 0003 0039     // transmit command to sd card
                 ; 0003 003A     SPI_transfer(cmd|0x40);
00fc48 93aa      	ST   -Y,R26
00fc49 931a      	ST   -Y,R17
00fc4a 930a      	ST   -Y,R16
                 ;	cmd -> Y+7
                 ;	arg -> Y+3
                 ;	crc -> Y+2
                 ;	res -> R17
                 ;	count -> R16
00fc4b 81ef      	LDD  R30,Y+7
00fc4c 64e0      	ORI  R30,0x40
00fc4d d221      	RCALL SUBOPT_0x1D
                 ; 0003 003B 
                 ; 0003 003C     // transmit argument
                 ; 0003 003D     SPI_transfer((unsigned char)(arg >> 24));
00fc4e e1e8      	LDI  R30,LOW(24)
00fc4f d29c      	RCALL __LSRD12
00fc50 2fae      	MOV  R26,R30
00fc51 dfdd      	RCALL _SPI_transfer
                 ; 0003 003E     SPI_transfer((unsigned char)(arg >> 16));
                +
00fc52 81eb     +LDD R30 , Y + 3
00fc53 81fc     +LDD R31 , Y + 3 + 1
00fc54 816d     +LDD R22 , Y + 3 + 2
00fc55 817e     +LDD R23 , Y + 3 + 3
                 	__GETD1S 3
00fc56 d2b1      	RCALL __LSRD16
00fc57 d217      	RCALL SUBOPT_0x1D
                 ; 0003 003F     SPI_transfer((unsigned char)(arg >> 8));
00fc58 e0e8      	LDI  R30,LOW(8)
00fc59 d292      	RCALL __LSRD12
00fc5a 2fae      	MOV  R26,R30
00fc5b dfd3      	RCALL _SPI_transfer
                 ; 0003 0040     SPI_transfer((unsigned char)(arg));
00fc5c 81ab      	LDD  R26,Y+3
00fc5d dfd1      	RCALL _SPI_transfer
                 ; 0003 0041 
                 ; 0003 0042     // transmit crc
                 ; 0003 0043     SPI_transfer(crc|0x01);
00fc5e 81ea      	LDD  R30,Y+2
00fc5f 60e1      	ORI  R30,1
00fc60 2fae      	MOV  R26,R30
00fc61 dfcd      	RCALL _SPI_transfer
                 ; 0003 0044 
                 ; 0003 0045     //wait response R1
                 ; 0003 0046     res = SD_readRes1();
00fc62 d005      	RCALL _SD_readRes1
00fc63 2f1e      	MOV  R17,R30
                 ; 0003 0047     /*
                 ; 0003 0048     do {
                 ; 0003 0049      res=SPI_transfer(0xFF);;
                 ; 0003 004A      count++;
                 ; 0003 004B     } while ( ((res&0x80)!=0x00)&&(count<0xff) );
                 ; 0003 004C     */
                 ; 0003 004D     return res;
                 _0x200000B:
00fc64 8119      	LDD  R17,Y+1
00fc65 8108      	LDD  R16,Y+0
00fc66 9628      	ADIW R28,8
00fc67 9508      	RET
                 ; 0003 004E }
                 ; .FEND
                 ;
                 ;
                 ;unsigned char SD_readRes1()
                 ; 0003 0052 {
                 _SD_readRes1:
                 ; .FSTART _SD_readRes1
                 ; 0003 0053     unsigned char res1;
                 ; 0003 0054     unsigned int i = 0;
                 ; 0003 0055 
                 ; 0003 0056     // keep polling until actual data received
                 ; 0003 0057     //while((res1 = SPI_transfer(0xFF)) == 0xFF)
                 ; 0003 0058     while(((res1 = SPI_transfer(0xFF))&0x80) != 0x00)
00fc68 d24d      	RCALL __SAVELOCR4
                 ;	res1 -> R17
                 ;	i -> R18,R19
                +
00fc69 e020     +LDI R18 , LOW ( 0 )
00fc6a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60009:
00fc6b efaf      	LDI  R26,LOW(255)
00fc6c dfc2      	RCALL _SPI_transfer
00fc6d 2f1e      	MOV  R17,R30
00fc6e 78e0      	ANDI R30,LOW(0x80)
00fc6f f031      	BREQ _0x6000B
                 ; 0003 0059     {
                 ; 0003 005A         i++;
                +
00fc70 5f2f     +SUBI R18 , LOW ( - 1 )
00fc71 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0003 005B 
                 ; 0003 005C         // if no data received for (254)8 bytes, break
                 ; 0003 005D         if(i > 0x1FF) break;
                +
00fc72 3020     +CPI R18 , LOW ( 512 )
00fc73 e0e2     +LDI R30 , HIGH ( 512 )
00fc74 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00fc75 f3a8      	BRLO _0x60009
                 ; 0003 005E     }
                 _0x6000B:
                 ; 0003 005F 
                 ; 0003 0060     return res1;
00fc76 2fe1      	MOV  R30,R17
00fc77 d245      	RCALL __LOADLOCR4
                 _0x200000A:
00fc78 9624      	ADIW R28,4
00fc79 9508      	RET
                 ; 0003 0061 }
                 ; .FEND
                 ;
                 ;unsigned char SD_goIdleState()
                 ; 0003 0064 {
                 _SD_goIdleState:
                 ; .FSTART _SD_goIdleState
                 ; 0003 0065     unsigned char res1;
                 ; 0003 0066     // assert chip select
                 ; 0003 0067     SPI_transfer(0xFF);
00fc7a d1fb      	RCALL SUBOPT_0x1E
                 ;	res1 -> R17
                 ; 0003 0068     CS_ENABLE();
                 ; 0003 0069     //SPI_transfer(0xFF);
                 ; 0003 006A 
                 ; 0003 006B     // send CMD0
                 ; 0003 006C     res1 = SD_command(CMD0, CMD0_ARG, CMD0_CRC);
00fc7b e0e0      	LDI  R30,LOW(0)
00fc7c 93ea      	ST   -Y,R30
00fc7d d105      	RCALL SUBOPT_0x2
00fc7e e9a4      	LDI  R26,LOW(148)
00fc7f c048      	RJMP _0x2000006
                 ; 0003 006D 
                 ; 0003 006E     // read response
                 ; 0003 006F     //res1 = SD_readRes1();
                 ; 0003 0070 
                 ; 0003 0071     // deassert chip select
                 ; 0003 0072     SPI_transfer(0xFF);
                 ; 0003 0073     CS_DISABLE();
                 ; 0003 0074     SPI_transfer(0xFF);
                 ; 0003 0075 
                 ; 0003 0076     return res1;
                 ; 0003 0077 }
                 ; .FEND
                 ;
                 ;void SD_readRes7(unsigned char *res)
                 ; 0003 007A {
                 _SD_readRes7:
                 ; .FSTART _SD_readRes7
                 ; 0003 007B     // read response 1 in R7
                 ; 0003 007C     //res[0] = SD_readRes1();
                 ; 0003 007D 
                 ; 0003 007E     // if error reading R1, return
                 ; 0003 007F     if(res[0] > 1) return;
00fc80 93ba      	ST   -Y,R27
00fc81 93aa      	ST   -Y,R26
                 ;	*res -> Y+0
00fc82 81a8      	LD   R26,Y
00fc83 81b9      	LDD  R27,Y+1
00fc84 91ac      	LD   R26,X
00fc85 30a2      	CPI  R26,LOW(0x2)
00fc86 f570      	BRSH _0x2000009
                 ; 0003 0080 
                 ; 0003 0081     // read remaining bytes
                 ; 0003 0082     res[1] = SPI_transfer(0xFF);
00fc87 efaf      	LDI  R26,LOW(255)
00fc88 dfa6      	RCALL _SPI_transfer
                +
00fc89 81a8     +LDD R26 , Y + 0
00fc8a 81b9     +LDD R27 , Y + 0 + 1
00fc8b 9611     +ADIW R26 , 1
00fc8c 93ec     +ST X , R30
                 	__PUTB1SNS 0,1
                 ; 0003 0083     res[2] = SPI_transfer(0xFF);
00fc8d efaf      	LDI  R26,LOW(255)
00fc8e dfa0      	RCALL _SPI_transfer
                +
00fc8f 81a8     +LDD R26 , Y + 0
00fc90 81b9     +LDD R27 , Y + 0 + 1
00fc91 9612     +ADIW R26 , 2
00fc92 93ec     +ST X , R30
                 	__PUTB1SNS 0,2
                 ; 0003 0084     res[3] = SPI_transfer(0xFF);
00fc93 efaf      	LDI  R26,LOW(255)
00fc94 df9a      	RCALL _SPI_transfer
                +
00fc95 81a8     +LDD R26 , Y + 0
00fc96 81b9     +LDD R27 , Y + 0 + 1
00fc97 9613     +ADIW R26 , 3
00fc98 93ec     +ST X , R30
                 	__PUTB1SNS 0,3
                 ; 0003 0085     res[4] = SPI_transfer(0xFF);
00fc99 efaf      	LDI  R26,LOW(255)
00fc9a df94      	RCALL _SPI_transfer
                +
00fc9b 81a8     +LDD R26 , Y + 0
00fc9c 81b9     +LDD R27 , Y + 0 + 1
00fc9d 9614     +ADIW R26 , 4
00fc9e 93ec     +ST X , R30
                 	__PUTB1SNS 0,4
                 ; 0003 0086 }
00fc9f c015      	RJMP _0x2000009
                 ; .FEND
                 ;
                 ;void SD_sendIfCond(unsigned char *res)
                 ; 0003 0089 {
                 _SD_sendIfCond:
                 ; .FSTART _SD_sendIfCond
                 ; 0003 008A     // assert chip select
                 ; 0003 008B     SPI_transfer(0xFF);
00fca0 d1da      	RCALL SUBOPT_0x1F
                 ;	*res -> Y+0
                 ; 0003 008C     CS_ENABLE();
                 ; 0003 008D     //SPI_transfer(0xFF);
                 ; 0003 008E 
                 ; 0003 008F     // send CMD8
                 ; 0003 0090     res[0]=SD_command(CMD8, CMD8_ARG, CMD8_CRC);
00fca1 e0e8      	LDI  R30,LOW(8)
00fca2 93ea      	ST   -Y,R30
                +
00fca3 eaea     +LDI R30 , LOW ( 0x1AA )
00fca4 e0f1     +LDI R31 , HIGH ( 0x1AA )
00fca5 e060     +LDI R22 , BYTE3 ( 0x1AA )
00fca6 e070     +LDI R23 , BYTE4 ( 0x1AA )
                 	__GETD1N 0x1AA
00fca7 d2c9      	RCALL __PUTPARD1
00fca8 e8a6      	LDI  R26,LOW(134)
00fca9 c005      	RJMP _0x2000008
                 ; 0003 0091 
                 ; 0003 0092     // read response
                 ; 0003 0093     SD_readRes7(res);
                 ; 0003 0094 
                 ; 0003 0095     // deassert chip select
                 ; 0003 0096     SPI_transfer(0xFF);
                 ; 0003 0097     CS_DISABLE();
                 ; 0003 0098     SPI_transfer(0xFF);
                 ; 0003 0099 }
                 ; .FEND
                 ;
                 ;/*
                 ;void SD_readRes3_7(unsigned char *res)
                 ;{
                 ;    // read R1
                 ;    //res[0] = SD_readRes1();
                 ;
                 ;    // if error reading R1, return
                 ;    if(res[0] > 1) return;
                 ;
                 ;    // read remaining bytes
                 ;    res[1] = SPI_transfer(0xFF);
                 ;    res[2] = SPI_transfer(0xFF);
                 ;    res[3] = SPI_transfer(0xFF);
                 ;    res[4] = SPI_transfer(0xFF);
                 ;}
                 ;*/
                 ;
                 ;void SD_readOCR(unsigned char *res)
                 ; 0003 00AD {
                 _SD_readOCR:
                 ; .FSTART _SD_readOCR
                 ; 0003 00AE     // assert chip select
                 ; 0003 00AF     SPI_transfer(0xFF);
00fcaa d1d0      	RCALL SUBOPT_0x1F
                 ;	*res -> Y+0
                 ; 0003 00B0     CS_ENABLE();
                 ; 0003 00B1     //SPI_transfer(0xFF);
                 ; 0003 00B2 
                 ; 0003 00B3     // send CMD58
                 ; 0003 00B4     res[0] = SD_command(CMD58, CMD58_ARG, CMD58_CRC);
00fcab e3ea      	LDI  R30,LOW(58)
00fcac 93ea      	ST   -Y,R30
00fcad d0d5      	RCALL SUBOPT_0x2
00fcae e0a0      	LDI  R26,LOW(0)
                 _0x2000008:
00fcaf df98      	RCALL _SD_command
00fcb0 81a8      	LD   R26,Y
00fcb1 81b9      	LDD  R27,Y+1
00fcb2 93ec      	ST   X,R30
                 ; 0003 00B5 
                 ; 0003 00B6     // read response
                 ; 0003 00B7     //SD_readRes3_7(res);
                 ; 0003 00B8     SD_readRes7(res);
00fcb3 dfcc      	RCALL _SD_readRes7
                 ; 0003 00B9 
                 ; 0003 00BA     // deassert chip select
                 ; 0003 00BB     SPI_transfer(0xFF);
00fcb4 d1cc      	RCALL SUBOPT_0x20
                 ; 0003 00BC     CS_DISABLE();
                 ; 0003 00BD     SPI_transfer(0xFF);
                 ; 0003 00BE }
                 _0x2000009:
00fcb5 9622      	ADIW R28,2
00fcb6 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char SD_sendApp()
                 ; 0003 00C1 {
                 _SD_sendApp:
                 ; .FSTART _SD_sendApp
                 ; 0003 00C2     unsigned char res1;
                 ; 0003 00C3     // assert chip select
                 ; 0003 00C4     SPI_transfer(0xFF);
00fcb7 d1be      	RCALL SUBOPT_0x1E
                 ;	res1 -> R17
                 ; 0003 00C5     CS_ENABLE();
                 ; 0003 00C6     //SPI_transfer(0xFF);
                 ; 0003 00C7 
                 ; 0003 00C8     // send CMD0
                 ; 0003 00C9     res1 = SD_command(CMD55, CMD55_ARG, CMD55_CRC);
00fcb8 e3e7      	LDI  R30,LOW(55)
00fcb9 93ea      	ST   -Y,R30
                +
00fcba e0e0     +LDI R30 , LOW ( 0x0 )
00fcbb e0f0     +LDI R31 , HIGH ( 0x0 )
00fcbc e060     +LDI R22 , BYTE3 ( 0x0 )
00fcbd e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00fcbe c007      	RJMP _0x2000005
                 ; 0003 00CA 
                 ; 0003 00CB     // read response
                 ; 0003 00CC     //res1 = SD_readRes1();
                 ; 0003 00CD 
                 ; 0003 00CE     // deassert chip select
                 ; 0003 00CF     SPI_transfer(0xFF);
                 ; 0003 00D0     CS_DISABLE();
                 ; 0003 00D1     SPI_transfer(0xFF);
                 ; 0003 00D2 
                 ; 0003 00D3     return res1;
                 ; 0003 00D4 }
                 ; .FEND
                 ;
                 ;unsigned char SD_sendOpCond()
                 ; 0003 00D7 {
                 _SD_sendOpCond:
                 ; .FSTART _SD_sendOpCond
                 ; 0003 00D8     unsigned char res1;
                 ; 0003 00D9     // assert chip select
                 ; 0003 00DA     SPI_transfer(0xFF);
00fcbf d1b6      	RCALL SUBOPT_0x1E
                 ;	res1 -> R17
                 ; 0003 00DB     CS_ENABLE();
                 ; 0003 00DC     //SPI_transfer(0xFF);
                 ; 0003 00DD 
                 ; 0003 00DE     // send CMD0
                 ; 0003 00DF     res1 =  SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
00fcc0 e2e9      	LDI  R30,LOW(41)
00fcc1 93ea      	ST   -Y,R30
                +
00fcc2 e0e0     +LDI R30 , LOW ( 0x40000000 )
00fcc3 e0f0     +LDI R31 , HIGH ( 0x40000000 )
00fcc4 e060     +LDI R22 , BYTE3 ( 0x40000000 )
00fcc5 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
                 _0x2000005:
00fcc6 d2aa      	RCALL __PUTPARD1
00fcc7 e0a0      	LDI  R26,LOW(0)
                 _0x2000006:
00fcc8 df7f      	RCALL _SD_command
00fcc9 2f1e      	MOV  R17,R30
                 ; 0003 00E0 
                 ; 0003 00E1     // read response
                 ; 0003 00E2     //res1 = SD_readRes1();
                 ; 0003 00E3 
                 ; 0003 00E4     // deassert chip select
                 ; 0003 00E5     SPI_transfer(0xFF);
00fcca d1b6      	RCALL SUBOPT_0x20
                 ; 0003 00E6     CS_DISABLE();
                 ; 0003 00E7     SPI_transfer(0xFF);
                 ; 0003 00E8 
                 ; 0003 00E9     return res1;
00fccb 2fe1      	MOV  R30,R17
                 _0x2000007:
00fccc 9119      	LD   R17,Y+
00fccd 9508      	RET
                 ; 0003 00EA }
                 ; .FEND
                 ;
                 ;unsigned char SD_init()
                 ; 0003 00ED {
                 _SD_init:
                 ; .FSTART _SD_init
                 ; 0003 00EE     unsigned char res[5], cmdAttempts = 0;
                 ; 0003 00EF 
                 ; 0003 00F0     SD_powerUpSeq();
00fcce 9725      	SBIW R28,5
00fccf 931a      	ST   -Y,R17
                 ;	res -> Y+1
                 ;	cmdAttempts -> R17
00fcd0 e010      	LDI  R17,0
00fcd1 df65      	RCALL _SD_powerUpSeq
                 ; 0003 00F1 
                 ; 0003 00F2     // command card to idle
                 ; 0003 00F3     while((res[0] = SD_goIdleState()) != 0x01)
                 _0x6000E:
00fcd2 dfa7      	RCALL _SD_goIdleState
00fcd3 83e9      	STD  Y+1,R30
00fcd4 30e1      	CPI  R30,LOW(0x1)
00fcd5 f031      	BREQ _0x60010
                 ; 0003 00F4     {
                 ; 0003 00F5         cmdAttempts++;
00fcd6 5f1f      	SUBI R17,-1
                 ; 0003 00F6         if(cmdAttempts > 100) return SD_ERROR;
00fcd7 3615      	CPI  R17,101
00fcd8 f010      	BRLO _0x60011
00fcd9 e0e1      	LDI  R30,LOW(1)
00fcda c02d      	RJMP _0x2000003
                 ; 0003 00F7     }
                 _0x60011:
00fcdb cff6      	RJMP _0x6000E
                 _0x60010:
                 ; 0003 00F8 
                 ; 0003 00F9     // send interface conditions
                 ; 0003 00FA     SD_sendIfCond(res);
00fcdc 01de      	MOVW R26,R28
00fcdd 9611      	ADIW R26,1
00fcde dfc1      	RCALL _SD_sendIfCond
                 ; 0003 00FB     if(res[0] != 0x01)
00fcdf 81a9      	LDD  R26,Y+1
00fce0 30a1      	CPI  R26,LOW(0x1)
00fce1 f011      	BREQ _0x60012
                 ; 0003 00FC     {
                 ; 0003 00FD         return SD_ERROR;
00fce2 e0e1      	LDI  R30,LOW(1)
00fce3 c024      	RJMP _0x2000003
                 ; 0003 00FE     }
                 ; 0003 00FF 
                 ; 0003 0100     // check echo pattern
                 ; 0003 0101     if(res[4] != 0xAA)
                 _0x60012:
00fce4 81ad      	LDD  R26,Y+5
00fce5 3aaa      	CPI  R26,LOW(0xAA)
00fce6 f011      	BREQ _0x60013
                 ; 0003 0102     {
                 ; 0003 0103         return SD_ERROR;
00fce7 e0e1      	LDI  R30,LOW(1)
00fce8 c01f      	RJMP _0x2000003
                 ; 0003 0104     }
                 ; 0003 0105 
                 ; 0003 0106     // attempt to initialize card
                 ; 0003 0107     cmdAttempts = 0;
                 _0x60013:
00fce9 e010      	LDI  R17,LOW(0)
                 ; 0003 0108     do
                 _0x60015:
                 ; 0003 0109     {
                 ; 0003 010A         if(cmdAttempts > 100) return SD_ERROR;
00fcea 3615      	CPI  R17,101
00fceb f010      	BRLO _0x60017
00fcec e0e1      	LDI  R30,LOW(1)
00fced c01a      	RJMP _0x2000003
                 ; 0003 010B 
                 ; 0003 010C         // send app cmd
                 ; 0003 010D         res[0] = SD_sendApp();
                 _0x60017:
00fcee dfc8      	RCALL _SD_sendApp
00fcef 83e9      	STD  Y+1,R30
                 ; 0003 010E 
                 ; 0003 010F         // if no error in response
                 ; 0003 0110         if(res[0] < 2)
00fcf0 81a9      	LDD  R26,Y+1
00fcf1 30a2      	CPI  R26,LOW(0x2)
00fcf2 f410      	BRSH _0x60018
                 ; 0003 0111         {
                 ; 0003 0112             res[0] = SD_sendOpCond();
00fcf3 dfcb      	RCALL _SD_sendOpCond
00fcf4 83e9      	STD  Y+1,R30
                 ; 0003 0113         }
                 ; 0003 0114 
                 ; 0003 0115         // wait
                 ; 0003 0116         if(res[0] != SD_READY)
                 _0x60018:
00fcf5 81e9      	LDD  R30,Y+1
00fcf6 30e0      	CPI  R30,0
00fcf7 f019      	BREQ _0x60019
                 ; 0003 0117             delay_ms(10);
00fcf8 e0aa      	LDI  R26,LOW(10)
00fcf9 e0b0      	LDI  R27,0
00fcfa d289      	RCALL _delay_ms
                 ; 0003 0118 
                 ; 0003 0119         cmdAttempts++;
                 _0x60019:
00fcfb 5f1f      	SUBI R17,-1
                 ; 0003 011A     }
                 ; 0003 011B     while(res[0] != SD_READY);
00fcfc 81e9      	LDD  R30,Y+1
00fcfd 30e0      	CPI  R30,0
00fcfe f759      	BRNE _0x60015
                 ; 0003 011C 
                 ; 0003 011D     // read OCR
                 ; 0003 011E     SD_readOCR(res);
00fcff 01de      	MOVW R26,R28
00fd00 9611      	ADIW R26,1
00fd01 dfa8      	RCALL _SD_readOCR
                 ; 0003 011F 
                 ; 0003 0120     // check card is ready
                 ; 0003 0121     if(!(res[1] & 0x80)) return SD_ERROR;
00fd02 81ea      	LDD  R30,Y+2
00fd03 78e0      	ANDI R30,LOW(0x80)
00fd04 f411      	BRNE _0x6001A
00fd05 e0e1      	LDI  R30,LOW(1)
00fd06 c001      	RJMP _0x2000003
                 ; 0003 0122 
                 ; 0003 0123     return SD_SUCCESS;
                 _0x6001A:
00fd07 e0e0      	LDI  R30,LOW(0)
                 _0x2000003:
00fd08 8118      	LDD  R17,Y+0
                 _0x2000004:
00fd09 9626      	ADIW R28,6
00fd0a 9508      	RET
                 ; 0003 0124 }
                 ; .FEND
                 ;
                 ;#define CMD17                   17
                 ;#define CMD17_CRC               0x00
                 ;#define SD_MAX_READ_ATTEMPTS    1563
                 ;
                 ;/*******************************************************************************
                 ; Read single 512 byte block
                 ; token = 0xFE - Successful read
                 ; token = 0x0X - Data error
                 ; token = 0xFF - Timeout
                 ;*******************************************************************************/
                 ;unsigned char SD_readSingleBlock(unsigned long addr, unsigned char *buf, unsigned char *token)
                 ; 0003 0131 {
                 _SD_readSingleBlock:
                 ; .FSTART _SD_readSingleBlock
                 ; 0003 0132     unsigned char res1, read;
                 ; 0003 0133     unsigned int i, readAttempts;
                 ; 0003 0134     addr*=512UL;
00fd0b d17a      	RCALL SUBOPT_0x21
                 ;	addr -> Y+10
                 ;	*buf -> Y+8
                 ;	*token -> Y+6
                 ;	res1 -> R17
                 ;	read -> R16
                 ;	i -> R18,R19
                 ;	readAttempts -> R20,R21
                 ; 0003 0135     // set token to none
                 ; 0003 0136     *token = 0xFF;
                 ; 0003 0137 
                 ; 0003 0138     // assert chip select
                 ; 0003 0139     SPI_transfer(0xFF);
                 ; 0003 013A     CS_ENABLE();
                 ; 0003 013B     //SPI_transfer(0xFF);
                 ; 0003 013C 
                 ; 0003 013D     // send CMD17
                 ; 0003 013E     res1 = SD_command(CMD17, addr, CMD17_CRC);
00fd0c e1e1      	LDI  R30,LOW(17)
00fd0d d190      	RCALL SUBOPT_0x22
                 ; 0003 013F 
                 ; 0003 0140     // read R1
                 ; 0003 0141     //res1 = SD_readRes1();
                 ; 0003 0142 
                 ; 0003 0143     // if response received from card
                 ; 0003 0144     if(res1 != 0xFF)
00fd0e 3f1f      	CPI  R17,255
00fd0f f151      	BREQ _0x6001B
                 ; 0003 0145     {
                 ; 0003 0146         // wait for a response token (timeout = 100ms)
                 ; 0003 0147         readAttempts = 0;
                +
00fd10 e040     +LDI R20 , LOW ( 0 )
00fd11 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 0148         while(++readAttempts != SD_MAX_READ_ATTEMPTS)
                 _0x6001C:
00fd12 01fa      	MOVW R30,R20
00fd13 9631      	ADIW R30,1
00fd14 01af      	MOVW R20,R30
00fd15 31eb      	CPI  R30,LOW(0x61B)
00fd16 e0a6      	LDI  R26,HIGH(0x61B)
00fd17 07fa      	CPC  R31,R26
00fd18 f011      	BREQ _0x6001E
                 ; 0003 0149             if((read = SPI_transfer(0xFF)) != 0xFF) break;
00fd19 d18e      	RCALL SUBOPT_0x23
00fd1a f3b9      	BREQ _0x6001C
                 ; 0003 014A 
                 ; 0003 014B         // if response token is 0xFE
                 ; 0003 014C         if(read == 0xFE)
                 _0x6001E:
00fd1b 3f0e      	CPI  R16,254
00fd1c f4d1      	BRNE _0x60020
                 ; 0003 014D         {
                 ; 0003 014E             // read 512 byte block
                 ; 0003 014F             for(i = 0; i < 512; i++) *buf++ = SPI_transfer(0xFF);
                +
00fd1d e020     +LDI R18 , LOW ( 0 )
00fd1e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60022:
                +
00fd1f 3020     +CPI R18 , LOW ( 512 )
00fd20 e0e2     +LDI R30 , HIGH ( 512 )
00fd21 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00fd22 f480      	BRSH _0x60023
00fd23 85e8      	LDD  R30,Y+8
00fd24 85f9      	LDD  R31,Y+8+1
00fd25 9631      	ADIW R30,1
00fd26 87e8      	STD  Y+8,R30
00fd27 87f9      	STD  Y+8+1,R31
00fd28 9731      	SBIW R30,1
00fd29 93ff      	PUSH R31
00fd2a 93ef      	PUSH R30
00fd2b efaf      	LDI  R26,LOW(255)
00fd2c df02      	RCALL _SPI_transfer
00fd2d 91af      	POP  R26
00fd2e 91bf      	POP  R27
00fd2f 93ec      	ST   X,R30
                +
00fd30 5f2f     +SUBI R18 , LOW ( - 1 )
00fd31 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00fd32 cfec      	RJMP _0x60022
                 _0x60023:
                 ; 0003 0152 SPI_transfer(0xFF);
00fd33 efaf      	LDI  R26,LOW(255)
00fd34 defa      	RCALL _SPI_transfer
                 ; 0003 0153             SPI_transfer(0xFF);
00fd35 efaf      	LDI  R26,LOW(255)
00fd36 def8      	RCALL _SPI_transfer
                 ; 0003 0154         }
                 ; 0003 0155 
                 ; 0003 0156         // set token to card response
                 ; 0003 0157         *token = read;
                 _0x60020:
00fd37 81ae      	LDD  R26,Y+6
00fd38 81bf      	LDD  R27,Y+6+1
00fd39 930c      	ST   X,R16
                 ; 0003 0158     }
                 ; 0003 0159 
                 ; 0003 015A     // deassert chip select
                 ; 0003 015B     SPI_transfer(0xFF);
                 _0x6001B:
00fd3a d146      	RCALL SUBOPT_0x20
                 ; 0003 015C     CS_DISABLE();
                 ; 0003 015D     SPI_transfer(0xFF);
                 ; 0003 015E     if(read==0xFE)
00fd3b 3f0e      	CPI  R16,254
00fd3c f1d9      	BREQ _0x2000002
                 ; 0003 015F         return res1;
                 ; 0003 0160     else
                 ; 0003 0161         return SD_ERROR;
00fd3d e0e1      	LDI  R30,LOW(1)
00fd3e c03a      	RJMP _0x2000001
                 ; 0003 0162 }
                 ; .FEND
                 ;
                 ;#define SD_BLOCK_LEN            512
                 ;#define SD_START_TOKEN          0xFE
                 ;#define CMD24_CRC           0x00
                 ;#define CMD24                   24
                 ;#define CMD24_ARG               0x00
                 ;#define SD_MAX_WRITE_ATTEMPTS   3907
                 ;/*******************************************************************************
                 ; Write single 512 byte block
                 ; token = 0x00 - busy timeout
                 ; token = 0x05 - data accepted
                 ; token = 0xFF - response timeout
                 ;*******************************************************************************/
                 ;
                 ;unsigned char SD_writeSingleBlock(unsigned long addr, unsigned char *buf, unsigned char *token)
                 ; 0003 0172 {
                 _SD_writeSingleBlock:
                 ; .FSTART _SD_writeSingleBlock
                 ; 0003 0173     unsigned char res1, read;
                 ; 0003 0174     unsigned int i, readAttempts;
                 ; 0003 0175     addr*=512UL;
00fd3f d146      	RCALL SUBOPT_0x21
                 ;	addr -> Y+10
                 ;	*buf -> Y+8
                 ;	*token -> Y+6
                 ;	res1 -> R17
                 ;	read -> R16
                 ;	i -> R18,R19
                 ;	readAttempts -> R20,R21
                 ; 0003 0176     // set token to none
                 ; 0003 0177     *token = 0xFF;
                 ; 0003 0178 
                 ; 0003 0179     // assert chip select
                 ; 0003 017A     SPI_transfer(0xFF);
                 ; 0003 017B     CS_ENABLE();
                 ; 0003 017C     SPI_transfer(0xFF);
00fd40 efaf      	LDI  R26,LOW(255)
00fd41 deed      	RCALL _SPI_transfer
                 ; 0003 017D 
                 ; 0003 017E     // send CMD24
                 ; 0003 017F     res1=SD_command(CMD24, addr, CMD24_CRC);
00fd42 e1e8      	LDI  R30,LOW(24)
00fd43 d15a      	RCALL SUBOPT_0x22
                 ; 0003 0180 
                 ; 0003 0181     // read response
                 ; 0003 0182     //res1 = SD_readRes1();
                 ; 0003 0183 
                 ; 0003 0184     // if no error
                 ; 0003 0185     if(res1 == SD_READY)
00fd44 3010      	CPI  R17,0
00fd45 f589      	BRNE _0x60026
                 ; 0003 0186     {
                 ; 0003 0187         // send start token
                 ; 0003 0188         SPI_transfer(SD_START_TOKEN);
00fd46 efae      	LDI  R26,LOW(254)
00fd47 dee7      	RCALL _SPI_transfer
                 ; 0003 0189 
                 ; 0003 018A         // write buffer to card
                 ; 0003 018B         for(i = 0; i < SD_BLOCK_LEN; i++) SPI_transfer(buf[i]);
                +
00fd48 e020     +LDI R18 , LOW ( 0 )
00fd49 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60028:
                +
00fd4a 3020     +CPI R18 , LOW ( 512 )
00fd4b e0e2     +LDI R30 , HIGH ( 512 )
00fd4c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00fd4d f438      	BRSH _0x60029
00fd4e 01f9      	MOVW R30,R18
00fd4f d03e      	RCALL SUBOPT_0x4
00fd50 91ac      	LD   R26,X
00fd51 dedd      	RCALL _SPI_transfer
                +
00fd52 5f2f     +SUBI R18 , LOW ( - 1 )
00fd53 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00fd54 cff5      	RJMP _0x60028
                 _0x60029:
                 ; 0003 018E readAttempts = 0;
                +
00fd55 e040     +LDI R20 , LOW ( 0 )
00fd56 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 018F         while(++readAttempts != SD_MAX_WRITE_ATTEMPTS)
                 _0x6002A:
00fd57 d155      	RCALL SUBOPT_0x24
00fd58 f041      	BREQ _0x6002C
                 ; 0003 0190             if((read = SPI_transfer(0xFF)) != 0xFF) { *token = 0xFF; break; }
00fd59 d14e      	RCALL SUBOPT_0x23
00fd5a f029      	BREQ _0x6002D
00fd5b 81ae      	LDD  R26,Y+6
00fd5c 81bf      	LDD  R27,Y+6+1
00fd5d efef      	LDI  R30,LOW(255)
00fd5e 93ec      	ST   X,R30
00fd5f c001      	RJMP _0x6002C
                 ; 0003 0191 
                 ; 0003 0192         // if data accepted
                 ; 0003 0193         if((read & 0x1F) == 0x05)
                 _0x6002D:
00fd60 cff6      	RJMP _0x6002A
                 _0x6002C:
00fd61 2fe0      	MOV  R30,R16
00fd62 71ef      	ANDI R30,LOW(0x1F)
00fd63 30e5      	CPI  R30,LOW(0x5)
00fd64 f491      	BRNE _0x6002E
                 ; 0003 0194         {
                 ; 0003 0195             // set token to data accepted
                 ; 0003 0196             *token = 0x05;
00fd65 81ae      	LDD  R26,Y+6
00fd66 81bf      	LDD  R27,Y+6+1
00fd67 e0e5      	LDI  R30,LOW(5)
00fd68 93ec      	ST   X,R30
                 ; 0003 0197 
                 ; 0003 0198             // wait for write to finish (timeout = 250ms)
                 ; 0003 0199             readAttempts = 0;
                +
00fd69 e040     +LDI R20 , LOW ( 0 )
00fd6a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 019A             while(SPI_transfer(0xFF) == 0x00){
                 _0x6002F:
00fd6b efaf      	LDI  R26,LOW(255)
00fd6c dec2      	RCALL _SPI_transfer
00fd6d 30e0      	CPI  R30,0
00fd6e f441      	BRNE _0x60031
                 ; 0003 019B                 if(++readAttempts == SD_MAX_WRITE_ATTEMPTS){
00fd6f d13d      	RCALL SUBOPT_0x24
00fd70 f429      	BRNE _0x60032
                 ; 0003 019C                     *token = 0x00;
00fd71 81ae      	LDD  R26,Y+6
00fd72 81bf      	LDD  R27,Y+6+1
00fd73 e0e0      	LDI  R30,LOW(0)
00fd74 93ec      	ST   X,R30
                 ; 0003 019D                     break;
00fd75 c001      	RJMP _0x60031
                 ; 0003 019E                 }
                 ; 0003 019F             }
                 _0x60032:
00fd76 cff4      	RJMP _0x6002F
                 _0x60031:
                 ; 0003 01A0         }
                 ; 0003 01A1     }
                 _0x6002E:
                 ; 0003 01A2 
                 ; 0003 01A3     // deassert chip select
                 ; 0003 01A4     SPI_transfer(0xFF);
                 _0x60026:
00fd77 d109      	RCALL SUBOPT_0x20
                 ; 0003 01A5     CS_DISABLE();
                 ; 0003 01A6     SPI_transfer(0xFF);
                 ; 0003 01A7 
                 ; 0003 01A8     return res1;
                 _0x2000002:
00fd78 2fe1      	MOV  R30,R17
                 _0x2000001:
00fd79 d141      	RCALL __LOADLOCR6
00fd7a 962e      	ADIW R28,14
00fd7b 9508      	RET
                 ; 0003 01A9 }
                 ; .FEND
                 
                 	.DSEG
                 _result:
00091b           	.BYTE 0x5
                 _sdBuf:
000920           	.BYTE 0x200
                 _testBuf:
000b20           	.BYTE 0x100
                 _appStartAdr:
000c20           	.BYTE 0x4
                 _adr:
000c24           	.BYTE 0x4
                 _SectorsPerFat:
000c28           	.BYTE 0x4
                 _fat_begin_lba:
000c2c           	.BYTE 0x4
                 _cluster_begin_lba:
000c30           	.BYTE 0x4
                 _fat_file_adr:
000c34           	.BYTE 0x4
                 _fat_file_next_adr:
000c38           	.BYTE 0x4
                 _filesize:
000c3c           	.BYTE 0x4
                 _readbytes:
000c40           	.BYTE 0x4
                 _bytesChecksum:
000c44           	.BYTE 0x2
                 _checksumCnt:
000c46           	.BYTE 0x2
                 _Number_of_Reserved_Sectors:
000c48           	.BYTE 0x2
                 _app_pointer:
000c4a           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00fd7c d1e5      	RCALL __GETD1S0
00fd7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
00fd7e 81ae     +LDD R26 , Y + 6
00fd7f 81bf     +LDD R27 , Y + 6 + 1
00fd80 8588     +LDD R24 , Y + 6 + 2
00fd81 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00fd82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
                +
00fd83 e0e0     +LDI R30 , LOW ( 0x0 )
00fd84 e0f0     +LDI R31 , HIGH ( 0x0 )
00fd85 e060     +LDI R22 , BYTE3 ( 0x0 )
00fd86 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00fd87 d1e9      	RCALL __PUTPARD1
00fd88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
                +
00fd89 e0a0     +LDI R26 , LOW ( 0x1EF00 )
00fd8a eebf     +LDI R27 , HIGH ( 0x1EF00 )
00fd8b e081     +LDI R24 , BYTE3 ( 0x1EF00 )
00fd8c e090     +LDI R25 , BYTE4 ( 0x1EF00 )
                 	__GETD2N 0x1EF00
00fd8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00fd8e 85a8      	LDD  R26,Y+8
00fd8f 85b9      	LDD  R27,Y+8+1
00fd90 0fae      	ADD  R26,R30
00fd91 1fbf      	ADC  R27,R31
00fd92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00fd93 d1e2      	RCALL __PUTPARD2
00fd94 d1d2      	RCALL __GETD2S0
00fd95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00fd96 d1d0      	RCALL __GETD2S0
00fd97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x7:
00fd98 e2e0      	LDI  R30,LOW(_sdBuf)
00fd99 e0f9      	LDI  R31,HIGH(_sdBuf)
00fd9a 93fa      	ST   -Y,R31
00fd9b 93ea      	ST   -Y,R30
00fd9c e0a9      	LDI  R26,LOW(9)
00fd9d e0b0      	LDI  R27,HIGH(9)
00fd9e df6c      	RCALL _SD_readSingleBlock
00fd9f 93e0 091b 	STS  _result,R30
00fda1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00fda2 93fa      	ST   -Y,R31
00fda3 93ea      	ST   -Y,R30
00fda4 e0a4      	LDI  R26,LOW(4)
00fda5 ce5e      	RJMP _buf2num
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
00fda6 93e0 0c24 	STS  _adr,R30
00fda8 93f0 0c25 	STS  _adr+1,R31
00fdaa 9360 0c26 	STS  _adr+2,R22
00fdac 9370 0c27 	STS  _adr+3,R23
00fdae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xA:
00fdaf 91e0 0c24 	LDS  R30,_adr
00fdb1 91f0 0c25 	LDS  R31,_adr+1
00fdb3 9160 0c26 	LDS  R22,_adr+2
00fdb5 9170 0c27 	LDS  R23,_adr+3
00fdb7 d1b9      	RCALL __PUTPARD1
00fdb8 cfdf      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
00fdb9 2de8      	MOV  R30,R8
00fdba 01d8      	MOVW R26,R16
00fdbb e0f0      	LDI  R31,0
00fdbc 17ae      	CP   R26,R30
00fdbd 07bf      	CPC  R27,R31
00fdbe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xC:
00fdbf 93fa      	ST   -Y,R31
00fdc0 93ea      	ST   -Y,R30
                +
00fdc1 e2a0     +LDI R26 , 32
00fdc2 9fa2     +MUL R26 , R18
00fdc3 01f0     +MOVW R30 , R0
00fdc4 9fa3     +MUL R26 , R19
00fdc5 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,32
00fdc6 5ee0      	SUBI R30,LOW(-_sdBuf)
00fdc7 4ff6      	SBCI R31,HIGH(-_sdBuf)
00fdc8 01df      	MOVW R26,R30
00fdc9 de24      	RCALL _compbuf
                +
00fdca 93e0 091c+STS _result + ( 1 ) , R30
                 	__PUTB1MN _result,1
00fdcc 30e0      	CPI  R30,0
00fdcd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0xD:
                +
00fdce e2a0     +LDI R26 , 32
00fdcf 9fa2     +MUL R26 , R18
00fdd0 01f0     +MOVW R30 , R0
00fdd1 9fa3     +MUL R26 , R19
00fdd2 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,32
00fdd3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
                +
00fdd4 5cec     +SUBI R30 , LOW ( - _sdBuf - ( 20 ) )
00fdd5 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 20 ) )
                 	__ADDW1MN _sdBuf,20
00fdd6 81e0      	LD   R30,Z
00fdd7 e0f0      	LDI  R31,0
00fdd8 d139      	RCALL __CWD1
00fdd9 d133      	RCALL __LSLD16
00fdda 93e0 0c34 	STS  _fat_file_adr,R30
00fddc 93f0 0c35 	STS  _fat_file_adr+1,R31
00fdde 9360 0c36 	STS  _fat_file_adr+2,R22
00fde0 9370 0c37 	STS  _fat_file_adr+3,R23
00fde2 cfeb      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0xF:
                +
00fde3 5ce6     +SUBI R30 , LOW ( - _sdBuf - ( 26 ) )
00fde4 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 26 ) )
                 	__ADDW1MN _sdBuf,26
00fde5 81e0      	LD   R30,Z
00fde6 e0f0      	LDI  R31,0
00fde7 d12a      	RCALL __CWD1
00fde8 91a0 0c34 	LDS  R26,_fat_file_adr
00fdea 91b0 0c35 	LDS  R27,_fat_file_adr+1
00fdec 9180 0c36 	LDS  R24,_fat_file_adr+2
00fdee 9190 0c37 	LDS  R25,_fat_file_adr+3
00fdf0 d0db      	RCALL __ORD12
00fdf1 93e0 0c34 	STS  _fat_file_adr,R30
00fdf3 93f0 0c35 	STS  _fat_file_adr+1,R31
00fdf5 9360 0c36 	STS  _fat_file_adr+2,R22
00fdf7 9370 0c37 	STS  _fat_file_adr+3,R23
00fdf9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x10:
00fdfa e2a4      	LDI  R26,LOW(_adr)
00fdfb e0bc      	LDI  R27,HIGH(_adr)
00fdfc d15b      	RCALL __GETD1P_INC
                +
00fdfd 5fef     +SUBI R30 , LOW ( - 1 )
00fdfe 4fff     +SBCI R31 , HIGH ( - 1 )
00fdff 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00fe00 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00fe01 d15b      	RCALL __PUTDP1_DEC
00fe02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x11:
00fe03 91e0 0c34 	LDS  R30,_fat_file_adr
00fe05 91f0 0c35 	LDS  R31,_fat_file_adr+1
00fe07 9160 0c36 	LDS  R22,_fat_file_adr+2
00fe09 9170 0c37 	LDS  R23,_fat_file_adr+3
                +
00fe0b 50e2     +SUBI R30 , LOW ( 2 )
00fe0c 40f0     +SBCI R31 , HIGH ( 2 )
00fe0d 4060     +SBCI R22 , BYTE3 ( 2 )
00fe0e 4070     +SBCI R23 , BYTE4 ( 2 )
                 	__SUBD1N 2
00fe0f 01df      	MOVW R26,R30
00fe10 01cb      	MOVW R24,R22
00fe11 2de8      	MOV  R30,R8
00fe12 e0f0      	LDI  R31,0
00fe13 d0fe      	RCALL __CWD1
00fe14 d10a      	RCALL __MULD12U
00fe15 91a0 0c30 	LDS  R26,_cluster_begin_lba
00fe17 91b0 0c31 	LDS  R27,_cluster_begin_lba+1
00fe19 9180 0c32 	LDS  R24,_cluster_begin_lba+2
00fe1b 9190 0c33 	LDS  R25,_cluster_begin_lba+3
00fe1d d0a4      	RCALL __ADDD12
00fe1e df87      	RCALL SUBOPT_0x9
                +
00fe1f e000     +LDI R16 , LOW ( 0 )
00fe20 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00fe21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
                +
00fe22 3faf     +CPI R26 , LOW ( 0xFFFFFFF )
00fe23 efef     +LDI R30 , HIGH ( 0xFFFFFFF )
00fe24 07be     +CPC R27 , R30
00fe25 efef     +LDI R30 , BYTE3 ( 0xFFFFFFF )
00fe26 078e     +CPC R24 , R30
00fe27 e0ef     +LDI R30 , BYTE4 ( 0xFFFFFFF )
00fe28 079e     +CPC R25 , R30
                 	__CPD2N 0xFFFFFFF
00fe29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x13:
00fe2a 91a0 0c40 	LDS  R26,_readbytes
00fe2c 91b0 0c41 	LDS  R27,_readbytes+1
00fe2e 9180 0c42 	LDS  R24,_readbytes+2
00fe30 9190 0c43 	LDS  R25,_readbytes+3
00fe32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
00fe33 e2a0      	LDI  R26,LOW(_sdBuf)
00fe34 e0b9      	LDI  R27,HIGH(_sdBuf)
00fe35 0fa4      	ADD  R26,R20
00fe36 1fb5      	ADC  R27,R21
00fe37 91ec      	LD   R30,X
00fe38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00fe39 1fee      	ROL  R30
00fe3a e0e0      	LDI  R30,0
00fe3b 1fee      	ROL  R30
00fe3c 29e0      	OR   R30,R0
00fe3d 01db      	MOVW R26,R22
00fe3e 93ec      	ST   X,R30
00fe3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
00fe40 e2a0      	LDI  R26,LOW(_sdBuf)
00fe41 e0b9      	LDI  R27,HIGH(_sdBuf)
00fe42 0fa2      	ADD  R26,R18
00fe43 1fb3      	ADC  R27,R19
00fe44 91ec      	LD   R30,X
00fe45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
00fe46 91e0 0c20 	LDS  R30,_appStartAdr
00fe48 91f0 0c21 	LDS  R31,_appStartAdr+1
00fe4a 9160 0c22 	LDS  R22,_appStartAdr+2
00fe4c 9170 0c23 	LDS  R23,_appStartAdr+3
00fe4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x18:
00fe4f 93e0 0c20 	STS  _appStartAdr,R30
00fe51 93f0 0c21 	STS  _appStartAdr+1,R31
00fe53 9360 0c22 	STS  _appStartAdr+2,R22
00fe55 9370 0c23 	STS  _appStartAdr+3,R23
00fe57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
00fe58 91a0 0c20 	LDS  R26,_appStartAdr
00fe5a 91b0 0c21 	LDS  R27,_appStartAdr+1
00fe5c 9180 0c22 	LDS  R24,_appStartAdr+2
00fe5e 9190 0c23 	LDS  R25,_appStartAdr+3
00fe60 d06b      	RCALL __ORD12
00fe61 cfed      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
00fe62 93e0 0c44 	STS  _bytesChecksum,R30
00fe64 93f0 0c45 	STS  _bytesChecksum+1,R31
00fe66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1B:
                +
00fe67 e0e0     +LDI R30 , LOW ( 0x1EF00 )
00fe68 eeff     +LDI R31 , HIGH ( 0x1EF00 )
00fe69 e061     +LDI R22 , BYTE3 ( 0x1EF00 )
00fe6a e070     +LDI R23 , BYTE4 ( 0x1EF00 )
                 	__GETD1N 0x1EF00
00fe6b d105      	RCALL __PUTPARD1
00fe6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
00fe6d d0fe      	RCALL __PUTD1S0
00fe6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
00fe6f 2fae      	MOV  R26,R30
00fe70 ddbe      	RCALL _SPI_transfer
                +
00fe71 81ab     +LDD R26 , Y + 3
00fe72 81bc     +LDD R27 , Y + 3 + 1
00fe73 818d     +LDD R24 , Y + 3 + 2
00fe74 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
00fe75 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
00fe76 931a      	ST   -Y,R17
00fe77 efaf      	LDI  R26,LOW(255)
00fe78 ddb6      	RCALL _SPI_transfer
00fe79 98c0      	CBI  0x18,0
00fe7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
00fe7b 93ba      	ST   -Y,R27
00fe7c 93aa      	ST   -Y,R26
00fe7d efaf      	LDI  R26,LOW(255)
00fe7e ddb0      	RCALL _SPI_transfer
00fe7f 98c0      	CBI  0x18,0
00fe80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x20:
00fe81 efaf      	LDI  R26,LOW(255)
00fe82 ddac      	RCALL _SPI_transfer
00fe83 9ac0      	SBI  0x18,0
00fe84 efaf      	LDI  R26,LOW(255)
00fe85 cda9      	RJMP _SPI_transfer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x21:
00fe86 93ba      	ST   -Y,R27
00fe87 93aa      	ST   -Y,R26
00fe88 d02b      	RCALL __SAVELOCR6
                +
00fe89 85ea     +LDD R30 , Y + 10
00fe8a 85fb     +LDD R31 , Y + 10 + 1
00fe8b 856c     +LDD R22 , Y + 10 + 2
00fe8c 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
                +
00fe8d e0a0     +LDI R26 , LOW ( 0x200 )
00fe8e e0b2     +LDI R27 , HIGH ( 0x200 )
00fe8f e080     +LDI R24 , BYTE3 ( 0x200 )
00fe90 e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
00fe91 d08d      	RCALL __MULD12U
                +
00fe92 87ea     +STD Y + 10 , R30
00fe93 87fb     +STD Y + 10 + 1 , R31
00fe94 876c     +STD Y + 10 + 2 , R22
00fe95 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00fe96 81ae      	LDD  R26,Y+6
00fe97 81bf      	LDD  R27,Y+6+1
00fe98 efef      	LDI  R30,LOW(255)
00fe99 93ec      	ST   X,R30
00fe9a efaf      	LDI  R26,LOW(255)
00fe9b dd93      	RCALL _SPI_transfer
00fe9c 98c0      	CBI  0x18,0
00fe9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
00fe9e 93ea      	ST   -Y,R30
                +
00fe9f 85eb     +LDD R30 , Y + 11
00fea0 85fc     +LDD R31 , Y + 11 + 1
00fea1 856d     +LDD R22 , Y + 11 + 2
00fea2 857e     +LDD R23 , Y + 11 + 3
                 	__GETD1S 11
00fea3 d0cd      	RCALL __PUTPARD1
00fea4 e0a0      	LDI  R26,LOW(0)
00fea5 dda2      	RCALL _SD_command
00fea6 2f1e      	MOV  R17,R30
00fea7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
00fea8 efaf      	LDI  R26,LOW(255)
00fea9 dd85      	RCALL _SPI_transfer
00feaa 2f0e      	MOV  R16,R30
00feab 3fef      	CPI  R30,LOW(0xFF)
00feac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
00fead 01fa      	MOVW R30,R20
00feae 9631      	ADIW R30,1
00feaf 01af      	MOVW R20,R30
00feb0 34e3      	CPI  R30,LOW(0xF43)
00feb1 e0af      	LDI  R26,HIGH(0xF43)
00feb2 07fa      	CPC  R31,R26
00feb3 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00feb4 935a      	ST   -Y,R21
                 __SAVELOCR5:
00feb5 934a      	ST   -Y,R20
                 __SAVELOCR4:
00feb6 933a      	ST   -Y,R19
                 __SAVELOCR3:
00feb7 932a      	ST   -Y,R18
                 __SAVELOCR2:
00feb8 931a      	ST   -Y,R17
00feb9 930a      	ST   -Y,R16
00feba 9508      	RET
                 
                 __LOADLOCR6:
00febb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00febc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00febd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00febe 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00febf 8119      	LDD  R17,Y+1
00fec0 8108      	LD   R16,Y
00fec1 9508      	RET
                 
                 __ADDD12:
00fec2 0fea      	ADD  R30,R26
00fec3 1ffb      	ADC  R31,R27
00fec4 1f68      	ADC  R22,R24
00fec5 1f79      	ADC  R23,R25
00fec6 9508      	RET
                 
                 __ADDD21:
00fec7 0fae      	ADD  R26,R30
00fec8 1fbf      	ADC  R27,R31
00fec9 1f86      	ADC  R24,R22
00feca 1f97      	ADC  R25,R23
00fecb 9508      	RET
                 
                 __ORD12:
00fecc 2bea      	OR   R30,R26
00fecd 2bfb      	OR   R31,R27
00fece 2b68      	OR   R22,R24
00fecf 2b79      	OR   R23,R25
00fed0 9508      	RET
                 
                 __ANEGW1:
00fed1 95f1      	NEG  R31
00fed2 95e1      	NEG  R30
00fed3 40f0      	SBCI R31,0
00fed4 9508      	RET
                 
                 __LSLD12:
00fed5 23ee      	TST  R30
00fed6 2e0e      	MOV  R0,R30
00fed7 e0e8      	LDI  R30,8
00fed8 2e1e      	MOV  R1,R30
00fed9 01fd      	MOVW R30,R26
00feda 01bc      	MOVW R22,R24
00fedb f079      	BREQ __LSLD12R
                 __LSLD12S8:
00fedc 1401      	CP   R0,R1
00fedd f038      	BRLO __LSLD12L
00fede 2f76      	MOV  R23,R22
00fedf 2f6f      	MOV  R22,R31
00fee0 2ffe      	MOV  R31,R30
00fee1 e0e0      	LDI  R30,0
00fee2 1801      	SUB  R0,R1
00fee3 f7c1      	BRNE __LSLD12S8
00fee4 9508      	RET
                 __LSLD12L:
00fee5 0fee      	LSL  R30
00fee6 1fff      	ROL  R31
00fee7 1f66      	ROL  R22
00fee8 1f77      	ROL  R23
00fee9 940a      	DEC  R0
00feea f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00feeb 9508      	RET
                 
                 __LSRD12:
00feec 23ee      	TST  R30
00feed 2e0e      	MOV  R0,R30
00feee e0e8      	LDI  R30,8
00feef 2e1e      	MOV  R1,R30
00fef0 01fd      	MOVW R30,R26
00fef1 01bc      	MOVW R22,R24
00fef2 f079      	BREQ __LSRD12R
                 __LSRD12S8:
00fef3 1401      	CP   R0,R1
00fef4 f038      	BRLO __LSRD12L
00fef5 2fef      	MOV  R30,R31
00fef6 2ff6      	MOV  R31,R22
00fef7 2f67      	MOV  R22,R23
00fef8 e070      	LDI  R23,0
00fef9 1801      	SUB  R0,R1
00fefa f7c1      	BRNE __LSRD12S8
00fefb 9508      	RET
                 __LSRD12L:
00fefc 9576      	LSR  R23
00fefd 9567      	ROR  R22
00fefe 95f7      	ROR  R31
00feff 95e7      	ROR  R30
00ff00 940a      	DEC  R0
00ff01 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
00ff02 9508      	RET
                 
                 __LSLD1:
00ff03 0fee      	LSL  R30
00ff04 1fff      	ROL  R31
00ff05 1f66      	ROL  R22
00ff06 1f77      	ROL  R23
00ff07 9508      	RET
                 
                 __LSRD16:
00ff08 2fe6      	MOV  R30,R22
00ff09 2ff7      	MOV  R31,R23
00ff0a e060      	LDI  R22,0
00ff0b e070      	LDI  R23,0
00ff0c 9508      	RET
                 
                 __LSLD16:
00ff0d 2f6e      	MOV  R22,R30
00ff0e 2f7f      	MOV  R23,R31
00ff0f e0e0      	LDI  R30,0
00ff10 e0f0      	LDI  R31,0
00ff11 9508      	RET
                 
                 __CWD1:
00ff12 2f6f      	MOV  R22,R31
00ff13 0f66      	ADD  R22,R22
00ff14 0b66      	SBC  R22,R22
00ff15 2f76      	MOV  R23,R22
00ff16 9508      	RET
                 
                 __MULW12U:
00ff17 9ffa      	MUL  R31,R26
00ff18 2df0      	MOV  R31,R0
00ff19 9feb      	MUL  R30,R27
00ff1a 0df0      	ADD  R31,R0
00ff1b 9fea      	MUL  R30,R26
00ff1c 2de0      	MOV  R30,R0
00ff1d 0df1      	ADD  R31,R1
00ff1e 9508      	RET
                 
                 __MULD12U:
00ff1f 9f7a      	MUL  R23,R26
00ff20 2d70      	MOV  R23,R0
00ff21 9f6b      	MUL  R22,R27
00ff22 0d70      	ADD  R23,R0
00ff23 9ff8      	MUL  R31,R24
00ff24 0d70      	ADD  R23,R0
00ff25 9fe9      	MUL  R30,R25
00ff26 0d70      	ADD  R23,R0
00ff27 9f6a      	MUL  R22,R26
00ff28 2d60      	MOV  R22,R0
00ff29 0d71      	ADD  R23,R1
00ff2a 9ffb      	MUL  R31,R27
00ff2b 0d60      	ADD  R22,R0
00ff2c 1d71      	ADC  R23,R1
00ff2d 9fe8      	MUL  R30,R24
00ff2e 0d60      	ADD  R22,R0
00ff2f 1d71      	ADC  R23,R1
00ff30 2788      	CLR  R24
00ff31 9ffa      	MUL  R31,R26
00ff32 2df0      	MOV  R31,R0
00ff33 0d61      	ADD  R22,R1
00ff34 1f78      	ADC  R23,R24
00ff35 9feb      	MUL  R30,R27
00ff36 0df0      	ADD  R31,R0
00ff37 1d61      	ADC  R22,R1
00ff38 1f78      	ADC  R23,R24
00ff39 9fea      	MUL  R30,R26
00ff3a 2de0      	MOV  R30,R0
00ff3b 0df1      	ADD  R31,R1
00ff3c 1f68      	ADC  R22,R24
00ff3d 1f78      	ADC  R23,R24
00ff3e 9508      	RET
                 
                 __MULB1W2U:
00ff3f 2f6e      	MOV  R22,R30
00ff40 9f6a      	MUL  R22,R26
00ff41 01f0      	MOVW R30,R0
00ff42 9f6b      	MUL  R22,R27
00ff43 0df0      	ADD  R31,R0
00ff44 9508      	RET
                 
                 __MULW12:
00ff45 d004      	RCALL __CHKSIGNW
00ff46 dfd0      	RCALL __MULW12U
00ff47 f40e      	BRTC __MULW121
00ff48 df88      	RCALL __ANEGW1
                 __MULW121:
00ff49 9508      	RET
                 
                 __CHKSIGNW:
00ff4a 94e8      	CLT
00ff4b fff7      	SBRS R31,7
00ff4c c002      	RJMP __CHKSW1
00ff4d df83      	RCALL __ANEGW1
00ff4e 9468      	SET
                 __CHKSW1:
00ff4f ffb7      	SBRS R27,7
00ff50 c006      	RJMP __CHKSW2
00ff51 95b1      	NEG  R27
00ff52 95a1      	NEG  R26
00ff53 40b0      	SBCI R27,0
00ff54 f800      	BLD  R0,0
00ff55 9403      	INC  R0
00ff56 fa00      	BST  R0,0
                 __CHKSW2:
00ff57 9508      	RET
                 
                 __GETD1P_INC:
00ff58 91ed      	LD   R30,X+
00ff59 91fd      	LD   R31,X+
00ff5a 916d      	LD   R22,X+
00ff5b 917d      	LD   R23,X+
00ff5c 9508      	RET
                 
                 __PUTDP1_DEC:
00ff5d 937e      	ST   -X,R23
00ff5e 936e      	ST   -X,R22
00ff5f 93fe      	ST   -X,R31
00ff60 93ee      	ST   -X,R30
00ff61 9508      	RET
                 
                 __GETD1S0:
00ff62 81e8      	LD   R30,Y
00ff63 81f9      	LDD  R31,Y+1
00ff64 816a      	LDD  R22,Y+2
00ff65 817b      	LDD  R23,Y+3
00ff66 9508      	RET
                 
                 __GETD2S0:
00ff67 81a8      	LD   R26,Y
00ff68 81b9      	LDD  R27,Y+1
00ff69 818a      	LDD  R24,Y+2
00ff6a 819b      	LDD  R25,Y+3
00ff6b 9508      	RET
                 
                 __PUTD1S0:
00ff6c 83e8      	ST   Y,R30
00ff6d 83f9      	STD  Y+1,R31
00ff6e 836a      	STD  Y+2,R22
00ff6f 837b      	STD  Y+3,R23
00ff70 9508      	RET
                 
                 __PUTPARD1:
00ff71 937a      	ST   -Y,R23
00ff72 936a      	ST   -Y,R22
00ff73 93fa      	ST   -Y,R31
00ff74 93ea      	ST   -Y,R30
00ff75 9508      	RET
                 
                 __PUTPARD2:
00ff76 939a      	ST   -Y,R25
00ff77 938a      	ST   -Y,R24
00ff78 93ba      	ST   -Y,R27
00ff79 93aa      	ST   -Y,R26
00ff7a 9508      	RET
                 
                 __CPD20:
00ff7b 9710      	SBIW R26,0
00ff7c 4080      	SBCI R24,0
00ff7d 4090      	SBCI R25,0
00ff7e 9508      	RET
                 
                 __CPD21:
00ff7f 17ae      	CP   R26,R30
00ff80 07bf      	CPC  R27,R31
00ff81 0786      	CPC  R24,R22
00ff82 0797      	CPC  R25,R23
00ff83 9508      	RET
                 
                 _delay_ms:
00ff84 9610      	adiw r26,0
00ff85 f039      	breq __delay_ms1
                 __delay_ms0:
00ff86 95a8      	wdr
                +
00ff87 ee88     +LDI R24 , LOW ( 0x3E8 )
00ff88 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00ff89 9701     +SBIW R24 , 1
00ff8a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00ff8b 9711      	sbiw r26,1
00ff8c f7c9      	brne __delay_ms0
                 __delay_ms1:
00ff8d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  49 r1 :  16 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   3 r9 :   0 r10:   0 r11:   4 r12:   5 r13:   2 r14:   0 r15:   0 
r16:  28 r17:  40 r18:  34 r19:  29 r20:  15 r21:  10 r22: 110 r23:  68 
r24:  45 r25:  29 r26: 180 r27:  91 r28:  20 r29:   5 r30: 429 r31: 142 
x  :  37 y  : 190 z  :  16 
Registers used: 25 out of 35 (71.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  26 
adiw  :  21 and   :   0 andi  :  22 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  29 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   0 brne  :  39 brpl  :   0 brsh  :  19 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   1 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  15 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :  33 cpi   :  48 cpse  :   0 dec   :   3 des   :   0 
elpm  :  10 eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :   5 inc   :   2 jmp   :  46 ld    :  26 ldd   : 101 
ldi   : 256 lds   : 106 lpm   :   0 lsl   :   4 lsr   :   1 mov   :  44 
movw  :  44 mul   :  19 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :  11 ori   :   2 out   :  17 pop   :   4 push  :   4 rcall : 218 
ret   :  75 reti  :   0 rjmp  :  62 rol   :   8 ror   :   3 sbc   :   1 
sbci  :  40 sbi   :   6 sbic  :   1 sbis  :   1 sbiw  :  12 sbr   :   0 
sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :  18 st    :  83 std   :  23 sts   :  72 sub   :   2 subi  :  32 
swap  :   0 tst   :   2 wdr   :   1 
Instructions used: 63 out of 117 (53.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x01f000 0x01ff1c   3802     66   3868  131072   3.0%
[.dseg] 0x000100 0x000c4c      0    844    844    4096  20.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
