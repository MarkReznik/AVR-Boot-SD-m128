
AVRASM ver. 2.1.30  F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm Fri Sep 27 21:01:55 2024

F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1100): warning: Register r4 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1101): warning: Register r5 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1102): warning: Register r6 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1103): warning: Register r7 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1104): warning: Register r9 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1105): warning: Register r8 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1106): warning: Register r11 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1107): warning: Register r12 already defined by the .DEF directive
F:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128_v02\AVR-Boot-SD-m128\AVR106 BootSD_m128\Debug\List\Self_programming.asm(1108): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Medium
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_MEDIUM_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __GETBRPF
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETBRPF_INC
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z+
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test=R4
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test_msb=R5
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test=R6
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test_msb=R7
                 	.DEF _token=R9
                 	.DEF _SectorsPerCluster=R8
                 	.DEF _pagesCnt=R11
                 	.DEF _appPages=R12
                 	.DEF _appPages_msb=R13
                 
                 	.CSEG
                 	.ORG 0xF000
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
00f000 940c f063 	JMP  __RESET
00f002 940c f000 	JMP  0xF000
00f004 940c f000 	JMP  0xF000
00f006 940c f000 	JMP  0xF000
00f008 940c f000 	JMP  0xF000
00f00a 940c f000 	JMP  0xF000
00f00c 940c f000 	JMP  0xF000
00f00e 940c f000 	JMP  0xF000
00f010 940c f000 	JMP  0xF000
00f012 940c f000 	JMP  0xF000
00f014 940c f000 	JMP  0xF000
00f016 940c f000 	JMP  0xF000
00f018 940c f000 	JMP  0xF000
00f01a 940c f000 	JMP  0xF000
00f01c 940c f000 	JMP  0xF000
00f01e 940c f000 	JMP  0xF000
00f020 940c f000 	JMP  0xF000
00f022 940c f000 	JMP  0xF000
00f024 940c f000 	JMP  0xF000
00f026 940c f000 	JMP  0xF000
00f028 940c f000 	JMP  0xF000
00f02a 940c f000 	JMP  0xF000
00f02c 940c f000 	JMP  0xF000
00f02e 940c f000 	JMP  0xF000
00f030 940c f000 	JMP  0xF000
00f032 940c f000 	JMP  0xF000
00f034 940c f000 	JMP  0xF000
00f036 940c f000 	JMP  0xF000
00f038 940c f000 	JMP  0xF000
00f03a 940c f000 	JMP  0xF000
00f03c 940c f000 	JMP  0xF000
00f03e 940c f000 	JMP  0xF000
00f040 940c f000 	JMP  0xF000
00f042 940c f000 	JMP  0xF000
00f044 940c f000 	JMP  0xF000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00f046 f9e0
00f047 f9b4      	.DB  0xE0,0xF9,0xB4,0xF9
                 
                 _0x40000:
00f048 0030
00f049 5055
00f04a 4144
00f04b 4554      	.DB  0x30,0x0,0x55,0x50,0x44,0x41,0x54,0x45
00f04c 5b00
00f04d 6573
00f04e 7474
00f04f 6e69      	.DB  0x0,0x5B,0x73,0x65,0x74,0x74,0x69,0x6E
00f050 7367
00f051 005d      	.DB  0x67,0x73,0x5D,0x0
                 
                 __GLOBAL_INI_TBL:
00f052 0004      	.DW  0x04
00f053 0004      	.DW  0x04
00f054 e08c 0001 	.DD  __REG_VARS*2
                 
00f056 0002      	.DW  0x02
00f057 0900      	.DW  _0x40003
00f058 e090 0001 	.DD  _0x40000*2
                 
00f05a 0007      	.DW  0x07
00f05b 0902      	.DW  _0x40003+2
00f05c e092 0001 	.DD  _0x40000*2+2
                 
00f05e 000b      	.DW  0x0B
00f05f 0909      	.DW  _0x40003+9
00f060 e099 0001 	.DD  _0x40000*2+9
                 
                 _0xFFFFFFFF:
00f062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00f063 94f8      	CLI
00f064 27ee      	CLR  R30
00f065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
00f066 e0f1      	LDI  R31,1
00f067 bff5      	OUT  MCUCR,R31
00f068 e0f2      	LDI  R31,2
00f069 bff5      	OUT  MCUCR,R31
00f06a 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00f06c e08d      	LDI  R24,(14-2)+1
00f06d e0a2      	LDI  R26,2
00f06e 27bb      	CLR  R27
                 __CLEAR_REG:
00f06f 93ed      	ST   X+,R30
00f070 958a      	DEC  R24
00f071 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00f072 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00f073 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00f074 e0a0      	LDI  R26,LOW(__SRAM_START)
00f075 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00f076 93ed      	ST   X+,R30
00f077 9701      	SBIW R24,1
00f078 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00f079 eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00f07a eef0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
00f07b e0d1      	LDI  R29,BYTE3(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00f07c bfdb      	OUT  RAMPZ,R29
00f07d 9187      	ELPM R24,Z+
00f07e 9197      	ELPM R25,Z+
00f07f 9700      	SBIW R24,0
00f080 f081      	BREQ __GLOBAL_INI_END
00f081 91a7      	ELPM R26,Z+
00f082 91b7      	ELPM R27,Z+
00f083 9007      	ELPM R0,Z+
00f084 9017      	ELPM R1,Z+
00f085 91c7      	ELPM R28,Z+
00f086 91d7      	ELPM R29,Z+
00f087 01bf      	MOVW R22,R30
00f088 b7db      	IN   R29,RAMPZ
00f089 01f0      	MOVW R30,R0
00f08a bfcb      	OUT  RAMPZ,R28
                 __GLOBAL_INI_LOOP:
00f08b 9007      	ELPM R0,Z+
00f08c 920d      	ST   X+,R0
00f08d 9701      	SBIW R24,1
00f08e f7e1      	BRNE __GLOBAL_INI_LOOP
00f08f 01fb      	MOVW R30,R22
00f090 cfeb      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00f091 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00f092 bfed      	OUT  SPL,R30
00f093 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00f094 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00f095 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00f096 e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00f097 940c f1af 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : All devices with bootloaders support.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains functions for easy reading and writing
                 ;*                       of Flash memory on parts having the "Self-programming"
                 ;*                       feature. The user functions are as follows:
                 ;*
                 ;*                       ReadFlashByte()
                 ;*                       ReadFlashPage()
                 ;*                       WriteFlashByte()
                 ;*                       WriteFlashPage()
                 ;*                       RecoverFlash()
                 ;*
                 ;*                       The remaining functions contained in this file are used
                 ;*                       by the functions listet above.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <inavr.h>
                 ;#include "Self_programming.h"
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;#include <delay.h>
                 ;
                 ;
                 ;void (*__AddrToZ24ByteToSPMCR_SPM_W_Test)(void flash *addr)= (void(*)(void flash *)) 0x0F9E0;
                 ;void (*__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test)(void flash *addr, unsigned int data)= (void(*)(void flash *, unsigne ...
                 ;
                 ;
                 ;/*!
                 ;* Declare global struct variable in EEPROM if Flash recovery enabled.
                 ;* FlashBackup pageNumber holds Flash pageaddress (/PAGESIZE) the data in Flash
                 ;* recovery buffer should be written to if data need to be recovered.
                 ;* FlashBackup.status tells if data need to be recovered.
                 ;**/
                 ;#ifdef __FLASH_RECOVER
                 ;__eeprom struct {
                 ;  unsigned int  pageNumber;
                 ;  unsigned char status;
                 ;}FlashBackup = {0};
                 ;#endif
                 ;
                 ;void MY_FILL_TEMP_WORD(unsigned long addr,unsigned int data)
                 ; 0000 003A {
                 
                 	.CSEG
                 ; 0000 003B      _FILL_TEMP_WORD(addr,data);
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ; 0000 003C }
                 ;void MY_PAGE_ERASE(unsigned long addr)
                 ; 0000 003E {
                 ; 0000 003F      _PAGE_ERASE(addr);
                 ;	addr -> Y+0
                 ; 0000 0040 }
                 ;void MY_PAGE_WRITE(unsigned long addr)
                 ; 0000 0042 {
                 ; 0000 0043      _PAGE_WRITE(addr);
                 ;	addr -> Y+0
                 ; 0000 0044 }
                 ;/*!
                 ;* The function Returns one byte located on Flash address given by ucFlashStartAdr.
                 ;**/
                 ;unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 ; 0000 0048 unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 ; 0000 0049 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 004A   return (unsigned char)*((MyFlashCharPointer)flashStartAdr);
                 ;	flashStartAdr -> Y+0
                 ; 0000 004B //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 004C } // Returns data from Flash
                 ;
                 ;/*!
                 ;* The function reads one Flash page from address flashStartAdr and stores data
                 ;* in array dataPage[]. The number of bytes stored is depending upon the
                 ;* Flash page size. The function returns FALSE if input address is not a Flash
                 ;* page address, else TRUE.
                 ;**/
                 ;unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 ; 0000 0054 unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 ; 0000 0055   unsigned int index;
                 ; 0000 0056   if(!(flashStartAdr & (PAGESIZE-1))){      // If input address is a page address
                 ;	flashStartAdr -> Y+4
                 ;	*dataPage -> Y+2
                 ;	index -> R16,R17
                 ; 0000 0057     for(index = 0; index < PAGESIZE; index++){
                 ; 0000 0058       dataPage[index] = ReadFlashByte(flashStartAdr + index);
                 ; 0000 0059     }
                 ; 0000 005A     return TRUE;                            // Return TRUE if valid page address
                 ; 0000 005B   }
                 ; 0000 005C   else{
                 ; 0000 005D     return FALSE;                           // Return FALSE if not valid page address
                 ; 0000 005E   }
                 ; 0000 005F }
                 ;
                 ;/*!
                 ;* The function writes byte data to Flash address flashAddr. Returns FALSE if
                 ;* input address is not valid Flash byte address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0065 unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0066   MyAddressType  pageAdr;
                 ; 0000 0067   unsigned char eepromInterruptSettings,sregSettings;
                 ; 0000 0068   if( AddressCheck( flashAddr & ~(PAGESIZE-1) )){
                 ;	flashAddr -> Y+7
                 ;	data -> Y+6
                 ;	pageAdr -> Y+2
                 ;	eepromInterruptSettings -> R17
                 ;	sregSettings -> R16
                 ; 0000 0069 
                 ; 0000 006A     eepromInterruptSettings= EECR & (1<<EERIE); // Stores EEPROM interrupt mask
                 ; 0000 006B     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
                 ; 0000 006C     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 ; 0000 006D 
                 ; 0000 006E     sregSettings= SREG;
                 ; 0000 006F     #asm("cli");
                 ; 0000 0070     pageAdr=flashAddr & ~(PAGESIZE-1);      // Gets Flash page address from byte address
                 ; 0000 0071 
                 ; 0000 0072     #ifdef __FLASH_RECOVER
                 ; 0000 0073     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 0074                                             // not contain data for writing
                 ; 0000 0075     while(EECR & (1<<EEWE));
                 ; 0000 0076     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                 ; 0000 0077     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 0078     FlashBackup.pageNumber = (unsigned int) (pageAdr/PAGESIZE); // Stores page address
                 ; 0000 0079                                                        // data should be written to
                 ; 0000 007A     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 007B                                                // contains unwritten data
                 ; 0000 007C     while(EECR & (1<<EEWE));
                 ; 0000 007D     #endif
                 ; 0000 007E 
                 ; 0000 007F     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082     WriteBufToFlash(pageAdr);               // Writes to Flash
                 ; 0000 0083 
                 ; 0000 0084     #ifdef __FLASH_RECOVER
                 ; 0000 0085     FlashBackup.status = 0;                 // Indicates that Flash recovery buffer
                 ; 0000 0086                                             // does not contain unwritten data
                 ; 0000 0087     while(EECR & (1<<EEWE));
                 ; 0000 0088     #endif
                 ; 0000 0089 
                 ; 0000 008A     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
                 ; 0000 008B     SREG = sregSettings;
                 ; 0000 008C     return TRUE;                            // Return TRUE if address
                 ; 0000 008D                                             // valid for writing
                 ; 0000 008E   }
                 ; 0000 008F   else
                 ; 0000 0090     return FALSE;                           // Return FALSE if address not
                 ; 0000 0091                                             // valid for writing
                 ; 0000 0092 }
                 ;
                 ;/*!
                 ;* The function writes data from array dataPage[] to Flash page address
                 ;* flashStartAdr. The Number of bytes written is depending upon the Flash page
                 ;* size. Returns FALSE if input argument ucFlashStartAdr is not a valid Flash
                 ;* page address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage)
                 ; 0000 009B {
                 _WriteFlashPage:
                 ; .FSTART _WriteFlashPage
                 ; 0000 009C   unsigned int index;
                 ; 0000 009D   unsigned char eepromInterruptSettings,sregSettings;
                 ; 0000 009E   if( AddressCheck(flashStartAdr) ){
00f099 940e f5ee 	CALL SUBOPT_0x0
                 ;	flashStartAdr -> Y+6
                 ;	*dataPage -> Y+4
                 ;	index -> R16,R17
                 ;	eepromInterruptSettings -> R19
                 ;	sregSettings -> R18
                +
00f09b 81ae     +LDD R26 , Y + 6
00f09c 81bf     +LDD R27 , Y + 6 + 1
00f09d 8588     +LDD R24 , Y + 6 + 2
00f09e 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00f09f d055      	RCALL _AddressCheck
00f0a0 30e0      	CPI  R30,0
00f0a1 f409      	BRNE PC+2
00f0a2 c04d      	RJMP _0xD
                 ; 0000 009F     eepromInterruptSettings = EECR & (1<<EERIE); // Stoes EEPROM interrupt mask
00f0a3 b3ec      	IN   R30,0x1C
00f0a4 70e8      	ANDI R30,LOW(0x8)
00f0a5 2f3e      	MOV  R19,R30
                 ; 0000 00A0     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
00f0a6 98e3      	CBI  0x1C,3
                 ; 0000 00A1     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 _0xE:
00f0a7 99e1      	SBIC 0x1C,1
00f0a8 cffe      	RJMP _0xE
                 ; 0000 00A2 
                 ; 0000 00A3     sregSettings= SREG;
00f0a9 b72f      	IN   R18,63
                 ; 0000 00A4     #asm("cli");
00f0aa 94f8      	cli
                 ; 0000 00A5 
                 ; 0000 00A6     #ifdef __FLASH_RECOVER
                 ; 0000 00A7     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00A8                                             // not contain data for writing
                 ; 0000 00A9     while(EECR & (1<<EEWE));
                 ; 0000 00AA 
                 ; 0000 00AB     //_ENABLE_RWW_SECTION();
                 ; 0000 00AC 
                 ; 0000 00AD     _WAIT_FOR_SPM();
                 ; 0000 00AE     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00AF 
                 ; 0000 00B0     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                 ; 0000 00B1       //_WAIT_FOR_SPM();
                 ; 0000 00B2       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00B3       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00B4     }
                 ; 0000 00B5 
                 ; 0000 00B6     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 00B7     FlashBackup.pageNumber=(unsigned int)(flashStartAdr/PAGESIZE);
                 ; 0000 00B8     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 00B9                                            // contains unwritten data
                 ; 0000 00BA     while(EECR & (1<<EEWE));
                 ; 0000 00BB     #endif
                 ; 0000 00BC 
                 ; 0000 00BD     if(index==0xFFF1)
00f0ab efe1      	LDI  R30,LOW(65521)
00f0ac efff      	LDI  R31,HIGH(65521)
00f0ad 17e0      	CP   R30,R16
00f0ae 07f1      	CPC  R31,R17
00f0af f491      	BRNE _0x11
                 ; 0000 00BE     {
                 ; 0000 00BF         __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
00f0b0 940e f5f3 	CALL SUBOPT_0x1
00f0b2 e0a0      	LDI  R26,LOW(0)
00f0b3 e0b0      	LDI  R27,0
00f0b4 940e f175 	CALL ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0000 00C0         __AddrToZ24ByteToSPMCR_SPM_W((void flash *)0x1EF00);
00f0b6 940e f5fa 	CALL SUBOPT_0x2
00f0b8 940e f185 	CALL ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0000 00C1         __AddrToZ24ByteToSPMCR_SPM_E((void flash *)0x1EF00);
00f0ba 940e f5fa 	CALL SUBOPT_0x2
00f0bc 940e f193 	CALL ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0000 00C2         __AddrToZ24ByteToSPMCR_SPM_EW((void flash *)0x1EF00);
00f0be 940e f5fa 	CALL SUBOPT_0x2
00f0c0 940e f1a1 	CALL ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0000 00C3     }
                 ; 0000 00C4     _WAIT_FOR_SPM();
                 _0x11:
                 _0x12:
00f0c2 91e0 0068 	LDS  R30,104
00f0c4 70e1      	ANDI R30,LOW(0x1)
00f0c5 f7e1      	BRNE _0x12
                 ; 0000 00C5     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00C6     //_ENABLE_RWW_SECTION();
                 ; 0000 00C7 
                 ; 0000 00C8     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                +
00f0c6 e000     +LDI R16 , LOW ( 0 )
00f0c7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16:
                +
00f0c8 3000     +CPI R16 , LOW ( 256 )
00f0c9 e0e1     +LDI R30 , HIGH ( 256 )
00f0ca 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f0cb f4c8      	BRSH _0x17
                 ; 0000 00C9       //_WAIT_FOR_SPM();
                 ; 0000 00CA       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00CB       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
00f0cc 01f8      	MOVW R30,R16
00f0cd 2766      	CLR  R22
00f0ce 2777      	CLR  R23
00f0cf 940e f7f7 	CALL __PUTPARD1
00f0d1 01f8      	MOVW R30,R16
00f0d2 940e f5ff 	CALL SUBOPT_0x3
00f0d4 900c      	LD   R0,X
00f0d5 2411      	CLR  R1
00f0d6 01f8      	MOVW R30,R16
00f0d7 9631      	ADIW R30,1
00f0d8 940e f5ff 	CALL SUBOPT_0x3
00f0da 91ec      	LD   R30,X
00f0db 2ffe      	MOV  R31,R30
00f0dc e0e0      	LDI  R30,0
00f0dd 01d0      	MOVW R26,R0
00f0de 0fae      	ADD  R26,R30
00f0df 1fbf      	ADC  R27,R31
00f0e0 940e f175 	CALL ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0000 00CC     }
                +
00f0e2 5f0e     +SUBI R16 , LOW ( - 2 )
00f0e3 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00f0e4 cfe3      	RJMP _0x16
                 _0x17:
                 ; 0000 00CD     //_PAGE_WRITE( flashStartAdr );
                 ; 0000 00CE     WriteBufToFlash(flashStartAdr);         // Writes to Flash
                +
00f0e5 81ae     +LDD R26 , Y + 6
00f0e6 81bf     +LDD R27 , Y + 6 + 1
00f0e7 8588     +LDD R24 , Y + 6 + 2
00f0e8 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00f0e9 d025      	RCALL _WriteBufToFlash
                 ; 0000 00CF     #ifdef __FLASH_RECOVER
                 ; 0000 00D0       FlashBackup.status=0;                 // Inicate that Flash buffer does
                 ; 0000 00D1                                             // not contain data for writing
                 ; 0000 00D2       while(EECR & (1<<EEWE));
                 ; 0000 00D3     #endif
                 ; 0000 00D4 
                 ; 0000 00D5     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
00f0ea b3ec      	IN   R30,0x1C
00f0eb 2be3      	OR   R30,R19
00f0ec bbec      	OUT  0x1C,R30
                 ; 0000 00D6     SREG = sregSettings;
00f0ed bf2f      	OUT  0x3F,R18
                 ; 0000 00D7     return TRUE;                            // Return TRUE if address
00f0ee e0e1      	LDI  R30,LOW(1)
00f0ef c001      	RJMP _0x200000B
                 ; 0000 00D8                                             // valid for writing
                 ; 0000 00D9   }
                 ; 0000 00DA   else
                 _0xD:
                 ; 0000 00DB     return FALSE;                           // Return FALSE if not address not
00f0f0 e0e0      	LDI  R30,LOW(0)
                 ; 0000 00DC                                             // valid for writing
                 ; 0000 00DD }
                 _0x200000B:
00f0f1 940e f813 	CALL __LOADLOCR4
00f0f3 962a      	ADIW R28,10
00f0f4 9508      	RET
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function checks if global variable FlashBackup.status indicates that Flash recovery
                 ;* buffer contains data that needs to be written to Flash. Writes data from
                 ;* Flash recovery buffer to Flash page address given by FLASH_recovery.pageAdr.
                 ;* This function should be called at program startup if FLASH recovery option
                 ;* is enabeled.
                 ;**/
                 ;unsigned char RecoverFlash(){
                 ; 0000 00E6 unsigned char RecoverFlash(){
                 ; 0000 00E7 #ifdef __FLASH_RECOVER
                 ; 0000 00E8   unsigned int index;
                 ; 0000 00E9   unsigned long flashStartAdr = (MyAddressType)FlashBackup.pageNumber * PAGESIZE;
                 ; 0000 00EA   if(FlashBackup.status == FLASH_BUFFER_FULL_ID){ // Checks if Flash recovery
                 ; 0000 00EB                                                   //  buffer contains data
                 ; 0000 00EC 
                 ; 0000 00ED     for(index=0; index < PAGESIZE; index+=2){     // Writes to Flash write buffer
                 ; 0000 00EE         _WAIT_FOR_SPM();
                 ; 0000 00EF         MY_FILL_TEMP_WORD( index, *((MyFlashIntPointer)(ADR_FLASH_BUFFER+index)) );
                 ; 0000 00F0     }
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3     //WriteBufToFlash((MyAddressType)FlashBackup.pageNumber * PAGESIZE);
                 ; 0000 00F4     _WAIT_FOR_SPM();
                 ; 0000 00F5     MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 00F6     _WAIT_FOR_SPM();
                 ; 0000 00F7     MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 00F8     _WAIT_FOR_SPM();
                 ; 0000 00F9     _ENABLE_RWW_SECTION();
                 ; 0000 00FA     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00FB                                             // not contain data for writing
                 ; 0000 00FC     while(EECR & (1<<EEWE));
                 ; 0000 00FD     return TRUE;                            // Returns TRUE if recovery has
                 ; 0000 00FE                                             // taken place
                 ; 0000 00FF   }
                 ; 0000 0100 #endif
                 ; 0000 0101   return FALSE;
                 ; 0000 0102 }
                 ;
                 ;
                 ;/*!
                 ;* The function checks if input argument is a valid Flash page address for
                 ;* writing. Returns TRUE only if:
                 ;* - Address points to the beginning of a Flash page
                 ;* - Address is within the limits defined in Self_programming.h
                 ;* - Address is not equal to page address used for buffring by the Flash recovery
                 ;*   functions (if enabled).
                 ;* Returns FALSE else.
                 ;**/
                 ;unsigned char AddressCheck(MyAddressType flashAdr){
                 ; 0000 010E unsigned char AddressCheck(MyAddressType flashAdr){
                 _AddressCheck:
                 ; .FSTART _AddressCheck
                 ; 0000 010F   #ifdef __FLASH_RECOVER
                 ; 0000 0110   // The next line gives a warning 'pointless comparison with zero' if ADR_LIMIT_LOW is 0. Ignore it.
                 ; 0000 0111   if( (flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) &&
                 ; 0000 0112       (flashAdr != ADR_FLASH_BUFFER) && !(flashAdr & (PAGESIZE-1)) )
                 ; 0000 0113     return TRUE;                            // Address is a valid page address
                 ; 0000 0114   else
                 ; 0000 0115     return FALSE;                           // Address is not a valid page address
                 ; 0000 0116   #else
                 ; 0000 0117   if((flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) && !(flashAdr & (PAGESIZE-1) ) )
00f0f5 940e f604 	CALL SUBOPT_0x4
                 ;	flashAdr -> Y+0
00f0f7 940e f801 	CALL __CPD20
00f0f9 f070      	BRLO _0x1A
00f0fa 940e f609 	CALL SUBOPT_0x5
                +
00f0fc 30a0     +CPI R26 , LOW ( 0x1F000 )
00f0fd efe0     +LDI R30 , HIGH ( 0x1F000 )
00f0fe 07be     +CPC R27 , R30
00f0ff e0e1     +LDI R30 , BYTE3 ( 0x1F000 )
00f100 078e     +CPC R24 , R30
00f101 e0e0     +LDI R30 , BYTE4 ( 0x1F000 )
00f102 079e     +CPC R25 , R30
                 	__CPD2N 0x1F000
00f103 f420      	BRSH _0x1A
00f104 940e f7e8 	CALL __GETD1S0
00f106 30e0      	CPI  R30,0
00f107 f009      	BREQ _0x1B
                 _0x1A:
00f108 c003      	RJMP _0x19
                 _0x1B:
                 ; 0000 0118     return TRUE;                            // Address is a valid page address
00f109 e0e1      	LDI  R30,LOW(1)
00f10a 940c f4d5 	JMP  _0x200000A
                 ; 0000 0119   else
                 _0x19:
                 ; 0000 011A   {
                 ; 0000 011B     /*
                 ; 0000 011C     while(1)
                 ; 0000 011D     {
                 ; 0000 011E       PORTC.5=0;
                 ; 0000 011F       delay_ms(500);
                 ; 0000 0120       PORTC.5=1;
                 ; 0000 0121       delay_ms(500);
                 ; 0000 0122     }
                 ; 0000 0123     */
                 ; 0000 0124     return FALSE;                           // Address is not a valid page address
00f10c e0e0      	LDI  R30,LOW(0)
00f10d 940c f4d5 	JMP  _0x200000A
                 ; 0000 0125   }
                 ; 0000 0126   #endif
                 ; 0000 0127 }
                 ; .FEND
                 ;
                 ;
                 ;/*!
                 ;* The function writes Flash temporary buffer to Flash page address given by
                 ;* input argument.
                 ;**/
                 ;
                 ;void WriteBufToFlash(MyAddressType flashStartAdr) {
                 ; 0000 012F void WriteBufToFlash(MyAddressType flashStartAdr) {
                 _WriteBufToFlash:
                 ; .FSTART _WriteBufToFlash
                 ; 0000 0130     //_WAIT_FOR_SPM();
                 ; 0000 0131     //MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 0132     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 0133     //_WAIT_FOR_SPM();
                 ; 0000 0134     //_ENABLE_RWW_SECTION();
                 ; 0000 0135     //MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 0136     _PAGE_WRITE( flashStartAdr );
00f10f 940e f604 	CALL SUBOPT_0x4
                 ;	flashStartAdr -> Y+0
00f111 940e f1a1 	CALL ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0000 0137     //_WAIT_FOR_SPM();
                 ; 0000 0138     //_ENABLE_RWW_SECTION();
                 ; 0000 0139 /*
                 ; 0000 013A #pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 013B   #ifdef __HAS_RAMPZ__
                 ; 0000 013C   RAMPZ = (unsigned char)(flashStartAdr >> 16);
                 ; 0000 013D   #endif
                 ; 0000 013E   _PAGE_ERASE(flashStartAdr);
                 ; 0000 013F   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0140   _PAGE_WRITE(flashStartAdr);
                 ; 0000 0141   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0142   #ifdef RWWSRE
                 ; 0000 0143   __DataToR0ByteToSPMCR_SPM( 0, (unsigned char)(1<<RWWSRE)|(1<<SPMEN)); // Enable RWW
                 ; 0000 0144   #endif
                 ; 0000 0145 #pragma diag_default=Pe1053 // Back to default.
                 ; 0000 0146 */
                 ; 0000 0147 }
00f113 940c f4d5 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function reads Flash page given by flashAddr, replaces one byte given by
                 ;* flashAddr with data, and stores entire page in Flash temporary buffer.
                 ;**/
                 ;void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 ; 0000 014D void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 ; 0000 014E //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 014F     unsigned int index, oddByte, pcWord;
                 ; 0000 0150 
                 ; 0000 0151     MyAddressType  pageAdr;
                 ; 0000 0152     oddByte=(unsigned char)flashAddr & 1;
                 ;	flashAddr -> Y+11
                 ;	data -> Y+10
                 ;	index -> R16,R17
                 ;	oddByte -> R18,R19
                 ;	pcWord -> R20,R21
                 ;	pageAdr -> Y+6
                 ; 0000 0153     pcWord=(unsigned int)flashAddr & (PAGESIZE-2); // Used when writing FLASH temp buffer
                 ; 0000 0154     pageAdr=flashAddr & ~(PAGESIZE-1);        // Get FLASH page address from byte address
                 ; 0000 0155     //while( SPMCR_REG & (1<<SPMEN) );
                 ; 0000 0156     //_ENABLE_RWW_SECTION();
                 ; 0000 0157 
                 ; 0000 0158     for(index=0; index < PAGESIZE; index+=2){
                 ; 0000 0159         if(index==pcWord){
                 ; 0000 015A           if(oddByte){
                 ; 0000 015B             //MY_FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
                 ; 0000 015C             _FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
                 ; 0000 015D           }                                     // Write odd byte in temporary buffer
                 ; 0000 015E           else{
                 ; 0000 015F             //MY_FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
                 ; 0000 0160             _FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
                 ; 0000 0161           }                                     // Write even byte in temporary buffer
                 ; 0000 0162         }
                 ; 0000 0163         else{
                 ; 0000 0164           //MY_FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
                 ; 0000 0165           _FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
                 ; 0000 0166         }                                       // Write Flash word directly to temporary buffer
                 ; 0000 0167     }
                 ; 0000 0168 //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 0169 }
                 ;/*****************************************************************************
                 ;*
                 ;* (C) 2010, HP InfoTech srl, www.hpinfotech.com
                 ;*
                 ;* File              : flash.c
                 ;* Compiler          : CodeVisionAVR V2.xx
                 ;* Revision          : $Revision: 1.0 $
                 ;* Date              : $Date: December 9, 2010 $
                 ;* Updated by        : $Author: HP InfoTech $
                 ;*
                 ;* Target platform   : All AVRs with bootloader support
                 ;*
                 ;* AppNote           : AVR109 - Self-programming
                 ;*
                 ;* Description       : Flash operations for AVR109 Self-programming
                 ;****************************************************************************/
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;
                 ;//#define	SPMCR_REG	SPMCSR
                 ;
                 ;void dospmew(void)
                 ; 0001 0018 {
                 
                 	.CSEG
                 _dospmew:
                 ; .FSTART _dospmew
                 ; 0001 0019     #asm
                 ; 0001 001A          ldi   r22,$03
00f115 e063               ldi   r22,$03
                 ; 0001 001B          WR_SPMCR_REG_R22
00f116 9360 0068          WR_SPMCR_REG_R22
                 ; 0001 001C          spm
00f118 95e8               spm
                 ; 0001 001D     #endasm
                 ; 0001 001E     _WAIT_FOR_SPM();
                 _0x20003:
00f119 91e0 0068 	LDS  R30,104
00f11b 70e1      	ANDI R30,LOW(0x1)
00f11c f7e1      	BRNE _0x20003
                 ; 0001 001F     #asm
                 ; 0001 0020         ldi   r22,$05
00f11d e065              ldi   r22,$05
                 ; 0001 0021         WR_SPMCR_REG_R22
00f11e 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0022         spm
00f120 95e8              spm
                 ; 0001 0023     #endasm
                 ; 0001 0024     _WAIT_FOR_SPM();
                 _0x20006:
00f121 91e0 0068 	LDS  R30,104
00f123 70e1      	ANDI R30,LOW(0x1)
00f124 f7e1      	BRNE _0x20006
                 ; 0001 0025     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20009:
00f125 91e0 0068 	LDS  R30,104
00f127 74e0      	ANDI R30,LOW(0x40)
00f128 f049      	BREQ _0x2000B
                 ; 0001 0026     {
                 ; 0001 0027     #asm
                 ; 0001 0028         ldi   r22,$11
00f129 e161              ldi   r22,$11
                 ; 0001 0029         WR_SPMCR_REG_R22
00f12a 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 002A         spm
00f12c 95e8              spm
                 ; 0001 002B     #endasm
                 ; 0001 002C         _WAIT_FOR_SPM();
                 _0x2000C:
00f12d 91e0 0068 	LDS  R30,104
00f12f 70e1      	ANDI R30,LOW(0x1)
00f130 f7e1      	BRNE _0x2000C
                 ; 0001 002D     }
00f131 cff3      	RJMP _0x20009
                 _0x2000B:
                 ; 0001 002E }
00f132 9508      	RET
                 ; .FEND
                 ;
                 ;void dospmw(void)
                 ; 0001 0031 {
                 _dospmw:
                 ; .FSTART _dospmw
                 ; 0001 0032     #asm
                 ; 0001 0033         ldi   r22,$05
00f133 e065              ldi   r22,$05
                 ; 0001 0034         WR_SPMCR_REG_R22
00f134 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0035         spm
00f136 95e8              spm
                 ; 0001 0036     #endasm
                 ; 0001 0037     _WAIT_FOR_SPM();
                 _0x2000F:
00f137 91e0 0068 	LDS  R30,104
00f139 70e1      	ANDI R30,LOW(0x1)
00f13a f7e1      	BRNE _0x2000F
                 ; 0001 0038     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20012:
00f13b 91e0 0068 	LDS  R30,104
00f13d 74e0      	ANDI R30,LOW(0x40)
00f13e f049      	BREQ _0x20014
                 ; 0001 0039     {
                 ; 0001 003A     #asm
                 ; 0001 003B         ldi   r22,$11
00f13f e161              ldi   r22,$11
                 ; 0001 003C         WR_SPMCR_REG_R22
00f140 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 003D         spm
00f142 95e8              spm
                 ; 0001 003E     #endasm
                 ; 0001 003F         _WAIT_FOR_SPM();
                 _0x20015:
00f143 91e0 0068 	LDS  R30,104
00f145 70e1      	ANDI R30,LOW(0x1)
00f146 f7e1      	BRNE _0x20015
                 ; 0001 0040     }
00f147 cff3      	RJMP _0x20012
                 _0x20014:
                 ; 0001 0041 }
00f148 9508      	RET
                 ; .FEND
                 ;
                 ;void dospme(void)
                 ; 0001 0044 {
                 _dospme:
                 ; .FSTART _dospme
                 ; 0001 0045     #asm
                 ; 0001 0046         ldi   r22,$03
00f149 e063              ldi   r22,$03
                 ; 0001 0047         WR_SPMCR_REG_R22
00f14a 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0048         spm
00f14c 95e8              spm
                 ; 0001 0049     #endasm
                 ; 0001 004A     _WAIT_FOR_SPM();
                 _0x20018:
00f14d 91e0 0068 	LDS  R30,104
00f14f 70e1      	ANDI R30,LOW(0x1)
00f150 f7e1      	BRNE _0x20018
                 ; 0001 004B     while( SPMCR_REG & (1<<RWWSB) )
                 _0x2001B:
00f151 91e0 0068 	LDS  R30,104
00f153 74e0      	ANDI R30,LOW(0x40)
00f154 f049      	BREQ _0x2001D
                 ; 0001 004C     {
                 ; 0001 004D     #asm
                 ; 0001 004E         ldi   r22,$11
00f155 e161              ldi   r22,$11
                 ; 0001 004F         WR_SPMCR_REG_R22
00f156 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0050         spm
00f158 95e8              spm
                 ; 0001 0051     #endasm
                 ; 0001 0052         _WAIT_FOR_SPM();
                 _0x2001E:
00f159 91e0 0068 	LDS  R30,104
00f15b 70e1      	ANDI R30,LOW(0x1)
00f15c f7e1      	BRNE _0x2001E
                 ; 0001 0053     }
00f15d cff3      	RJMP _0x2001B
                 _0x2001D:
                 ; 0001 0054 }
00f15e 9508      	RET
                 ; .FEND
                 ;
                 ;void dospm(void)
                 ; 0001 0057 {
                 _dospm:
                 ; .FSTART _dospm
                 ; 0001 0058     #asm
                 ; 0001 0059          ldi   r22,$01
00f15f e061               ldi   r22,$01
                 ; 0001 005A          WR_SPMCR_REG_R22
00f160 9360 0068          WR_SPMCR_REG_R22
                 ; 0001 005B          spm
00f162 95e8               spm
                 ; 0001 005C     #endasm
                 ; 0001 005D     _WAIT_FOR_SPM();
                 _0x20021:
00f163 91e0 0068 	LDS  R30,104
00f165 70e1      	ANDI R30,LOW(0x1)
00f166 f7e1      	BRNE _0x20021
                 ; 0001 005E     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20024:
00f167 91e0 0068 	LDS  R30,104
00f169 74e0      	ANDI R30,LOW(0x40)
00f16a f049      	BREQ _0x20026
                 ; 0001 005F     {
                 ; 0001 0060     #asm
                 ; 0001 0061         ldi   r22,$11
00f16b e161              ldi   r22,$11
                 ; 0001 0062         WR_SPMCR_REG_R22
00f16c 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0063         spm
00f16e 95e8              spm
                 ; 0001 0064     #endasm
                 ; 0001 0065         _WAIT_FOR_SPM();
                 _0x20027:
00f16f 91e0 0068 	LDS  R30,104
00f171 70e1      	ANDI R30,LOW(0x1)
00f172 f7e1      	BRNE _0x20027
                 ; 0001 0066     }
00f173 cff3      	RJMP _0x20024
                 _0x20026:
                 ; 0001 0067 }
00f174 9508      	RET
                 ; .FEND
                 ;
                 ;#pragma warn-
                 ;
                 ;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
                 ; 0001 006C {
                 ; 0001 006D #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 006E      ldd  r30,y+1
                 ; 0001 006F      ldd  r31,y+2
                 ; 0001 0070      ld   r22,y
                 ; 0001 0071      WR_SPMCR_REG_R22
                 ; 0001 0072      lpm
                 ; 0001 0073      mov  r30,r0
                 ; 0001 0074 #endasm
                 ; 0001 0075 }
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0001 0078 {
                 ; 0001 0079 #asm
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 007A      ldd  r0,y+1
                 ; 0001 007B      ld   r22,y
                 ; 0001 007C      WR_SPMCR_REG_R22
                 ; 0001 007D      spm
                 ; 0001 007E #endasm
                 ; 0001 007F }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 0082 {
                 ; 0001 0083     #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0084          ldd  r30,y+3
                 ; 0001 0085          ldd  r31,y+4
                 ; 0001 0086          ldd  r0,y+1
                 ; 0001 0087          ldd  r1,y+2
                 ; 0001 0088          ld   r22,y
                 ; 0001 0089          WR_SPMCR_REG_R22
                 ; 0001 008A          spm
                 ; 0001 008B     #endasm
                 ; 0001 008C }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 008F {
                 ; 0001 0090 _WAIT_FOR_SPM();
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 ; 0001 0091     #asm
                 ; 0001 0092          ldd  r30,y+2
                 ; 0001 0093          ldd  r31,y+3
                 ; 0001 0094          ldd  r0,y+0
                 ; 0001 0095          ldd  r1,y+1
                 ; 0001 0096          //ldi   r22,LOW(1)
                 ; 0001 0097          //WR_SPMCR_REG_R22
                 ; 0001 0098          //spm
                 ; 0001 0099     #endasm
                 ; 0001 009A dospm();
                 ; 0001 009B }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 009E {
                 ; 0001 009F #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00A0      ldd  r30,y+1
                 ; 0001 00A1      ldd  r31,y+2
                 ; 0001 00A2      ld   r22,y
                 ; 0001 00A3      WR_SPMCR_REG_R22
                 ; 0001 00A4      spm
                 ; 0001 00A5 #endasm
                 ; 0001 00A6 }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00A9 {
                 ; 0001 00AA _WAIT_FOR_SPM();
                 ;	*addr -> Y+0
                 ; 0001 00AB #asm
                 ; 0001 00AC      ldd  r30,y+0
                 ; 0001 00AD      ldd  r31,y+1
                 ; 0001 00AE      //ld   r22,y
                 ; 0001 00AF      //WR_SPMCR_REG_R22
                 ; 0001 00B0      //spm
                 ; 0001 00B1 #endasm
                 ; 0001 00B2 dospmew();
                 ; 0001 00B3 }
                 ;
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 00B7 {
                 ; 0001 00B8 #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00B9      ldd  r30,y+3
                 ; 0001 00BA      ldd  r31,y+4
                 ; 0001 00BB      ldd  r22,y+5
                 ; 0001 00BC      out  rampz,r22
                 ; 0001 00BD      ldd  r0,y+1
                 ; 0001 00BE      ldd  r1,y+2
                 ; 0001 00BF      ld   r22,y
                 ; 0001 00C0      WR_SPMCR_REG_R22
                 ; 0001 00C1      spm
                 ; 0001 00C2 #endasm
                 ; 0001 00C3 }
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 00C6 {
                 ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F:
                 ; .FSTART ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0001 00C7 _WAIT_FOR_SPM();
00f175 93ba      	ST   -Y,R27
00f176 93aa      	ST   -Y,R26
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 _0x20030:
00f177 91e0 0068 	LDS  R30,104
00f179 70e1      	ANDI R30,LOW(0x1)
00f17a f7e1      	BRNE _0x20030
                 ; 0001 00C8 #asm
                 ; 0001 00C9      ldd  r30,y+2
00f17b 81ea           ldd  r30,y+2
                 ; 0001 00CA      ldd  r31,y+3
00f17c 81fb           ldd  r31,y+3
                 ; 0001 00CB      ldd  r22,y+4
00f17d 816c           ldd  r22,y+4
                 ; 0001 00CC      out  rampz,r22
00f17e bf6b           out  rampz,r22
                 ; 0001 00CD      ldd  r0,y+0
00f17f 8008           ldd  r0,y+0
                 ; 0001 00CE      ldd  r1,y+1
00f180 8019           ldd  r1,y+1
                 ; 0001 00CF      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00D0      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00D1      //spm
                      //spm
                 ; 0001 00D2 #endasm
                 ; 0001 00D3 dospm();
00f181 940e f15f 	CALL _dospm
                 ; 0001 00D4 }
00f183 940c f569 	JMP  _0x2000004
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 00D7 {
                 ; 0001 00D8 #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00D9      ldd  r30,y+1
                 ; 0001 00DA      ldd  r31,y+2
                 ; 0001 00DB      ldd  r22,y+3
                 ; 0001 00DC      out  rampz,r22
                 ; 0001 00DD      ld   r22,y
                 ; 0001 00DE      WR_SPMCR_REG_R22
                 ; 0001 00DF      spm
                 ; 0001 00E0 #endasm
                 ; 0001 00E1 }
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00E4 {
                 ___AddrToZ24ByteToSPMCR_SPM_W:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0001 00E5 _WAIT_FOR_SPM();
00f185 940e f7fc 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20033:
00f187 91e0 0068 	LDS  R30,104
00f189 70e1      	ANDI R30,LOW(0x1)
00f18a f7e1      	BRNE _0x20033
                 ; 0001 00E6 #asm
                 ; 0001 00E7      ldd  r30,y+0
00f18b 81e8           ldd  r30,y+0
                 ; 0001 00E8      ldd  r31,y+1
00f18c 81f9           ldd  r31,y+1
                 ; 0001 00E9      ldd  r22,y+2
00f18d 816a           ldd  r22,y+2
                 ; 0001 00EA      out  rampz,r22
00f18e bf6b           out  rampz,r22
                 ; 0001 00EB      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00EC      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00ED      //spm
                      //spm
                 ; 0001 00EE #endasm
                 ; 0001 00EF dospmw();
00f18f 940e f133 	CALL _dospmw
                 ; 0001 00F0 }
00f191 940c f4d5 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_E(void flash *addr)
                 ; 0001 00F3 {
                 ___AddrToZ24ByteToSPMCR_SPM_E:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0001 00F4 _WAIT_FOR_SPM();
00f193 940e f7fc 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20036:
00f195 91e0 0068 	LDS  R30,104
00f197 70e1      	ANDI R30,LOW(0x1)
00f198 f7e1      	BRNE _0x20036
                 ; 0001 00F5 #asm
                 ; 0001 00F6      ldd  r30,y+0
00f199 81e8           ldd  r30,y+0
                 ; 0001 00F7      ldd  r31,y+1
00f19a 81f9           ldd  r31,y+1
                 ; 0001 00F8      ldd  r22,y+2
00f19b 816a           ldd  r22,y+2
                 ; 0001 00F9      out  rampz,r22
00f19c bf6b           out  rampz,r22
                 ; 0001 00FA      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00FB      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00FC      //spm
                      //spm
                 ; 0001 00FD #endasm
                 ; 0001 00FE dospme();
00f19d 940e f149 	CALL _dospme
                 ; 0001 00FF }
00f19f 940c f4d5 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_EW(void flash *addr)
                 ; 0001 0102 {
                 ___AddrToZ24ByteToSPMCR_SPM_EW:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0001 0103 _WAIT_FOR_SPM();
00f1a1 940e f7fc 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20039:
00f1a3 91e0 0068 	LDS  R30,104
00f1a5 70e1      	ANDI R30,LOW(0x1)
00f1a6 f7e1      	BRNE _0x20039
                 ; 0001 0104 #asm
                 ; 0001 0105      ldd  r30,y+0
00f1a7 81e8           ldd  r30,y+0
                 ; 0001 0106      ldd  r31,y+1
00f1a8 81f9           ldd  r31,y+1
                 ; 0001 0107      ldd  r22,y+2
00f1a9 816a           ldd  r22,y+2
                 ; 0001 0108      out  rampz,r22
00f1aa bf6b           out  rampz,r22
                 ; 0001 0109      //ld   r22,y
                      //ld   r22,y
                 ; 0001 010A      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 010B      //spm
                      //spm
                 ; 0001 010C #endasm
                 ; 0001 010D dospmew();
00f1ab 940e f115 	CALL _dospmew
                 ; 0001 010E }
00f1ad 940c f4d5 	JMP  _0x200000A
                 ; .FEND
                 ;
                 ;#ifdef _WARNINGS_ON_
                 ;#pragma warn+
                 ;#endif
                 ;
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming_main.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : This example is written for ATmega128.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains an example program using the Flash R/W
                 ;*                       functions provided with the files Self_programming.h /
                 ;*                       Self_programming.c . The program should be compiled using
                 ;*                       a linker file (*.xcl) that is configured to place the
                 ;*                       entire program code into the Boot section of the Flash memory.
                 ;*                       Please refer to the application note document for more
                 ;*                       information.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;*****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;#include "Self_programming.h"
                 ;#include "spi_sdcard.h"
                 ;
                 ;#define SDBUF_SIZE  512
                 ;#define PAGES_PER_SDBUF (SDBUF_SIZE/PAGESIZE)
                 ;
                 ;//#define DEBUGLED
                 ;//#define DEBUG_ERRSD
                 ;//#define DEBUG_LCD
                 ;
                 ;#ifdef DEBUG_LCD
                 ;
                 ;/* printf */
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;/* string functions */
                 ;#include <string.h>
                 ;#include <alcd.h>
                 ;
                 ;#endif
                 ;
                 ;unsigned char result[5], sdBuf[SDBUF_SIZE], testBuf[PAGESIZE], token, SectorsPerCluster, pagesCnt;
                 ;unsigned long appStartAdr,adr,SectorsPerFat,fat_begin_lba;
                 ;unsigned long cluster_begin_lba,root_dir_first_cluster,fat_file_adr,fat_file_next_adr,filesize,readbytes;
                 ;unsigned int appPages,bytesChecksum,checksumCnt;
                 ;unsigned int Number_of_Reserved_Sectors;
                 ;
                 ;//(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
                 ;//(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FA ...
                 ;//(unsigned char)sectors_per_cluster = BPB_SecPerClus;
                 ;//(unsigned long)root_dir_first_cluster = BPB_RootClus;
                 ;//void testWrite();
                 ;
                 ;#ifdef DEBUG_ERRSD
                 ;void errorSD(unsigned char err);
                 ;#endif
                 ;#ifdef DEBUG_LCD
                 ;lcd_printhex(unsigned long num32, char size);
                 ;char cnum[10];
                 ;#endif
                 ;
                 ;//function prototypes
                 ;unsigned char fat_init();//0=sucess, 1,2,3 errors
                 ;unsigned char dir_open(const char *dirname); //0=sucess, 4 error
                 ;unsigned char file_open_update(const char *filename); //0=sucess, 5,6 errors
                 ;unsigned long buf2num(unsigned char *buf,unsigned char len);
                 ;unsigned char compbuf(const unsigned char *src,unsigned char *dest);
                 ;void (*app_pointer)(void) = (void(*)(void))0x0000;
                 ;
                 ;
                 ;
                 ;void main( void ){
                 ; 0002 0052 void main( void ){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0002 0053   unsigned int i,j,k;
                 ; 0002 0054   unsigned char rollnum;
                 ; 0002 0055   unsigned char rollbuf[11];
                 ; 0002 0056 /* globally enable interrupts */
                 ; 0002 0057 #asm("sei")
00f1af 972c      	SBIW R28,12
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                 ;	rollnum -> Y+11
                 ;	rollbuf -> Y+0
00f1b0 9478      	sei
                 ; 0002 0058 #ifdef DEBUG_LCD
                 ; 0002 0059     DDRC.0=1;
                 ; 0002 005A     PORTC.0=1;
                 ; 0002 005B     /* initialize the LCD for 2 lines & 16 columns */
                 ; 0002 005C     lcd_init(16);
                 ; 0002 005D     /* switch to writing in Display RAM */
                 ; 0002 005E     lcd_gotoxy(0,0);
                 ; 0002 005F     lcd_clear();
                 ; 0002 0060     lcd_putsf("BootSdTest.");
                 ; 0002 0061     lcd_gotoxy(0,1);
                 ; 0002 0062     lcd_putsf("0");
                 ; 0002 0063     delay_ms(500);
                 ; 0002 0064     //while(1);
                 ; 0002 0065 #endif
                 ; 0002 0066 #ifdef DEBUGLED
                 ; 0002 0067   DDRC=0xFF;
                 ; 0002 0068   PORTC=0xFF;
                 ; 0002 0069     //do
                 ; 0002 006A     {
                 ; 0002 006B       PORTC.0=0;
                 ; 0002 006C       PORTC.1=1;
                 ; 0002 006D       delay_ms(500);
                 ; 0002 006E       PORTC.1=0;
                 ; 0002 006F       PORTC.0=1;
                 ; 0002 0070       delay_ms(500);
                 ; 0002 0071       PORTC=0xFF;
                 ; 0002 0072     }
                 ; 0002 0073     //while(1);
                 ; 0002 0074 #endif
                 ; 0002 0075     //fat init function
                 ; 0002 0076     //init SD
                 ; 0002 0077     fat_init();
00f1b1 d1b6      	RCALL _fat_init
                 ; 0002 0078 
                 ; 0002 0079 
                 ; 0002 007A     //dir open function
                 ; 0002 007B   dir_open("0");
                +
00f1b2 e0a0     +LDI R26 , LOW ( _0x40003 + ( 0 ) )
00f1b3 e0b9     +LDI R27 , HIGH ( _0x40003 + ( 0 ) )
                 	__POINTW2MN _0x40003,0
00f1b4 d214      	RCALL _dir_open
                 ; 0002 007C 
                 ; 0002 007D 
                 ; 0002 007E   //fat_file_adr is hold the files records cluster in found dir
                 ; 0002 007F   //file open func. read first cluster where data about filenames in dir
                 ; 0002 0080   file_open_update("UPDATE");
                +
00f1b5 e0a2     +LDI R26 , LOW ( _0x40003 + ( 2 ) )
00f1b6 e0b9     +LDI R27 , HIGH ( _0x40003 + ( 2 ) )
                 	__POINTW2MN _0x40003,2
00f1b7 d252      	RCALL _file_open_update
                 ; 0002 0081 
                 ; 0002 0082 
                 ; 0002 0083 
                 ; 0002 0084   //check FAT for chain of clusters to read
                 ; 0002 0085   readbytes=0;
00f1b8 e0e0      	LDI  R30,LOW(0)
00f1b9 93e0 0b39 	STS  _readbytes,R30
00f1bb 93e0 0b3a 	STS  _readbytes+1,R30
00f1bd 93e0 0b3b 	STS  _readbytes+2,R30
00f1bf 93e0 0b3c 	STS  _readbytes+3,R30
                 ; 0002 0086   while(fat_file_adr != 0x0FFFFFFFUL)
                 _0x40004:
00f1c1 940e f60c 	CALL SUBOPT_0x6
00f1c3 940e f615 	CALL SUBOPT_0x7
00f1c5 f409      	BRNE PC+2
00f1c6 c15f      	RJMP _0x40006
                 ; 0002 0087   {
                 ; 0002 0088     //read where next cluster from FAT, check that not EOF
                 ; 0002 0089     //if((result[0]=SD_readSingleBlock(fat_begin_lba, sdBuf, &token))!=SD_SUCCESS){
                 ; 0002 008A 
                 ; 0002 008B     if((result[0]=SD_readSingleBlock(fat_begin_lba+((fat_file_adr*4)/512), sdBuf, &token))!=SD_SUCCESS){
00f1c7 940e f61d 	CALL SUBOPT_0x8
00f1c9 940e f764 	CALL __LSLD1
00f1cb 940e f764 	CALL __LSLD1
00f1cd 01df      	MOVW R26,R30
00f1ce 01cb      	MOVW R24,R22
                +
00f1cf e0e0     +LDI R30 , LOW ( 0x200 )
00f1d0 e0f2     +LDI R31 , HIGH ( 0x200 )
00f1d1 e060     +LDI R22 , BYTE3 ( 0x200 )
00f1d2 e070     +LDI R23 , BYTE4 ( 0x200 )
                 	__GETD1N 0x200
00f1d3 940e f7ab 	CALL __DIVD21U
00f1d5 940e f626 	CALL SUBOPT_0x9
00f1d7 940e f631 	CALL SUBOPT_0xA
00f1d9 30e0      	CPI  R30,0
00f1da f009      	BREQ _0x40007
                 ; 0002 008C     #ifdef DEBUG_ERRSD
                 ; 0002 008D         errorSD(7);
                 ; 0002 008E     #endif
                 ; 0002 008F         while(1);//do watchdog reset on error
                 _0x40008:
00f1db cfff      	RJMP _0x40008
                 ; 0002 0090     }
                 ; 0002 0091     //next cluster address, of file data, read from current cluster record.each record 4 bytes (32bits)
                 ; 0002 0092     //fat_file_next_adr=buf2num(&sdBuf[fat_file_adr*4],4);
                 ; 0002 0093     fat_file_next_adr=buf2num(&sdBuf[(fat_file_adr*4)%512],4);
                 _0x40007:
00f1dc 91a0 0b2d 	LDS  R26,_fat_file_adr
00f1de 91b0 0b2e 	LDS  R27,_fat_file_adr+1
00f1e0 e0e4      	LDI  R30,LOW(4)
00f1e1 940e f7a0 	CALL __MULB1W2U
00f1e3 70f1      	ANDI R31,HIGH(0x1FF)
00f1e4 5ee7      	SUBI R30,LOW(-_sdBuf)
00f1e5 4ff6      	SBCI R31,HIGH(-_sdBuf)
00f1e6 940e f63d 	CALL SUBOPT_0xB
00f1e8 93e0 0b31 	STS  _fat_file_next_adr,R30
00f1ea 93f0 0b32 	STS  _fat_file_next_adr+1,R31
00f1ec 9360 0b33 	STS  _fat_file_next_adr+2,R22
00f1ee 9370 0b34 	STS  _fat_file_next_adr+3,R23
                 ; 0002 0094     #ifdef DEBUG_LCD
                 ; 0002 0095       lcd_clear();
                 ; 0002 0096       lcd_putsf("beglba");
                 ; 0002 0097       lcd_printhex(fat_begin_lba,sizeof(fat_begin_lba));
                 ; 0002 0098       delay_ms(1000);
                 ; 0002 0099       lcd_clear();
                 ; 0002 009A       lcd_putsf("curcls");
                 ; 0002 009B       lcd_printhex(fat_file_adr,sizeof(fat_file_adr));
                 ; 0002 009C       lcd_gotoxy(0,1);
                 ; 0002 009D       lcd_putsf("nxtcls");
                 ; 0002 009E       lcd_printhex(fat_file_next_adr,sizeof(fat_file_next_adr));
                 ; 0002 009F       delay_ms(1000);
                 ; 0002 00A0     #endif
                 ; 0002 00A1     adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
00f1f0 940e f642 	CALL SUBOPT_0xC
                 ; 0002 00A2     for(i=0;i<SectorsPerCluster;i++)
                 _0x4000C:
00f1f2 940e f664 	CALL SUBOPT_0xD
00f1f4 f008      	BRLO PC+2
00f1f5 c125      	RJMP _0x4000D
                 ; 0002 00A3     {
                 ; 0002 00A4         //read data from next sector of file cluster
                 ; 0002 00A5         if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00f1f6 940e f66a 	CALL SUBOPT_0xE
                 ; 0002 00A6         #ifdef DEBUG_ERRSD
                 ; 0002 00A7             errorSD(8);
                 ; 0002 00A8         #endif
                 ; 0002 00A9         }
                 ; 0002 00AA         #ifdef DEBUG_LCD
                 ; 0002 00AB           lcd_clear();
                 ; 0002 00AC           lcd_putsf("sector ");
                 ; 0002 00AD           lcd_printhex(i,sizeof(i));
                 ; 0002 00AE           //delay_ms(500);
                 ; 0002 00AF           //if(readbytes==2048){
                 ; 0002 00B0           lcd_gotoxy(0,1);
                 ; 0002 00B1           lcd_putsf("data0 ");
                 ; 0002 00B2           lcd_printhex(sdBuf[0],sizeof(sdBuf[0]));
                 ; 0002 00B3           delay_ms(1000);
                 ; 0002 00B4         //}
                 ; 0002 00B5         #endif
                 ; 0002 00B6         //address 2000 = start adr flash app 3 bytes, flash pages 2 bytes, checksum 2 bytes
                 ; 0002 00B7         //app bytes starts from 2048, roll 0x88
                 ; 0002 00B8         if(readbytes<512){
00f1f8 940e f673 	CALL SUBOPT_0xF
                +
00f1fa 30a0     +CPI R26 , LOW ( 0x200 )
00f1fb e0e2     +LDI R30 , HIGH ( 0x200 )
00f1fc 07be     +CPC R27 , R30
00f1fd e0e0     +LDI R30 , BYTE3 ( 0x200 )
00f1fe 078e     +CPC R24 , R30
00f1ff e0e0     +LDI R30 , BYTE4 ( 0x200 )
00f200 079e     +CPC R25 , R30
                 	__CPD2N 0x200
00f201 f5e0      	BRSH _0x4000F
                 ; 0002 00B9             //j=0x99;
                 ; 0002 00BA             for(j=0;j<256;j++){//find roll  0x00...0xFF
                +
00f202 e020     +LDI R18 , LOW ( 0 )
00f203 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40011:
                +
00f204 3020     +CPI R18 , LOW ( 256 )
00f205 e0e1     +LDI R30 , HIGH ( 256 )
00f206 073e     +CPC R19 , R30
                 	__CPWRN 18,19,256
00f207 f5b0      	BRSH _0x40012
                 ; 0002 00BB                if(j>0){
00f208 2400      	CLR  R0
00f209 1602      	CP   R0,R18
00f20a 0603      	CPC  R0,R19
00f20b f508      	BRSH _0x40013
                 ; 0002 00BC                    for(k=0;k<10;k++){//[settings]
                +
00f20c e040     +LDI R20 , LOW ( 0 )
00f20d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x40015:
                +
00f20e 304a     +CPI R20 , LOW ( 10 )
00f20f e0e0     +LDI R30 , HIGH ( 10 )
00f210 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
00f211 f4d8      	BRSH _0x40016
                 ; 0002 00BD                         rollbuf[k]=(sdBuf[k]<<1)|(sdBuf[k]>>7);  //ROL
00f212 01fa      	MOVW R30,R20
00f213 01de      	MOVW R26,R28
00f214 0fea      	ADD  R30,R26
00f215 1ffb      	ADC  R31,R27
00f216 01bf      	MOVW R22,R30
00f217 e1a9      	LDI  R26,LOW(_sdBuf)
00f218 e0b9      	LDI  R27,HIGH(_sdBuf)
00f219 0fa4      	ADD  R26,R20
00f21a 1fb5      	ADC  R27,R21
00f21b 91ec      	LD   R30,X
00f21c 0fee      	LSL  R30
00f21d 2e0e      	MOV  R0,R30
00f21e e1a9      	LDI  R26,LOW(_sdBuf)
00f21f e0b9      	LDI  R27,HIGH(_sdBuf)
00f220 0fa4      	ADD  R26,R20
00f221 1fb5      	ADC  R27,R21
00f222 940e f67c 	CALL SUBOPT_0x10
                 ; 0002 00BE                         rollbuf[k]^=j;  //XOR   j=roll
00f224 01de      	MOVW R26,R28
00f225 0fa4      	ADD  R26,R20
00f226 1fb5      	ADC  R27,R21
00f227 91ec      	LD   R30,X
00f228 27e2      	EOR  R30,R18
00f229 93ec      	ST   X,R30
                 ; 0002 00BF                    }
                +
00f22a 5f4f     +SUBI R20 , LOW ( - 1 )
00f22b 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00f22c cfe1      	RJMP _0x40015
                 _0x40016:
                 ; 0002 00C0                }
                 ; 0002 00C1                result[1]=compbuf("[settings]",&rollbuf[0]);
                 _0x40013:
                +
00f22d e0e9     +LDI R30 , LOW ( _0x40003 + ( 9 ) )
00f22e e0f9     +LDI R31 , HIGH ( _0x40003 + ( 9 ) )
                 	__POINTW1MN _0x40003,9
00f22f 93fa      	ST   -Y,R31
00f230 93ea      	ST   -Y,R30
00f231 01de      	MOVW R26,R28
00f232 9612      	ADIW R26,2
00f233 940e f684 	CALL SUBOPT_0x11
                 ; 0002 00C2                if(result[1]!=0){
                +
00f235 91e0 0915+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00f237 30e0      	CPI  R30,0
00f238 f011      	BREQ _0x40017
                 ; 0002 00C3                     rollnum=j;
                +
00f239 872b     +STD Y + 11 , R18
                 	__PUTBSR 18,11
                 ; 0002 00C4                     #ifdef DEBUG_LCD
                 ; 0002 00C5                       lcd_clear();
                 ; 0002 00C6                       lcd_putsf("roll ");
                 ; 0002 00C7                       lcd_printhex(rollnum,sizeof(rollnum));
                 ; 0002 00C8                       delay_ms(1000);
                 ; 0002 00C9                     #endif
                 ; 0002 00CA                     break;
00f23a c003      	RJMP _0x40012
                 ; 0002 00CB                }
                 ; 0002 00CC             }
                 _0x40017:
                +
00f23b 5f2f     +SUBI R18 , LOW ( - 1 )
00f23c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f23d cfc6      	RJMP _0x40011
                 _0x40012:
                 ; 0002 00CD             if(result[1]==0){//roll didn't found
                 ; 0002 00CE                 #ifdef DEBUG_ERRSD
                 ; 0002 00CF                 errorSD(9);
                 ; 0002 00D0                 #endif
                 ; 0002 00D1                 //return;
                 ; 0002 00D2             }
                 ; 0002 00D3         }
                 ; 0002 00D4 
                 ; 0002 00D5         for(j=0;j<512;j++)
                 _0x4000F:
                +
00f23e e020     +LDI R18 , LOW ( 0 )
00f23f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4001A:
                +
00f240 3020     +CPI R18 , LOW ( 512 )
00f241 e0e2     +LDI R30 , HIGH ( 512 )
00f242 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00f243 f550      	BRSH _0x4001B
                 ; 0002 00D6         {
                 ; 0002 00D7             if(rollnum!=0){
00f244 85eb      	LDD  R30,Y+11
00f245 30e0      	CPI  R30,0
00f246 f0b1      	BREQ _0x4001C
                 ; 0002 00D8                 sdBuf[j]=(sdBuf[j]<<1)|(sdBuf[j]>>7);  //ROL
00f247 01f9      	MOVW R30,R18
00f248 5ee7      	SUBI R30,LOW(-_sdBuf)
00f249 4ff6      	SBCI R31,HIGH(-_sdBuf)
00f24a 01bf      	MOVW R22,R30
00f24b 940e f689 	CALL SUBOPT_0x12
00f24d 91ec      	LD   R30,X
00f24e 0fee      	LSL  R30
00f24f 2e0e      	MOV  R0,R30
00f250 940e f689 	CALL SUBOPT_0x12
00f252 940e f67c 	CALL SUBOPT_0x10
                 ; 0002 00D9                 sdBuf[j]^=rollnum;//0x88;  //XOR
00f254 01f9      	MOVW R30,R18
00f255 5ee7      	SUBI R30,LOW(-_sdBuf)
00f256 4ff6      	SBCI R31,HIGH(-_sdBuf)
00f257 010f      	MOVW R0,R30
00f258 81e0      	LD   R30,Z
00f259 85ab      	LDD  R26,Y+11
00f25a 27ea      	EOR  R30,R26
00f25b 01d0      	MOVW R26,R0
00f25c 93ec      	ST   X,R30
                 ; 0002 00DA             }
                 ; 0002 00DB             checksumCnt+=sdBuf[j];
                 _0x4001C:
00f25d 940e f689 	CALL SUBOPT_0x12
00f25f 91ec      	LD   R30,X
00f260 e0f0      	LDI  R31,0
00f261 91a0 0b3f 	LDS  R26,_checksumCnt
00f263 91b0 0b40 	LDS  R27,_checksumCnt+1
00f265 0fea      	ADD  R30,R26
00f266 1ffb      	ADC  R31,R27
00f267 93e0 0b3f 	STS  _checksumCnt,R30
00f269 93f0 0b40 	STS  _checksumCnt+1,R31
                 ; 0002 00DC         }
                +
00f26b 5f2f     +SUBI R18 , LOW ( - 1 )
00f26c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f26d cfd2      	RJMP _0x4001A
                 _0x4001B:
                 ; 0002 00DD         readbytes+=512;
00f26e 91e0 0b39 	LDS  R30,_readbytes
00f270 91f0 0b3a 	LDS  R31,_readbytes+1
00f272 9160 0b3b 	LDS  R22,_readbytes+2
00f274 9170 0b3c 	LDS  R23,_readbytes+3
                +
00f276 50e0     +SUBI R30 , LOW ( - 512 )
00f277 4ffe     +SBCI R31 , HIGH ( - 512 )
00f278 4f6f     +SBCI R22 , BYTE3 ( - 512 )
00f279 4f7f     +SBCI R23 , BYTE4 ( - 512 )
                 	__ADDD1N 512
00f27a 93e0 0b39 	STS  _readbytes,R30
00f27c 93f0 0b3a 	STS  _readbytes+1,R31
00f27e 9360 0b3b 	STS  _readbytes+2,R22
00f280 9370 0b3c 	STS  _readbytes+3,R23
                 ; 0002 00DE         //read app data
                 ; 0002 00DF         if(readbytes>2048)
00f282 940e f673 	CALL SUBOPT_0xF
                +
00f284 30a1     +CPI R26 , LOW ( 0x801 )
00f285 e0e8     +LDI R30 , HIGH ( 0x801 )
00f286 07be     +CPC R27 , R30
00f287 e0e0     +LDI R30 , BYTE3 ( 0x801 )
00f288 078e     +CPC R24 , R30
00f289 e0e0     +LDI R30 , BYTE4 ( 0x801 )
00f28a 079e     +CPC R25 , R30
                 	__CPD2N 0x801
00f28b f168      	BRLO _0x4001D
                 ; 0002 00E0         {
                 ; 0002 00E1            for(pagesCnt=0;pagesCnt<PAGES_PER_SDBUF;pagesCnt++)
00f28c 24bb      	CLR  R11
                 _0x4001F:
00f28d e0e2      	LDI  R30,LOW(2)
00f28e 16be      	CP   R11,R30
00f28f f540      	BRSH _0x40020
                 ; 0002 00E2            {
                 ; 0002 00E3                #ifdef DEBUG_LCD
                 ; 0002 00E4                   lcd_clear();
                 ; 0002 00E5                   lcd_putsf("appage ");
                 ; 0002 00E6                   lcd_printhex(appPages,sizeof(appPages));
                 ; 0002 00E7                   delay_ms(1000);
                 ; 0002 00E8                   lcd_clear();
                 ; 0002 00E9                   lcd_putsf("apstrt ");
                 ; 0002 00EA                   lcd_printhex(appStartAdr,sizeof(appStartAdr));
                 ; 0002 00EB                   delay_ms(1000);
                 ; 0002 00EC                 #endif
                 ; 0002 00ED                #asm("wdr")
00f290 95a8      	wdr
                 ; 0002 00EE                if(WriteFlashPage(appStartAdr, &sdBuf[pagesCnt*PAGESIZE])==0)
00f291 940e f68e 	CALL SUBOPT_0x13
00f293 940e f7f7 	CALL __PUTPARD1
00f295 2dab      	MOV  R26,R11
00f296 e0b0      	LDI  R27,0
00f297 e0e0      	LDI  R30,LOW(256)
00f298 e0f1      	LDI  R31,HIGH(256)
00f299 940e f7a6 	CALL __MULW12
00f29b 5ee7      	SUBI R30,LOW(-_sdBuf)
00f29c 4ff6      	SBCI R31,HIGH(-_sdBuf)
00f29d 01df      	MOVW R26,R30
00f29e 940e f099 	CALL _WriteFlashPage
00f2a0 30e0      	CPI  R30,0
00f2a1 f409      	BRNE _0x40021
                 ; 0002 00EF                {
                 ; 0002 00F0                     //after error during flash write page. wait for watchdog to reset
                 ; 0002 00F1                     #ifdef DEBUGLED
                 ; 0002 00F2                     do
                 ; 0002 00F3                     {
                 ; 0002 00F4                       PORTC.6=0;
                 ; 0002 00F5                       delay_ms(500);
                 ; 0002 00F6                       PORTC.6=1;
                 ; 0002 00F7                       delay_ms(500);
                 ; 0002 00F8                     }
                 ; 0002 00F9                     #endif
                 ; 0002 00FA                     while(1);
                 _0x40022:
00f2a2 cfff      	RJMP _0x40022
                 ; 0002 00FB                }
                 ; 0002 00FC                appStartAdr+=PAGESIZE;
                 _0x40021:
00f2a3 940e f68e 	CALL SUBOPT_0x13
                +
00f2a5 50e0     +SUBI R30 , LOW ( - 256 )
00f2a6 4fff     +SBCI R31 , HIGH ( - 256 )
00f2a7 4f6f     +SBCI R22 , BYTE3 ( - 256 )
00f2a8 4f7f     +SBCI R23 , BYTE4 ( - 256 )
                 	__ADDD1N 256
00f2a9 940e f697 	CALL SUBOPT_0x14
                 ; 0002 00FD                appPages--;
00f2ab 01f6      	MOVW R30,R12
00f2ac 9731      	SBIW R30,1
00f2ad 016f      	MOVW R12,R30
                 ; 0002 00FE                if(appPages==0)
00f2ae 2c0c      	MOV  R0,R12
00f2af 280d      	OR   R0,R13
00f2b0 f429      	BRNE _0x40025
                 ; 0002 00FF                {
                 ; 0002 0100                     #ifdef DEBUG_LCD
                 ; 0002 0101                       lcd_clear();
                 ; 0002 0102                       lcd_putsf("jump to app");
                 ; 0002 0103                       delay_ms(2000);
                 ; 0002 0104                     #endif
                 ; 0002 0105                     app_pointer();//go to app address 0
                +
00f2b1 91e0 0b43+LDS R30 , _app_pointer + ( 0 )
00f2b3 91f0 0b44+LDS R31 , _app_pointer + ( 0 ) + 1
00f2b5 9509     +ICALL
                 	__CALL1MN _app_pointer,0
                 ; 0002 0106                     /*
                 ; 0002 0107                     do
                 ; 0002 0108                     {
                 ; 0002 0109                       #ifdef DEBUGLED
                 ; 0002 010A                       PORTC.5=0;
                 ; 0002 010B                       delay_ms(500);
                 ; 0002 010C                       PORTC.5=1;
                 ; 0002 010D                       delay_ms(500);
                 ; 0002 010E                       #endif
                 ; 0002 010F                     }while(1);
                 ; 0002 0110                     */
                 ; 0002 0111                }
                 ; 0002 0112            }
                 _0x40025:
00f2b6 94b3      	INC  R11
00f2b7 cfd5      	RJMP _0x4001F
                 _0x40020:
                 ; 0002 0113         }
                 ; 0002 0114         //read app start adr, num of pages, checksum
                 ; 0002 0115         else if(readbytes>=2000){//Offset=512-48=464
00f2b8 c045      	RJMP _0x40026
                 _0x4001D:
00f2b9 940e f673 	CALL SUBOPT_0xF
                +
00f2bb 3da0     +CPI R26 , LOW ( 0x7D0 )
00f2bc e0e7     +LDI R30 , HIGH ( 0x7D0 )
00f2bd 07be     +CPC R27 , R30
00f2be e0e0     +LDI R30 , BYTE3 ( 0x7D0 )
00f2bf 078e     +CPC R24 , R30
00f2c0 e0e0     +LDI R30 , BYTE4 ( 0x7D0 )
00f2c1 079e     +CPC R25 , R30
                 	__CPD2N 0x7D0
00f2c2 f1d8      	BRLO _0x40027
                 ; 0002 0116            appStartAdr=(unsigned long)sdBuf[464]<<16;
                +
00f2c3 91e0 0ae9+LDS R30 , _sdBuf + ( 464 )
                 	__GETB1MN _sdBuf,464
00f2c5 940e f6a0 	CALL SUBOPT_0x15
00f2c7 940e f697 	CALL SUBOPT_0x14
                 ; 0002 0117            appStartAdr|=(unsigned long)sdBuf[465]<<8;
                +
00f2c9 91e0 0aea+LDS R30 , _sdBuf + ( 465 )
                 	__GETB1MN _sdBuf,465
00f2cb e0f0      	LDI  R31,0
00f2cc 940e f773 	CALL __CWD1
00f2ce 01df      	MOVW R26,R30
00f2cf 01cb      	MOVW R24,R22
00f2d0 e0e8      	LDI  R30,LOW(8)
00f2d1 940e f74c 	CALL __LSLD12
00f2d3 940e f6a6 	CALL SUBOPT_0x16
                 ; 0002 0118            appStartAdr|=(unsigned long)sdBuf[466];
                +
00f2d5 91e0 0aeb+LDS R30 , _sdBuf + ( 466 )
                 	__GETB1MN _sdBuf,466
00f2d7 e0f0      	LDI  R31,0
00f2d8 940e f773 	CALL __CWD1
00f2da 940e f6a6 	CALL SUBOPT_0x16
                 ; 0002 0119            appPages=(unsigned int)sdBuf[467]<<8;
                +
00f2dc 91f0 0aec+LDS R31 , _sdBuf + ( 467 )
                 	__GETBRMN 31,_sdBuf,467
00f2de e0e0      	LDI  R30,LOW(0)
00f2df 016f      	MOVW R12,R30
                 ; 0002 011A            appPages|=(unsigned int)sdBuf[468];
                +
00f2e0 91e0 0aed+LDS R30 , _sdBuf + ( 468 )
                 	__GETB1MN _sdBuf,468
00f2e2 e0f0      	LDI  R31,0
                +
00f2e3 2ace     +OR R12 , R30
00f2e4 2adf     +OR R13 , R31
                 	__ORWRR 12,13,30,31
                 ; 0002 011B            bytesChecksum=(unsigned int)sdBuf[469]<<8;
                +
00f2e5 91f0 0aee+LDS R31 , _sdBuf + ( 469 )
                 	__GETBRMN 31,_sdBuf,469
00f2e7 e0e0      	LDI  R30,LOW(0)
00f2e8 93e0 0b3d 	STS  _bytesChecksum,R30
00f2ea 93f0 0b3e 	STS  _bytesChecksum+1,R31
                 ; 0002 011C            bytesChecksum|=(unsigned int)sdBuf[470];
                +
00f2ec 91e0 0aef+LDS R30 , _sdBuf + ( 470 )
                 	__GETB1MN _sdBuf,470
00f2ee e0f0      	LDI  R31,0
00f2ef 91a0 0b3d 	LDS  R26,_bytesChecksum
00f2f1 91b0 0b3e 	LDS  R27,_bytesChecksum+1
00f2f3 2bea      	OR   R30,R26
00f2f4 2bfb      	OR   R31,R27
00f2f5 93e0 0b3d 	STS  _bytesChecksum,R30
00f2f7 93f0 0b3e 	STS  _bytesChecksum+1,R31
                 ; 0002 011D            checksumCnt=0;
00f2f9 e0e0      	LDI  R30,LOW(0)
00f2fa 93e0 0b3f 	STS  _checksumCnt,R30
00f2fc 93e0 0b40 	STS  _checksumCnt+1,R30
                 ; 0002 011E            #ifdef DEBUG_LCD
                 ; 0002 011F               lcd_clear();
                 ; 0002 0120               lcd_putsf("appags ");
                 ; 0002 0121               lcd_printhex(appPages,sizeof(appPages));
                 ; 0002 0122               delay_ms(500);
                 ; 0002 0123             #endif
                 ; 0002 0124         }
                 ; 0002 0125         if(fat_file_next_adr == 0x0FFFFFFFUL){
                 _0x40027:
                 _0x40026:
00f2fe 91a0 0b31 	LDS  R26,_fat_file_next_adr
00f300 91b0 0b32 	LDS  R27,_fat_file_next_adr+1
00f302 9180 0b33 	LDS  R24,_fat_file_next_adr+2
00f304 9190 0b34 	LDS  R25,_fat_file_next_adr+3
00f306 940e f615 	CALL SUBOPT_0x7
00f308 f469      	BRNE _0x40028
                 ; 0002 0126 
                 ; 0002 0127 
                 ; 0002 0128             if(readbytes >= filesize){
00f309 91e0 0b35 	LDS  R30,_filesize
00f30b 91f0 0b36 	LDS  R31,_filesize+1
00f30d 9160 0b37 	LDS  R22,_filesize+2
00f30f 9170 0b38 	LDS  R23,_filesize+3
00f311 940e f673 	CALL SUBOPT_0xF
00f313 940e f805 	CALL __CPD21
00f315 f428      	BRSH _0x4000D
                 ; 0002 0129                 break;
                 ; 0002 012A             }
                 ; 0002 012B             else
                 ; 0002 012C             {
                 ; 0002 012D                 /*
                 ; 0002 012E                 if(  WriteFlashPage(0x1EF00, sdBuf)){//;     // Writes testbuffer1 to Flash page 2
                 ; 0002 012F                     #ifdef DEBUGLED
                 ; 0002 0130                     PORTC.5=0;
                 ; 0002 0131                     #endif
                 ; 0002 0132                 }                                          // Function returns TRUE
                 ; 0002 0133                 if(  ReadFlashPage (0x1EF00, testBuf)){//;      // Reads back Flash page 2 to TestBuffer2
                 ; 0002 0134                     #ifdef DEBUGLED
                 ; 0002 0135                     PORTC.6=0;
                 ; 0002 0136                     #endif
                 ; 0002 0137                 }
                 ; 0002 0138                 */
                 ; 0002 0139             }
                 ; 0002 013A 
                 ; 0002 013B         }
                 ; 0002 013C         adr++;
                 _0x40028:
00f316 940e f6b1 	CALL SUBOPT_0x17
                 ; 0002 013D     }
                +
00f318 5f0f     +SUBI R16 , LOW ( - 1 )
00f319 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00f31a ced7      	RJMP _0x4000C
                 _0x4000D:
                 ; 0002 013E     fat_file_adr = fat_file_next_adr;
00f31b 91e0 0b31 	LDS  R30,_fat_file_next_adr
00f31d 91f0 0b32 	LDS  R31,_fat_file_next_adr+1
00f31f 9160 0b33 	LDS  R22,_fat_file_next_adr+2
00f321 9170 0b34 	LDS  R23,_fat_file_next_adr+3
00f323 940e f6bc 	CALL SUBOPT_0x18
                 ; 0002 013F   }
00f325 ce9b      	RJMP _0x40004
                 _0x40006:
                 ; 0002 0140   while(1);
                 _0x4002B:
00f326 cfff      	RJMP _0x4002B
                 ; 0002 0141 }
                 _0x4002E:
00f327 cfff      	RJMP _0x4002E
                 ; .FEND
                 
                 	.DSEG
                 _0x40003:
000900           	.BYTE 0x14
                 ;
                 ;unsigned char compbuf(const unsigned char *src,unsigned char *dest)
                 ; 0002 0144 {
                 
                 	.CSEG
                 _compbuf:
                 ; .FSTART _compbuf
                 ; 0002 0145     while(*src)
00f328 93ba      	ST   -Y,R27
00f329 93aa      	ST   -Y,R26
                 ;	*src -> Y+2
                 ;	*dest -> Y+0
                 _0x4002F:
00f32a 81aa      	LDD  R26,Y+2
00f32b 81bb      	LDD  R27,Y+2+1
00f32c 91ec      	LD   R30,X
00f32d 30e0      	CPI  R30,0
00f32e f069      	BREQ _0x40031
                 ; 0002 0146     {
                 ; 0002 0147         if(*src++ != *dest++)
00f32f 900d      	LD   R0,X+
00f330 83aa      	STD  Y+2,R26
00f331 83bb      	STD  Y+2+1,R27
00f332 81a8      	LD   R26,Y
00f333 81b9      	LDD  R27,Y+1
00f334 91ed      	LD   R30,X+
00f335 83a8      	ST   Y,R26
00f336 83b9      	STD  Y+1,R27
00f337 15e0      	CP   R30,R0
00f338 f011      	BREQ _0x40032
                 ; 0002 0148             return 0;
00f339 e0e0      	LDI  R30,LOW(0)
00f33a c19a      	RJMP _0x200000A
                 ; 0002 0149         //src++;dest++;
                 ; 0002 014A         //len--;
                 ; 0002 014B     }
                 _0x40032:
00f33b cfee      	RJMP _0x4002F
                 _0x40031:
                 ; 0002 014C     return 1;
00f33c e0e1      	LDI  R30,LOW(1)
00f33d c197      	RJMP _0x200000A
                 ; 0002 014D }
                 ; .FEND
                 ;
                 ;#ifdef DEBUG_ERRSD
                 ;void errorSD(unsigned char err)
                 ;{
                 ;#ifdef DEBUGLED
                 ;    unsigned int repeat=10;
                 ;    do{
                 ;       PORTC &= ~(1<<err);
                 ;       delay_ms(500);
                 ;       PORTC = 0xFF;
                 ;       delay_ms(500);
                 ;    }
                 ;    while(repeat--);
                 ;#endif
                 ;#ifdef DEBUG_LCD
                 ;  char strnum[5];
                 ;    if(err>100){
                 ;       err=100;
                 ;    }
                 ;    itoa(err,strnum);
                 ;    lcd_gotoxy(0,0);
                 ;    lcd_putsf("SD ERROR: ");
                 ;    lcd_puts(strnum);
                 ;    while(1);
                 ;#else
                 ;    app_pointer();
                 ;#endif
                 ;    //while(1);
                 ;}
                 ;#endif
                 ;
                 ;//convert bytes buffer to 32bit UL value
                 ;unsigned long buf2num(unsigned char *buf,unsigned char len)
                 ; 0002 016F {
                 _buf2num:
                 ; .FSTART _buf2num
                 ; 0002 0170     unsigned long num=0;
                 ; 0002 0171     //unsigned char i;
                 ; 0002 0172     /*
                 ; 0002 0173     if(len>4){
                 ; 0002 0174        len=4;// 4bytes max 32bit UL
                 ; 0002 0175     }
                 ; 0002 0176     */
                 ; 0002 0177     for(;((len>0));len--)
00f33e 93aa      	ST   -Y,R26
00f33f 9724      	SBIW R28,4
00f340 e0e0      	LDI  R30,LOW(0)
00f341 83e8      	ST   Y,R30
00f342 83e9      	STD  Y+1,R30
00f343 83ea      	STD  Y+2,R30
00f344 83eb      	STD  Y+3,R30
                 ;	*buf -> Y+5
                 ;	len -> Y+4
                 ;	num -> Y+0
                 _0x40034:
00f345 81ac      	LDD  R26,Y+4
00f346 30a1      	CPI  R26,LOW(0x1)
00f347 f0e0      	BRLO _0x40035
                 ; 0002 0178     {
                 ; 0002 0179         num<<=8;
00f348 940e f609 	CALL SUBOPT_0x5
00f34a e0e8      	LDI  R30,LOW(8)
00f34b 940e f74c 	CALL __LSLD12
00f34d 940e f7f2 	CALL __PUTD1S0
                 ; 0002 017A         num|=buf[len-1];
00f34f 81ec      	LDD  R30,Y+4
00f350 e0f0      	LDI  R31,0
00f351 9731      	SBIW R30,1
00f352 81ad      	LDD  R26,Y+5
00f353 81be      	LDD  R27,Y+5+1
00f354 0fae      	ADD  R26,R30
00f355 1fbf      	ADC  R27,R31
00f356 91ec      	LD   R30,X
00f357 940e f609 	CALL SUBOPT_0x5
00f359 27ff      	CLR  R31
00f35a 2766      	CLR  R22
00f35b 2777      	CLR  R23
00f35c 940e f743 	CALL __ORD12
00f35e 940e f7f2 	CALL __PUTD1S0
                 ; 0002 017B     }
00f360 81ec      	LDD  R30,Y+4
00f361 50e1      	SUBI R30,LOW(1)
00f362 83ec      	STD  Y+4,R30
00f363 cfe1      	RJMP _0x40034
                 _0x40035:
                 ; 0002 017C     return num;
00f364 940e f7e8 	CALL __GETD1S0
00f366 9627      	ADIW R28,7
00f367 9508      	RET
                 ; 0002 017D }
                 ; .FEND
                 ;
                 ;
                 ;#ifdef DEBUG_LCD
                 ;lcd_printhex(unsigned long num32, char size){
                 ;    char i,nible;
                 ;    //num32>>=((4-size)*8);//0x12345678 >>24 -> 0x00000012
                 ;    //lcd_putchar(size+'0');
                 ;    for(i=1;i<=(size*2);i++){
                 ;        nible=((num32)>>(32-((4-size)*8)-((i)*4)))&0x0F;
                 ;        if(nible>9){
                 ;          nible-=0x0A;
                 ;          nible+='A';
                 ;        }
                 ;        else{
                 ;          nible+='0';
                 ;        }
                 ;        lcd_putchar(nible);
                 ;    }
                 ;}
                 ;#endif
                 ;
                 ;//fat32 sd initialization 0=sucess, 1,2,3 errors
                 ;unsigned char fat_init(){
                 ; 0002 0194 unsigned char fat_init(){
                 _fat_init:
                 ; .FSTART _fat_init
                 ; 0002 0195   if((result[0]=SD_init())!=SD_SUCCESS){
00f368 d1c4      	RCALL _SD_init
00f369 93e0 0914 	STS  _result,R30
00f36b 30e0      	CPI  R30,0
00f36c f011      	BREQ _0x40036
                 ; 0002 0196 #ifdef DEBUG_ERRSD
                 ; 0002 0197     errorSD(1);
                 ; 0002 0198 #endif
                 ; 0002 0199     return 1;
00f36d e0e1      	LDI  R30,LOW(1)
00f36e 9508      	RET
                 ; 0002 019A     //app_pointer();//jump to app 0 on error
                 ; 0002 019B   }
                 ; 0002 019C   #ifdef DEBUG_LCD
                 ; 0002 019D   lcd_putsf("1");
                 ; 0002 019E   delay_ms(500);
                 ; 0002 019F   #endif
                 ; 0002 01A0   // read MBR get FAT start sector
                 ; 0002 01A1   if((result[0]=SD_readSingleBlock(0, sdBuf, &token))!=SD_SUCCESS){
                 _0x40036:
00f36f 940e f5f3 	CALL SUBOPT_0x1
00f371 940e f6c5 	CALL SUBOPT_0x19
00f373 d1f7      	RCALL _SD_readSingleBlock
00f374 93e0 0914 	STS  _result,R30
00f376 30e0      	CPI  R30,0
00f377 f011      	BREQ _0x40037
                 ; 0002 01A2 #ifdef DEBUG_ERRSD
                 ; 0002 01A3     errorSD(2);
                 ; 0002 01A4 #endif
                 ; 0002 01A5     return 2;
00f378 e0e2      	LDI  R30,LOW(2)
00f379 9508      	RET
                 ; 0002 01A6     //app_pointer();//jump to app 0 on error
                 ; 0002 01A7   }
                 ; 0002 01A8   #ifdef DEBUG_LCD
                 ; 0002 01A9   lcd_putsf("2");
                 ; 0002 01AA   delay_ms(500);
                 ; 0002 01AB   #endif
                 ; 0002 01AC   adr=buf2num(&sdBuf[445+9],4);//FAT start sector. 1 sector = 512 bytes
                 _0x40037:
                +
00f37a edef     +LDI R30 , LOW ( _sdBuf + ( 454 ) )
00f37b e0fa     +LDI R31 , HIGH ( _sdBuf + ( 454 ) )
                 	__POINTW1MN _sdBuf,454
00f37c 940e f63d 	CALL SUBOPT_0xB
00f37e 940e f6cc 	CALL SUBOPT_0x1A
                 ; 0002 01AD 
                 ; 0002 01AE   //load and read FAT ID (1st) sector. Get FAT info. Secors per Cluster and etc..
                 ; 0002 01AF   if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00f380 940e f66a 	CALL SUBOPT_0xE
00f382 30e0      	CPI  R30,0
00f383 f011      	BREQ _0x40038
                 ; 0002 01B0     #ifdef DEBUG_ERRSD
                 ; 0002 01B1     errorSD(3);
                 ; 0002 01B2     #endif
                 ; 0002 01B3     return 3;
00f384 e0e3      	LDI  R30,LOW(3)
00f385 9508      	RET
                 ; 0002 01B4     //app_pointer();//jump to app 0 on error
                 ; 0002 01B5   }
                 ; 0002 01B6   #ifdef DEBUG_LCD
                 ; 0002 01B7   lcd_putsf("3");
                 ; 0002 01B8   delay_ms(500);
                 ; 0002 01B9   #endif
                 ; 0002 01BA   SectorsPerCluster=sdBuf[0x0D];// 8 sectors per cluster
                 _0x40038:
                +
00f386 9080 0926+LDS R8 , _sdBuf + ( 13 )
                 	__GETBRMN 8,_sdBuf,13
                 ; 0002 01BB   SectorsPerFat=buf2num(&sdBuf[0x24],4); // 0xF10 for test sdcard
                +
00f388 e3ed     +LDI R30 , LOW ( _sdBuf + ( 36 ) )
00f389 e0f9     +LDI R31 , HIGH ( _sdBuf + ( 36 ) )
                 	__POINTW1MN _sdBuf,36
00f38a 940e f63d 	CALL SUBOPT_0xB
00f38c 93e0 0b21 	STS  _SectorsPerFat,R30
00f38e 93f0 0b22 	STS  _SectorsPerFat+1,R31
00f390 9360 0b23 	STS  _SectorsPerFat+2,R22
00f392 9370 0b24 	STS  _SectorsPerFat+3,R23
                 ; 0002 01BC   Number_of_Reserved_Sectors=buf2num(&sdBuf[0x0E],2); // 0x20 usually
                +
00f394 e2e7     +LDI R30 , LOW ( _sdBuf + ( 14 ) )
00f395 e0f9     +LDI R31 , HIGH ( _sdBuf + ( 14 ) )
                 	__POINTW1MN _sdBuf,14
00f396 93fa      	ST   -Y,R31
00f397 93ea      	ST   -Y,R30
00f398 e0a2      	LDI  R26,LOW(2)
00f399 dfa4      	RCALL _buf2num
00f39a 93e0 0b41 	STS  _Number_of_Reserved_Sectors,R30
00f39c 93f0 0b42 	STS  _Number_of_Reserved_Sectors+1,R31
                 ; 0002 01BD   //read the FAT fils/directories info from Root Directory cluster (usually 2),Number_of_Reserved_Sectors (usually 0x20) ...
                 ; 0002 01BE   //(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
                 ; 0002 01BF   fat_begin_lba=adr+Number_of_Reserved_Sectors;//0x20;//first sector of FAT data
00f39e 91a0 0b1d 	LDS  R26,_adr
00f3a0 91b0 0b1e 	LDS  R27,_adr+1
00f3a2 9180 0b1f 	LDS  R24,_adr+2
00f3a4 9190 0b20 	LDS  R25,_adr+3
00f3a6 2766      	CLR  R22
00f3a7 2777      	CLR  R23
00f3a8 940e f73e 	CALL __ADDD12
00f3aa 93e0 0b25 	STS  _fat_begin_lba,R30
00f3ac 93f0 0b26 	STS  _fat_begin_lba+1,R31
00f3ae 9360 0b27 	STS  _fat_begin_lba+2,R22
00f3b0 9370 0b28 	STS  _fat_begin_lba+3,R23
                 ; 0002 01C0   //(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_ ...
                 ; 0002 01C1   //Number_of_FATs always 2. Offset 0x10 8bit
                 ; 0002 01C2   cluster_begin_lba=fat_begin_lba+(2*SectorsPerFat);//number of sector where data begin
00f3b2 91e0 0b21 	LDS  R30,_SectorsPerFat
00f3b4 91f0 0b22 	LDS  R31,_SectorsPerFat+1
00f3b6 9160 0b23 	LDS  R22,_SectorsPerFat+2
00f3b8 9170 0b24 	LDS  R23,_SectorsPerFat+3
00f3ba 940e f764 	CALL __LSLD1
00f3bc d269      	RCALL SUBOPT_0x9
00f3bd 93e0 0b29 	STS  _cluster_begin_lba,R30
00f3bf 93f0 0b2a 	STS  _cluster_begin_lba+1,R31
00f3c1 9360 0b2b 	STS  _cluster_begin_lba+2,R22
00f3c3 9370 0b2c 	STS  _cluster_begin_lba+3,R23
                 ; 0002 01C3   //read root dir (sector 2 but always offset 2 too then 0) to find folder 0 FAT reference. and find Flash.dat sector
                 ; 0002 01C4   //lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;
                 ; 0002 01C5   adr=cluster_begin_lba +(2-2)*SectorsPerCluster;
00f3c5 940e f6cc 	CALL SUBOPT_0x1A
                 ; 0002 01C6   //adr*=512UL;
                 ; 0002 01C7   return 0;
00f3c7 e0e0      	LDI  R30,LOW(0)
00f3c8 9508      	RET
                 ; 0002 01C8 }
                 ; .FEND
                 ;
                 ;//dir open function 0=sucess, 4 error
                 ;unsigned char dir_open(const char *dirname){
                 ; 0002 01CB unsigned char dir_open(const char *dirname){
                 _dir_open:
                 ; .FSTART _dir_open
                 ; 0002 01CC   unsigned int i,j;
                 ; 0002 01CD   result[1]=0;
00f3c9 d224      	RCALL SUBOPT_0x0
                 ;	*dirname -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
00f3ca e0e0      	LDI  R30,LOW(0)
                +
00f3cb 93e0 0915+STS _result + ( 1 ) , R30
                 	__PUTB1MN _result,1
                 ; 0002 01CE   for(i=0;i<SectorsPerCluster;i++)
                +
00f3cd e000     +LDI R16 , LOW ( 0 )
00f3ce e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4003A:
00f3cf 940e f664 	CALL SUBOPT_0xD
00f3d1 f560      	BRSH _0x4003B
                 ; 0002 01CF   {
                 ; 0002 01D0 
                 ; 0002 01D1       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00f3d2 940e f66a 	CALL SUBOPT_0xE
00f3d4 30e0      	CPI  R30,0
00f3d5 f021      	BREQ _0x4003C
                 ; 0002 01D2     #ifdef DEBUG_ERRSD
                 ; 0002 01D3         errorSD(4);
                 ; 0002 01D4     #endif
                 ; 0002 01D5         return 4;
00f3d6 e0e4      	LDI  R30,LOW(4)
00f3d7 940e f813 	CALL __LOADLOCR4
00f3d9 c18f      	RJMP _0x2000004
                 ; 0002 01D6         //app_pointer();//jump to app 0 on error
                 ; 0002 01D7       }
                 ; 0002 01D8       for(j=0;j<(16);j++)//search 16*32bit records in 512bytes sector
                 _0x4003C:
                +
00f3da e020     +LDI R18 , LOW ( 0 )
00f3db e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4003E:
                +
00f3dc 3120     +CPI R18 , LOW ( 16 )
00f3dd e0e0     +LDI R30 , HIGH ( 16 )
00f3de 073e     +CPC R19 , R30
                 	__CPWRN 18,19,16
00f3df f438      	BRSH _0x4003F
                 ; 0002 01D9       {
                 ; 0002 01DA            //if((result[1]=compbuf("0          ",&sdBuf[j*32]))!=0)
                 ; 0002 01DB            if((result[1]=compbuf(dirname,&sdBuf[j*32]))!=0)
00f3e0 940e f6d5 	CALL SUBOPT_0x1B
00f3e2 30e0      	CPI  R30,0
00f3e3 f419      	BRNE _0x4003F
                 ; 0002 01DC            {
                 ; 0002 01DD                 break;//dir 0 is found
                 ; 0002 01DE            }
                 ; 0002 01DF       }
                +
00f3e4 5f2f     +SUBI R18 , LOW ( - 1 )
00f3e5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f3e6 cff5      	RJMP _0x4003E
                 _0x4003F:
                 ; 0002 01E0       if(result[1]!=0)
                +
00f3e7 91e0 0915+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00f3e9 30e0      	CPI  R30,0
00f3ea f071      	BREQ _0x40041
                 ; 0002 01E1       {
                 ; 0002 01E2         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
00f3eb 940e f6e2 	CALL SUBOPT_0x1C
                +
00f3ed 5de3     +SUBI R30 , LOW ( - _sdBuf - ( 20 ) )
00f3ee 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 20 ) )
                 	__ADDW1MN _sdBuf,20
00f3ef 81e0      	LD   R30,Z
00f3f0 940e f6a0 	CALL SUBOPT_0x15
00f3f2 940e f6e8 	CALL SUBOPT_0x1D
                 ; 0002 01E3         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
00f3f4 940e f6ea 	CALL SUBOPT_0x1E
00f3f6 940e f6bc 	CALL SUBOPT_0x18
                 ; 0002 01E4         break;
00f3f8 c005      	RJMP _0x4003B
                 ; 0002 01E5       }
                 ; 0002 01E6       else
                 _0x40041:
                 ; 0002 01E7         adr++;
00f3f9 940e f6b1 	CALL SUBOPT_0x17
                 ; 0002 01E8   }
                +
00f3fb 5f0f     +SUBI R16 , LOW ( - 1 )
00f3fc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00f3fd cfd1      	RJMP _0x4003A
                 _0x4003B:
                 ; 0002 01E9   if(result[1]==0){
                +
00f3fe 91e0 0915+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00f400 30e0      	CPI  R30,0
00f401 f421      	BRNE _0x40043
                 ; 0002 01EA      //app_pointer();//jump to app on error dir not found
                 ; 0002 01EB      return 5; //jump to app on error dir not found
00f402 e0e5      	LDI  R30,LOW(5)
00f403 940e f813 	CALL __LOADLOCR4
00f405 c163      	RJMP _0x2000004
                 ; 0002 01EC   }
                 ; 0002 01ED   #ifdef DEBUG_LCD
                 ; 0002 01EE   lcd_putsf("4");//dir found ok
                 ; 0002 01EF   delay_ms(500);
                 ; 0002 01F0   #endif
                 ; 0002 01F1   return 0;
                 _0x40043:
00f406 e0e0      	LDI  R30,LOW(0)
00f407 940e f813 	CALL __LOADLOCR4
00f409 c15f      	RJMP _0x2000004
                 ; 0002 01F2 }
                 ; .FEND
                 ;
                 ;//file open function 0=sucess, 5,6 errors
                 ;unsigned char file_open_update(const char *filename){
                 ; 0002 01F5 unsigned char file_open_update(const char *filename){
                 _file_open_update:
                 ; .FSTART _file_open_update
                 ; 0002 01F6   unsigned int i,j;
                 ; 0002 01F7   adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
00f40a d1e3      	RCALL SUBOPT_0x0
                 ;	*filename -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
00f40b d236      	RCALL SUBOPT_0xC
                 ; 0002 01F8   for(i=0;i<SectorsPerCluster;i++)
                 _0x40045:
00f40c d257      	RCALL SUBOPT_0xD
00f40d f5b8      	BRSH _0x40046
                 ; 0002 01F9   {
                 ; 0002 01FA 
                 ; 0002 01FB       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
00f40e d25b      	RCALL SUBOPT_0xE
00f40f 30e0      	CPI  R30,0
00f410 f021      	BREQ _0x40047
                 ; 0002 01FC     #ifdef DEBUG_ERRSD
                 ; 0002 01FD         errorSD(6);
                 ; 0002 01FE     #endif
                 ; 0002 01FF         return 6;
00f411 e0e6      	LDI  R30,LOW(6)
00f412 940e f813 	CALL __LOADLOCR4
00f414 c154      	RJMP _0x2000004
                 ; 0002 0200         //app_pointer();//jump to app on error
                 ; 0002 0201       }
                 ; 0002 0202       for(j=0;j<(16);j++)//search 16 * 32 filename records
                 _0x40047:
                +
00f415 e020     +LDI R18 , LOW ( 0 )
00f416 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40049:
                +
00f417 3120     +CPI R18 , LOW ( 16 )
00f418 e0e0     +LDI R30 , HIGH ( 16 )
00f419 073e     +CPC R19 , R30
                 	__CPWRN 18,19,16
00f41a f438      	BRSH _0x4004A
                 ; 0002 0203       {
                 ; 0002 0204            //if((result[1]=compbuf("UPDATE",&sdBuf[j*32]))!=0)
                 ; 0002 0205            if((result[1]=compbuf(filename,&sdBuf[j*32]))!=0)
00f41b 940e f6d5 	CALL SUBOPT_0x1B
00f41d 30e0      	CPI  R30,0
00f41e f419      	BRNE _0x4004A
                 ; 0002 0206            {
                 ; 0002 0207                 break;//file Flash... is found
                 ; 0002 0208            }
                 ; 0002 0209       }
                +
00f41f 5f2f     +SUBI R18 , LOW ( - 1 )
00f420 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f421 cff5      	RJMP _0x40049
                 _0x4004A:
                 ; 0002 020A       if(result[1]!=0)
                +
00f422 91e0 0915+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00f424 30e0      	CPI  R30,0
00f425 f0d9      	BREQ _0x4004C
                 ; 0002 020B       {
                 ; 0002 020C         //read 1st number of cluster where data placed
                 ; 0002 020D         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
00f426 940e f6e2 	CALL SUBOPT_0x1C
                +
00f428 5de3     +SUBI R30 , LOW ( - _sdBuf - ( 20 ) )
00f429 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 20 ) )
                 	__ADDW1MN _sdBuf,20
00f42a 81e0      	LD   R30,Z
00f42b d274      	RCALL SUBOPT_0x15
00f42c 940e f6e8 	CALL SUBOPT_0x1D
                 ; 0002 020E         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
00f42e 940e f6ea 	CALL SUBOPT_0x1E
00f430 940e f6e8 	CALL SUBOPT_0x1D
                 ; 0002 020F         filesize = buf2num(&sdBuf[j*32+0x1C],8);
                +
00f432 5ceb     +SUBI R30 , LOW ( - _sdBuf - ( 28 ) )
00f433 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 28 ) )
                 	__ADDW1MN _sdBuf,28
00f434 93fa      	ST   -Y,R31
00f435 93ea      	ST   -Y,R30
00f436 e0a8      	LDI  R26,LOW(8)
00f437 df06      	RCALL _buf2num
00f438 93e0 0b35 	STS  _filesize,R30
00f43a 93f0 0b36 	STS  _filesize+1,R31
00f43c 9360 0b37 	STS  _filesize+2,R22
00f43e 9370 0b38 	STS  _filesize+3,R23
                 ; 0002 0210         break;
00f440 c004      	RJMP _0x40046
                 ; 0002 0211       }
                 ; 0002 0212       else
                 _0x4004C:
                 ; 0002 0213         adr++;
00f441 d26f      	RCALL SUBOPT_0x17
                 ; 0002 0214   }
                +
00f442 5f0f     +SUBI R16 , LOW ( - 1 )
00f443 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00f444 cfc7      	RJMP _0x40045
                 _0x40046:
                 ; 0002 0215   if(result[1]==0){// error if file not found
                +
00f445 91e0 0915+LDS R30 , _result + ( 1 )
                 	__GETB1MN _result,1
00f447 30e0      	CPI  R30,0
00f448 f421      	BRNE _0x4004E
                 ; 0002 0216     #ifdef DEBUG_ERRSD
                 ; 0002 0217     errorSD(6);
                 ; 0002 0218     #endif
                 ; 0002 0219     return 6;
00f449 e0e6      	LDI  R30,LOW(6)
00f44a 940e f813 	CALL __LOADLOCR4
00f44c c11c      	RJMP _0x2000004
                 ; 0002 021A     //app_pointer();//jump to app on error
                 ; 0002 021B   }
                 ; 0002 021C   #ifdef DEBUG_LCD
                 ; 0002 021D   lcd_putsf("5");//file found ok
                 ; 0002 021E   delay_ms(500);
                 ; 0002 021F   #endif
                 ; 0002 0220 
                 ; 0002 0221 
                 ; 0002 0222   //check UPDATE0 or UPDATE1...UPDATE9
                 ; 0002 0223   if((sdBuf[j*32+6])=='0'){
                 _0x4004E:
00f44d 940e f6e2 	CALL SUBOPT_0x1C
                +
00f44f 5ee1     +SUBI R30 , LOW ( - _sdBuf - ( 6 ) )
00f450 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 6 ) )
                 	__ADDW1MN _sdBuf,6
00f451 81a0      	LD   R26,Z
00f452 33a0      	CPI  R26,LOW(0x30)
00f453 f421      	BRNE _0x4004F
                 ; 0002 0224     //return 1;//error if update reach 0
                 ; 0002 0225     #ifdef DEBUG_ERRSD
                 ; 0002 0226     errorSD(7);
                 ; 0002 0227     #endif
                 ; 0002 0228     #ifdef DEBUG_LCD
                 ; 0002 0229     lcd_putsf("ret0");
                 ; 0002 022A     delay_ms(500);
                 ; 0002 022B     #endif
                 ; 0002 022C     return 7;  //if no more retry
00f454 e0e7      	LDI  R30,LOW(7)
00f455 940e f813 	CALL __LOADLOCR4
00f457 c111      	RJMP _0x2000004
                 ; 0002 022D     //app_pointer();//jump to app if no more retry
                 ; 0002 022E   }
                 ; 0002 022F   else if(((sdBuf[j*32+6])>'0')||((sdBuf[j*32+6])<='9')){
                 _0x4004F:
00f458 940e f6e2 	CALL SUBOPT_0x1C
                +
00f45a 5ee1     +SUBI R30 , LOW ( - _sdBuf - ( 6 ) )
00f45b 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 6 ) )
                 	__ADDW1MN _sdBuf,6
00f45c 81a0      	LD   R26,Z
00f45d 33a1      	CPI  R26,LOW(0x31)
00f45e f410      	BRSH _0x40052
00f45f 33aa      	CPI  R26,LOW(0x3A)
00f460 f440      	BRSH _0x40051
                 _0x40052:
                 ; 0002 0230     sdBuf[j*32+6]--;//decrement 1 retry.
00f461 d280      	RCALL SUBOPT_0x1C
                +
00f462 5ee1     +SUBI R30 , LOW ( - _sdBuf - ( 6 ) )
00f463 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 6 ) )
                 	__ADDW1MN _sdBuf,6
00f464 01df      	MOVW R26,R30
00f465 91ec      	LD   R30,X
00f466 50e1      	SUBI R30,LOW(1)
00f467 93ec      	ST   X,R30
                 ; 0002 0231   }
                 ; 0002 0232   else{
00f468 c005      	RJMP _0x40054
                 _0x40051:
                 ; 0002 0233     sdBuf[j*32+6]='9';
00f469 d278      	RCALL SUBOPT_0x1C
                +
00f46a 5ee1     +SUBI R30 , LOW ( - _sdBuf - ( 6 ) )
00f46b 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 6 ) )
                 	__ADDW1MN _sdBuf,6
00f46c e3a9      	LDI  R26,LOW(57)
00f46d 83a0      	STD  Z+0,R26
                 ; 0002 0234   }
                 _0x40054:
                 ; 0002 0235   result[0]=SD_writeSingleBlock(adr, sdBuf, &token);//save new UPDATE(num) filename.
00f46e 91e0 0b1d 	LDS  R30,_adr
00f470 91f0 0b1e 	LDS  R31,_adr+1
00f472 9160 0b1f 	LDS  R22,_adr+2
00f474 9170 0b20 	LDS  R23,_adr+3
00f476 940e f7f7 	CALL __PUTPARD1
00f478 d24c      	RCALL SUBOPT_0x19
00f479 d12e      	RCALL _SD_writeSingleBlock
00f47a 93e0 0914 	STS  _result,R30
                 ; 0002 0236   #ifdef DEBUG_LCD
                 ; 0002 0237   lcd_putsf("7");
                 ; 0002 0238   delay_ms(500);
                 ; 0002 0239   #endif
                 ; 0002 023A   return 0;
00f47c e0e0      	LDI  R30,LOW(0)
00f47d 940e f813 	CALL __LOADLOCR4
00f47f c0e9      	RJMP _0x2000004
                 ; 0002 023B }
                 ; .FEND
                 ;#include "spi_sdcard.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;void SPI_init()
                 ; 0003 0007 {
                 
                 	.CSEG
                 _SPI_init:
                 ; .FSTART _SPI_init
                 ; 0003 0008     // set CS, MOSI and SCK to output
                 ; 0003 0009     DDR_SPI = (1 << CS) | (1 << MOSI) | (1 << SCK);
00f480 e0e7      	LDI  R30,LOW(7)
00f481 bbe7      	OUT  0x17,R30
                 ; 0003 000A     PORT_SPI|=(1 << CS);
00f482 9ac0      	SBI  0x18,0
                 ; 0003 000B     // enable pull up resistor in MISO
                 ; 0003 000C     DDR_SPI &= ~(1 << MISO);
00f483 98bb      	CBI  0x17,3
                 ; 0003 000D     PORT_SPI &= ~(1 << MISO);
00f484 98c3      	CBI  0x18,3
                 ; 0003 000E     //PORT_SPI |= (1 << MISO);
                 ; 0003 000F 
                 ; 0003 0010     // enable SPI, set as master, and clock to fosc/128
                 ; 0003 0011     SPCR = (1 << SPE) | (1 << MSTR) | (0 << SPR1) | (0 << SPR0);
00f485 e5e0      	LDI  R30,LOW(80)
00f486 b9ed      	OUT  0xD,R30
                 ; 0003 0012 }
00f487 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char SPI_transfer(unsigned char data)
                 ; 0003 0015 {
                 _SPI_transfer:
                 ; .FSTART _SPI_transfer
                 ; 0003 0016     // load data into register
                 ; 0003 0017     SPDR = data;
00f488 93aa      	ST   -Y,R26
                 ;	data -> Y+0
00f489 81e8      	LD   R30,Y
00f48a b9ef      	OUT  0xF,R30
                 ; 0003 0018 
                 ; 0003 0019     // Wait for transmission complete
                 ; 0003 001A     while(!(SPSR & (1 << SPIF)));
                 _0x60003:
00f48b 9b77      	SBIS 0xE,7
00f48c cffe      	RJMP _0x60003
                 ; 0003 001B 
                 ; 0003 001C     // return SPDR
                 ; 0003 001D     return SPDR;
00f48d b1ef      	IN   R30,0xF
00f48e 9621      	ADIW R28,1
00f48f 9508      	RET
                 ; 0003 001E }
                 ; .FEND
                 ;
                 ;
                 ;void SD_powerUpSeq()
                 ; 0003 0022 {
                 _SD_powerUpSeq:
                 ; .FSTART _SD_powerUpSeq
                 ; 0003 0023     unsigned char i;
                 ; 0003 0024 
                 ; 0003 0025     SPI_init();
00f490 931a      	ST   -Y,R17
                 ;	i -> R17
00f491 dfee      	RCALL _SPI_init
                 ; 0003 0026 
                 ; 0003 0027     // make sure card is deselected
                 ; 0003 0028     CS_DISABLE();
00f492 9ac0      	SBI  0x18,0
                 ; 0003 0029 
                 ; 0003 002A     // give SD card time to power up
                 ; 0003 002B     delay_ms(1);
00f493 e0a1      	LDI  R26,LOW(1)
00f494 e0b0      	LDI  R27,0
00f495 940e f734 	CALL _delay_ms
                 ; 0003 002C 
                 ; 0003 002D     // send 80 clock cycles to synchronize
                 ; 0003 002E     for(i = 0; i < 10; i++)
00f497 e010      	LDI  R17,LOW(0)
                 _0x60007:
00f498 301a      	CPI  R17,10
00f499 f420      	BRSH _0x60008
                 ; 0003 002F         SPI_transfer(0xFF);
00f49a efaf      	LDI  R26,LOW(255)
00f49b dfec      	RCALL _SPI_transfer
00f49c 5f1f      	SUBI R17,-1
00f49d cffa      	RJMP _0x60007
                 _0x60008:
                 ; 0003 0032 PORTB |= (1 << 0       );
00f49e d255      	RCALL SUBOPT_0x1F
                 ; 0003 0033     SPI_transfer(0xFF);
                 ; 0003 0034 }
00f49f c08b      	RJMP _0x2000007
                 ; .FEND
                 ;
                 ;unsigned char SD_command(unsigned char cmd, unsigned long arg, unsigned char crc)
                 ; 0003 0037 {
                 _SD_command:
                 ; .FSTART _SD_command
                 ; 0003 0038     unsigned char res,count;
                 ; 0003 0039     // transmit command to sd card
                 ; 0003 003A     SPI_transfer(cmd|0x40);
00f4a0 93aa      	ST   -Y,R26
00f4a1 931a      	ST   -Y,R17
00f4a2 930a      	ST   -Y,R16
                 ;	cmd -> Y+7
                 ;	arg -> Y+3
                 ;	crc -> Y+2
                 ;	res -> R17
                 ;	count -> R16
00f4a3 81ef      	LDD  R30,Y+7
00f4a4 64e0      	ORI  R30,0x40
00f4a5 d251      	RCALL SUBOPT_0x20
                 ; 0003 003B 
                 ; 0003 003C     // transmit argument
                 ; 0003 003D     SPI_transfer((unsigned char)(arg >> 24));
00f4a6 e1e8      	LDI  R30,LOW(24)
00f4a7 940e f758 	CALL __LSRD12
00f4a9 2fae      	MOV  R26,R30
00f4aa dfdd      	RCALL _SPI_transfer
                 ; 0003 003E     SPI_transfer((unsigned char)(arg >> 16));
                +
00f4ab 81eb     +LDD R30 , Y + 3
00f4ac 81fc     +LDD R31 , Y + 3 + 1
00f4ad 816d     +LDD R22 , Y + 3 + 2
00f4ae 817e     +LDD R23 , Y + 3 + 3
                 	__GETD1S 3
00f4af 940e f769 	CALL __LSRD16
00f4b1 d245      	RCALL SUBOPT_0x20
                 ; 0003 003F     SPI_transfer((unsigned char)(arg >> 8));
00f4b2 e0e8      	LDI  R30,LOW(8)
00f4b3 940e f758 	CALL __LSRD12
00f4b5 2fae      	MOV  R26,R30
00f4b6 dfd1      	RCALL _SPI_transfer
                 ; 0003 0040     SPI_transfer((unsigned char)(arg));
00f4b7 81ab      	LDD  R26,Y+3
00f4b8 dfcf      	RCALL _SPI_transfer
                 ; 0003 0041 
                 ; 0003 0042     // transmit crc
                 ; 0003 0043     SPI_transfer(crc|0x01);
00f4b9 81ea      	LDD  R30,Y+2
00f4ba 60e1      	ORI  R30,1
00f4bb 2fae      	MOV  R26,R30
00f4bc dfcb      	RCALL _SPI_transfer
                 ; 0003 0044 
                 ; 0003 0045     //wait response R1
                 ; 0003 0046     res = SD_readRes1();
00f4bd d005      	RCALL _SD_readRes1
00f4be 2f1e      	MOV  R17,R30
                 ; 0003 0047     /*
                 ; 0003 0048     do {
                 ; 0003 0049      res=SPI_transfer(0xFF);;
                 ; 0003 004A      count++;
                 ; 0003 004B     } while ( ((res&0x80)!=0x00)&&(count<0xff) );
                 ; 0003 004C     */
                 ; 0003 004D     return res;
00f4bf 8119      	LDD  R17,Y+1
00f4c0 8108      	LDD  R16,Y+0
00f4c1 9628      	ADIW R28,8
00f4c2 9508      	RET
                 ; 0003 004E }
                 ; .FEND
                 ;
                 ;
                 ;unsigned char SD_readRes1()
                 ; 0003 0052 {
                 _SD_readRes1:
                 ; .FSTART _SD_readRes1
                 ; 0003 0053     unsigned char res1;
                 ; 0003 0054     unsigned int i = 0;
                 ; 0003 0055 
                 ; 0003 0056     // keep polling until actual data received
                 ; 0003 0057     //while((res1 = SPI_transfer(0xFF)) == 0xFF)
                 ; 0003 0058     while(((res1 = SPI_transfer(0xFF))&0x80) != 0x00)
00f4c3 940e f80c 	CALL __SAVELOCR4
                 ;	res1 -> R17
                 ;	i -> R18,R19
                +
00f4c5 e020     +LDI R18 , LOW ( 0 )
00f4c6 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60009:
00f4c7 efaf      	LDI  R26,LOW(255)
00f4c8 dfbf      	RCALL _SPI_transfer
00f4c9 2f1e      	MOV  R17,R30
00f4ca 78e0      	ANDI R30,LOW(0x80)
00f4cb f031      	BREQ _0x6000B
                 ; 0003 0059     {
                 ; 0003 005A         i++;
                +
00f4cc 5f2f     +SUBI R18 , LOW ( - 1 )
00f4cd 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0003 005B 
                 ; 0003 005C         // if no data received for (254)8 bytes, break
                 ; 0003 005D         if(i > 0x1FF) break;
                +
00f4ce 3020     +CPI R18 , LOW ( 512 )
00f4cf e0e2     +LDI R30 , HIGH ( 512 )
00f4d0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00f4d1 f3a8      	BRLO _0x60009
                 ; 0003 005E     }
                 _0x6000B:
                 ; 0003 005F 
                 ; 0003 0060     return res1;
00f4d2 2fe1      	MOV  R30,R17
00f4d3 940e f813 	CALL __LOADLOCR4
                 _0x200000A:
00f4d5 9624      	ADIW R28,4
00f4d6 9508      	RET
                 ; 0003 0061 }
                 ; .FEND
                 ;
                 ;unsigned char SD_goIdleState()
                 ; 0003 0064 {
                 _SD_goIdleState:
                 ; .FSTART _SD_goIdleState
                 ; 0003 0065     unsigned char res1;
                 ; 0003 0066     // assert chip select
                 ; 0003 0067     SPI_transfer(0xFF);
00f4d7 d226      	RCALL SUBOPT_0x21
                 ;	res1 -> R17
                 ; 0003 0068     CS_ENABLE();
                 ; 0003 0069     //SPI_transfer(0xFF);
                 ; 0003 006A 
                 ; 0003 006B     // send CMD0
                 ; 0003 006C     res1 = SD_command(CMD0, CMD0_ARG, CMD0_CRC);
00f4d8 e0e0      	LDI  R30,LOW(0)
00f4d9 93ea      	ST   -Y,R30
00f4da d118      	RCALL SUBOPT_0x1
00f4db e9a4      	LDI  R26,LOW(148)
00f4dc c04a      	RJMP _0x2000006
                 ; 0003 006D 
                 ; 0003 006E     // read response
                 ; 0003 006F     //res1 = SD_readRes1();
                 ; 0003 0070 
                 ; 0003 0071     // deassert chip select
                 ; 0003 0072     SPI_transfer(0xFF);
                 ; 0003 0073     CS_DISABLE();
                 ; 0003 0074     SPI_transfer(0xFF);
                 ; 0003 0075 
                 ; 0003 0076     return res1;
                 ; 0003 0077 }
                 ; .FEND
                 ;
                 ;void SD_readRes7(unsigned char *res)
                 ; 0003 007A {
                 _SD_readRes7:
                 ; .FSTART _SD_readRes7
                 ; 0003 007B     // read response 1 in R7
                 ; 0003 007C     //res[0] = SD_readRes1();
                 ; 0003 007D 
                 ; 0003 007E     // if error reading R1, return
                 ; 0003 007F     if(res[0] > 1) return;
00f4dd 93ba      	ST   -Y,R27
00f4de 93aa      	ST   -Y,R26
                 ;	*res -> Y+0
00f4df 81a8      	LD   R26,Y
00f4e0 81b9      	LDD  R27,Y+1
00f4e1 91ac      	LD   R26,X
00f4e2 30a2      	CPI  R26,LOW(0x2)
00f4e3 f578      	BRSH _0x2000009
                 ; 0003 0080 
                 ; 0003 0081     // read remaining bytes
                 ; 0003 0082     res[1] = SPI_transfer(0xFF);
00f4e4 efaf      	LDI  R26,LOW(255)
00f4e5 dfa2      	RCALL _SPI_transfer
                +
00f4e6 81a8     +LDD R26 , Y + 0
00f4e7 81b9     +LDD R27 , Y + 0 + 1
00f4e8 9611     +ADIW R26 , 1
00f4e9 93ec     +ST X , R30
                 	__PUTB1SNS 0,1
                 ; 0003 0083     res[2] = SPI_transfer(0xFF);
00f4ea efaf      	LDI  R26,LOW(255)
00f4eb df9c      	RCALL _SPI_transfer
                +
00f4ec 81a8     +LDD R26 , Y + 0
00f4ed 81b9     +LDD R27 , Y + 0 + 1
00f4ee 9612     +ADIW R26 , 2
00f4ef 93ec     +ST X , R30
                 	__PUTB1SNS 0,2
                 ; 0003 0084     res[3] = SPI_transfer(0xFF);
00f4f0 efaf      	LDI  R26,LOW(255)
00f4f1 df96      	RCALL _SPI_transfer
                +
00f4f2 81a8     +LDD R26 , Y + 0
00f4f3 81b9     +LDD R27 , Y + 0 + 1
00f4f4 9613     +ADIW R26 , 3
00f4f5 93ec     +ST X , R30
                 	__PUTB1SNS 0,3
                 ; 0003 0085     res[4] = SPI_transfer(0xFF);
00f4f6 efaf      	LDI  R26,LOW(255)
00f4f7 df90      	RCALL _SPI_transfer
                +
00f4f8 81a8     +LDD R26 , Y + 0
00f4f9 81b9     +LDD R27 , Y + 0 + 1
00f4fa 9614     +ADIW R26 , 4
00f4fb 93ec     +ST X , R30
                 	__PUTB1SNS 0,4
                 ; 0003 0086 }
00f4fc c016      	RJMP _0x2000009
                 ; .FEND
                 ;
                 ;void SD_sendIfCond(unsigned char *res)
                 ; 0003 0089 {
                 _SD_sendIfCond:
                 ; .FSTART _SD_sendIfCond
                 ; 0003 008A     // assert chip select
                 ; 0003 008B     SPI_transfer(0xFF);
00f4fd d205      	RCALL SUBOPT_0x22
                 ;	*res -> Y+0
                 ; 0003 008C     CS_ENABLE();
                 ; 0003 008D     //SPI_transfer(0xFF);
                 ; 0003 008E 
                 ; 0003 008F     // send CMD8
                 ; 0003 0090     res[0]=SD_command(CMD8, CMD8_ARG, CMD8_CRC);
00f4fe e0e8      	LDI  R30,LOW(8)
00f4ff 93ea      	ST   -Y,R30
                +
00f500 eaea     +LDI R30 , LOW ( 0x1AA )
00f501 e0f1     +LDI R31 , HIGH ( 0x1AA )
00f502 e060     +LDI R22 , BYTE3 ( 0x1AA )
00f503 e070     +LDI R23 , BYTE4 ( 0x1AA )
                 	__GETD1N 0x1AA
00f504 940e f7f7 	CALL __PUTPARD1
00f506 e8a6      	LDI  R26,LOW(134)
00f507 c005      	RJMP _0x2000008
                 ; 0003 0091 
                 ; 0003 0092     // read response
                 ; 0003 0093     SD_readRes7(res);
                 ; 0003 0094 
                 ; 0003 0095     // deassert chip select
                 ; 0003 0096     SPI_transfer(0xFF);
                 ; 0003 0097     CS_DISABLE();
                 ; 0003 0098     SPI_transfer(0xFF);
                 ; 0003 0099 }
                 ; .FEND
                 ;
                 ;/*
                 ;void SD_readRes3_7(unsigned char *res)
                 ;{
                 ;    // read R1
                 ;    //res[0] = SD_readRes1();
                 ;
                 ;    // if error reading R1, return
                 ;    if(res[0] > 1) return;
                 ;
                 ;    // read remaining bytes
                 ;    res[1] = SPI_transfer(0xFF);
                 ;    res[2] = SPI_transfer(0xFF);
                 ;    res[3] = SPI_transfer(0xFF);
                 ;    res[4] = SPI_transfer(0xFF);
                 ;}
                 ;*/
                 ;
                 ;void SD_readOCR(unsigned char *res)
                 ; 0003 00AD {
                 _SD_readOCR:
                 ; .FSTART _SD_readOCR
                 ; 0003 00AE     // assert chip select
                 ; 0003 00AF     SPI_transfer(0xFF);
00f508 d1fa      	RCALL SUBOPT_0x22
                 ;	*res -> Y+0
                 ; 0003 00B0     CS_ENABLE();
                 ; 0003 00B1     //SPI_transfer(0xFF);
                 ; 0003 00B2 
                 ; 0003 00B3     // send CMD58
                 ; 0003 00B4     res[0] = SD_command(CMD58, CMD58_ARG, CMD58_CRC);
00f509 e3ea      	LDI  R30,LOW(58)
00f50a 93ea      	ST   -Y,R30
00f50b d0e7      	RCALL SUBOPT_0x1
00f50c e0a0      	LDI  R26,LOW(0)
                 _0x2000008:
00f50d df92      	RCALL _SD_command
00f50e 81a8      	LD   R26,Y
00f50f 81b9      	LDD  R27,Y+1
00f510 93ec      	ST   X,R30
                 ; 0003 00B5 
                 ; 0003 00B6     // read response
                 ; 0003 00B7     //SD_readRes3_7(res);
                 ; 0003 00B8     SD_readRes7(res);
00f511 dfcb      	RCALL _SD_readRes7
                 ; 0003 00B9 
                 ; 0003 00BA     // deassert chip select
                 ; 0003 00BB     SPI_transfer(0xFF);
00f512 d1f6      	RCALL SUBOPT_0x23
                 ; 0003 00BC     CS_DISABLE();
                 ; 0003 00BD     SPI_transfer(0xFF);
                 ; 0003 00BE }
                 _0x2000009:
00f513 9622      	ADIW R28,2
00f514 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char SD_sendApp()
                 ; 0003 00C1 {
                 _SD_sendApp:
                 ; .FSTART _SD_sendApp
                 ; 0003 00C2     unsigned char res1;
                 ; 0003 00C3     // assert chip select
                 ; 0003 00C4     SPI_transfer(0xFF);
00f515 d1e8      	RCALL SUBOPT_0x21
                 ;	res1 -> R17
                 ; 0003 00C5     CS_ENABLE();
                 ; 0003 00C6     //SPI_transfer(0xFF);
                 ; 0003 00C7 
                 ; 0003 00C8     // send CMD0
                 ; 0003 00C9     res1 = SD_command(CMD55, CMD55_ARG, CMD55_CRC);
00f516 e3e7      	LDI  R30,LOW(55)
00f517 93ea      	ST   -Y,R30
                +
00f518 e0e0     +LDI R30 , LOW ( 0x0 )
00f519 e0f0     +LDI R31 , HIGH ( 0x0 )
00f51a e060     +LDI R22 , BYTE3 ( 0x0 )
00f51b e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00f51c c007      	RJMP _0x2000005
                 ; 0003 00CA 
                 ; 0003 00CB     // read response
                 ; 0003 00CC     //res1 = SD_readRes1();
                 ; 0003 00CD 
                 ; 0003 00CE     // deassert chip select
                 ; 0003 00CF     SPI_transfer(0xFF);
                 ; 0003 00D0     CS_DISABLE();
                 ; 0003 00D1     SPI_transfer(0xFF);
                 ; 0003 00D2 
                 ; 0003 00D3     return res1;
                 ; 0003 00D4 }
                 ; .FEND
                 ;
                 ;unsigned char SD_sendOpCond()
                 ; 0003 00D7 {
                 _SD_sendOpCond:
                 ; .FSTART _SD_sendOpCond
                 ; 0003 00D8     unsigned char res1;
                 ; 0003 00D9     // assert chip select
                 ; 0003 00DA     SPI_transfer(0xFF);
00f51d d1e0      	RCALL SUBOPT_0x21
                 ;	res1 -> R17
                 ; 0003 00DB     CS_ENABLE();
                 ; 0003 00DC     //SPI_transfer(0xFF);
                 ; 0003 00DD 
                 ; 0003 00DE     // send CMD0
                 ; 0003 00DF     res1 =  SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
00f51e e2e9      	LDI  R30,LOW(41)
00f51f 93ea      	ST   -Y,R30
                +
00f520 e0e0     +LDI R30 , LOW ( 0x40000000 )
00f521 e0f0     +LDI R31 , HIGH ( 0x40000000 )
00f522 e060     +LDI R22 , BYTE3 ( 0x40000000 )
00f523 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
                 _0x2000005:
00f524 940e f7f7 	CALL __PUTPARD1
00f526 e0a0      	LDI  R26,LOW(0)
                 _0x2000006:
00f527 df78      	RCALL _SD_command
00f528 2f1e      	MOV  R17,R30
                 ; 0003 00E0 
                 ; 0003 00E1     // read response
                 ; 0003 00E2     //res1 = SD_readRes1();
                 ; 0003 00E3 
                 ; 0003 00E4     // deassert chip select
                 ; 0003 00E5     SPI_transfer(0xFF);
00f529 d1df      	RCALL SUBOPT_0x23
                 ; 0003 00E6     CS_DISABLE();
                 ; 0003 00E7     SPI_transfer(0xFF);
                 ; 0003 00E8 
                 ; 0003 00E9     return res1;
00f52a 2fe1      	MOV  R30,R17
                 _0x2000007:
00f52b 9119      	LD   R17,Y+
00f52c 9508      	RET
                 ; 0003 00EA }
                 ; .FEND
                 ;
                 ;unsigned char SD_init()
                 ; 0003 00ED {
                 _SD_init:
                 ; .FSTART _SD_init
                 ; 0003 00EE     unsigned char res[5], cmdAttempts = 0;
                 ; 0003 00EF 
                 ; 0003 00F0     SD_powerUpSeq();
00f52d 9725      	SBIW R28,5
00f52e 931a      	ST   -Y,R17
                 ;	res -> Y+1
                 ;	cmdAttempts -> R17
00f52f e010      	LDI  R17,0
00f530 df5f      	RCALL _SD_powerUpSeq
                 ; 0003 00F1 
                 ; 0003 00F2     // command card to idle
                 ; 0003 00F3     while((res[0] = SD_goIdleState()) != 0x01)
                 _0x6000E:
00f531 dfa5      	RCALL _SD_goIdleState
00f532 83e9      	STD  Y+1,R30
00f533 30e1      	CPI  R30,LOW(0x1)
00f534 f031      	BREQ _0x60010
                 ; 0003 00F4     {
                 ; 0003 00F5         cmdAttempts++;
00f535 5f1f      	SUBI R17,-1
                 ; 0003 00F6         if(cmdAttempts > 100) return SD_ERROR;
00f536 3615      	CPI  R17,101
00f537 f010      	BRLO _0x60011
00f538 e0e1      	LDI  R30,LOW(1)
00f539 c02e      	RJMP _0x2000003
                 ; 0003 00F7     }
                 _0x60011:
00f53a cff6      	RJMP _0x6000E
                 _0x60010:
                 ; 0003 00F8 
                 ; 0003 00F9     // send interface conditions
                 ; 0003 00FA     SD_sendIfCond(res);
00f53b 01de      	MOVW R26,R28
00f53c 9611      	ADIW R26,1
00f53d dfbf      	RCALL _SD_sendIfCond
                 ; 0003 00FB     if(res[0] != 0x01)
00f53e 81a9      	LDD  R26,Y+1
00f53f 30a1      	CPI  R26,LOW(0x1)
00f540 f011      	BREQ _0x60012
                 ; 0003 00FC     {
                 ; 0003 00FD         return SD_ERROR;
00f541 e0e1      	LDI  R30,LOW(1)
00f542 c025      	RJMP _0x2000003
                 ; 0003 00FE     }
                 ; 0003 00FF 
                 ; 0003 0100     // check echo pattern
                 ; 0003 0101     if(res[4] != 0xAA)
                 _0x60012:
00f543 81ad      	LDD  R26,Y+5
00f544 3aaa      	CPI  R26,LOW(0xAA)
00f545 f011      	BREQ _0x60013
                 ; 0003 0102     {
                 ; 0003 0103         return SD_ERROR;
00f546 e0e1      	LDI  R30,LOW(1)
00f547 c020      	RJMP _0x2000003
                 ; 0003 0104     }
                 ; 0003 0105 
                 ; 0003 0106     // attempt to initialize card
                 ; 0003 0107     cmdAttempts = 0;
                 _0x60013:
00f548 e010      	LDI  R17,LOW(0)
                 ; 0003 0108     do
                 _0x60015:
                 ; 0003 0109     {
                 ; 0003 010A         if(cmdAttempts > 100) return SD_ERROR;
00f549 3615      	CPI  R17,101
00f54a f010      	BRLO _0x60017
00f54b e0e1      	LDI  R30,LOW(1)
00f54c c01b      	RJMP _0x2000003
                 ; 0003 010B 
                 ; 0003 010C         // send app cmd
                 ; 0003 010D         res[0] = SD_sendApp();
                 _0x60017:
00f54d dfc7      	RCALL _SD_sendApp
00f54e 83e9      	STD  Y+1,R30
                 ; 0003 010E 
                 ; 0003 010F         // if no error in response
                 ; 0003 0110         if(res[0] < 2)
00f54f 81a9      	LDD  R26,Y+1
00f550 30a2      	CPI  R26,LOW(0x2)
00f551 f410      	BRSH _0x60018
                 ; 0003 0111         {
                 ; 0003 0112             res[0] = SD_sendOpCond();
00f552 dfca      	RCALL _SD_sendOpCond
00f553 83e9      	STD  Y+1,R30
                 ; 0003 0113         }
                 ; 0003 0114 
                 ; 0003 0115         // wait
                 ; 0003 0116         if(res[0] != SD_READY)
                 _0x60018:
00f554 81e9      	LDD  R30,Y+1
00f555 30e0      	CPI  R30,0
00f556 f021      	BREQ _0x60019
                 ; 0003 0117             delay_ms(10);
00f557 e0aa      	LDI  R26,LOW(10)
00f558 e0b0      	LDI  R27,0
00f559 940e f734 	CALL _delay_ms
                 ; 0003 0118 
                 ; 0003 0119         cmdAttempts++;
                 _0x60019:
00f55b 5f1f      	SUBI R17,-1
                 ; 0003 011A     }
                 ; 0003 011B     while(res[0] != SD_READY);
00f55c 81e9      	LDD  R30,Y+1
00f55d 30e0      	CPI  R30,0
00f55e f751      	BRNE _0x60015
                 ; 0003 011C 
                 ; 0003 011D     // read OCR
                 ; 0003 011E     SD_readOCR(res);
00f55f 01de      	MOVW R26,R28
00f560 9611      	ADIW R26,1
00f561 dfa6      	RCALL _SD_readOCR
                 ; 0003 011F 
                 ; 0003 0120     // check card is ready
                 ; 0003 0121     if(!(res[1] & 0x80)) return SD_ERROR;
00f562 81ea      	LDD  R30,Y+2
00f563 78e0      	ANDI R30,LOW(0x80)
00f564 f411      	BRNE _0x6001A
00f565 e0e1      	LDI  R30,LOW(1)
00f566 c001      	RJMP _0x2000003
                 ; 0003 0122 
                 ; 0003 0123     return SD_SUCCESS;
                 _0x6001A:
00f567 e0e0      	LDI  R30,LOW(0)
                 _0x2000003:
00f568 8118      	LDD  R17,Y+0
                 _0x2000004:
00f569 9626      	ADIW R28,6
00f56a 9508      	RET
                 ; 0003 0124 }
                 ; .FEND
                 ;
                 ;#define CMD17                   17
                 ;#define CMD17_CRC               0x00
                 ;#define SD_MAX_READ_ATTEMPTS    1563
                 ;
                 ;/*******************************************************************************
                 ; Read single 512 byte block
                 ; token = 0xFE - Successful read
                 ; token = 0x0X - Data error
                 ; token = 0xFF - Timeout
                 ;*******************************************************************************/
                 ;unsigned char SD_readSingleBlock(unsigned long addr, unsigned char *buf, unsigned char *token)
                 ; 0003 0131 {
                 _SD_readSingleBlock:
                 ; .FSTART _SD_readSingleBlock
                 ; 0003 0132     unsigned char res1, read;
                 ; 0003 0133     unsigned int i, readAttempts;
                 ; 0003 0134     #asm("wdr")
00f56b 93ba      	ST   -Y,R27
00f56c 93aa      	ST   -Y,R26
00f56d 940e f80a 	CALL __SAVELOCR6
                 ;	addr -> Y+10
                 ;	*buf -> Y+8
                 ;	*token -> Y+6
                 ;	res1 -> R17
                 ;	read -> R16
                 ;	i -> R18,R19
                 ;	readAttempts -> R20,R21
00f56f 95a8      	wdr
                 ; 0003 0135     addr*=512UL;
00f570 d19b      	RCALL SUBOPT_0x24
                 ; 0003 0136     // set token to none
                 ; 0003 0137     *token = 0xFF;
                 ; 0003 0138 
                 ; 0003 0139     // assert chip select
                 ; 0003 013A     SPI_transfer(0xFF);
                 ; 0003 013B     CS_ENABLE();
                 ; 0003 013C     //SPI_transfer(0xFF);
                 ; 0003 013D 
                 ; 0003 013E     // send CMD17
                 ; 0003 013F     res1 = SD_command(CMD17, addr, CMD17_CRC);
00f571 e1e1      	LDI  R30,LOW(17)
00f572 d1af      	RCALL SUBOPT_0x25
                 ; 0003 0140 
                 ; 0003 0141     // read R1
                 ; 0003 0142     //res1 = SD_readRes1();
                 ; 0003 0143 
                 ; 0003 0144     // if response received from card
                 ; 0003 0145     if(res1 != 0xFF)
00f573 3f1f      	CPI  R17,255
00f574 f169      	BREQ _0x6001B
                 ; 0003 0146     {
                 ; 0003 0147         // wait for a response token (timeout = 100ms)
                 ; 0003 0148         readAttempts = 0;
                +
00f575 e040     +LDI R20 , LOW ( 0 )
00f576 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 0149         while(++readAttempts != SD_MAX_READ_ATTEMPTS)
                 _0x6001C:
00f577 01fa      	MOVW R30,R20
00f578 9631      	ADIW R30,1
00f579 01af      	MOVW R20,R30
00f57a 31eb      	CPI  R30,LOW(0x61B)
00f57b e0a6      	LDI  R26,HIGH(0x61B)
00f57c 07fa      	CPC  R31,R26
00f57d f029      	BREQ _0x6001E
                 ; 0003 014A             if((read = SPI_transfer(0xFF)) != 0xFF) break;
00f57e efaf      	LDI  R26,LOW(255)
00f57f df08      	RCALL _SPI_transfer
00f580 2f0e      	MOV  R16,R30
00f581 3fef      	CPI  R30,LOW(0xFF)
00f582 f3a1      	BREQ _0x6001C
                 ; 0003 014B 
                 ; 0003 014C         // if response token is 0xFE
                 ; 0003 014D         if(read == 0xFE)
                 _0x6001E:
00f583 3f0e      	CPI  R16,254
00f584 f4d1      	BRNE _0x60020
                 ; 0003 014E         {
                 ; 0003 014F             // read 512 byte block
                 ; 0003 0150             for(i = 0; i < 512; i++) *buf++ = SPI_transfer(0xFF);
                +
00f585 e020     +LDI R18 , LOW ( 0 )
00f586 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60022:
                +
00f587 3020     +CPI R18 , LOW ( 512 )
00f588 e0e2     +LDI R30 , HIGH ( 512 )
00f589 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00f58a f480      	BRSH _0x60023
00f58b 85e8      	LDD  R30,Y+8
00f58c 85f9      	LDD  R31,Y+8+1
00f58d 9631      	ADIW R30,1
00f58e 87e8      	STD  Y+8,R30
00f58f 87f9      	STD  Y+8+1,R31
00f590 9731      	SBIW R30,1
00f591 93ff      	PUSH R31
00f592 93ef      	PUSH R30
00f593 efaf      	LDI  R26,LOW(255)
00f594 def3      	RCALL _SPI_transfer
00f595 91af      	POP  R26
00f596 91bf      	POP  R27
00f597 93ec      	ST   X,R30
                +
00f598 5f2f     +SUBI R18 , LOW ( - 1 )
00f599 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f59a cfec      	RJMP _0x60022
                 _0x60023:
                 ; 0003 0153 SPI_transfer(0xFF);
00f59b efaf      	LDI  R26,LOW(255)
00f59c deeb      	RCALL _SPI_transfer
                 ; 0003 0154             SPI_transfer(0xFF);
00f59d efaf      	LDI  R26,LOW(255)
00f59e dee9      	RCALL _SPI_transfer
                 ; 0003 0155         }
                 ; 0003 0156 
                 ; 0003 0157         // set token to card response
                 ; 0003 0158         *token = read;
                 _0x60020:
00f59f 81ae      	LDD  R26,Y+6
00f5a0 81bf      	LDD  R27,Y+6+1
00f5a1 930c      	ST   X,R16
                 ; 0003 0159     }
                 ; 0003 015A 
                 ; 0003 015B     // deassert chip select
                 ; 0003 015C     SPI_transfer(0xFF);
                 _0x6001B:
00f5a2 d166      	RCALL SUBOPT_0x23
                 ; 0003 015D     CS_DISABLE();
                 ; 0003 015E     SPI_transfer(0xFF);
                 ; 0003 015F     if(read==0xFE)
00f5a3 3f0e      	CPI  R16,254
00f5a4 f409      	BRNE _0x60024
                 ; 0003 0160         return res1;
00f5a5 c043      	RJMP _0x2000002
                 ; 0003 0161     else
                 _0x60024:
                 ; 0003 0162         return SD_ERROR;
00f5a6 e0e1      	LDI  R30,LOW(1)
00f5a7 c042      	RJMP _0x2000001
                 ; 0003 0163 }
                 ; .FEND
                 ;
                 ;#define SD_BLOCK_LEN            512
                 ;#define SD_START_TOKEN          0xFE
                 ;#define CMD24_CRC           0x00
                 ;#define CMD24                   24
                 ;#define CMD24_ARG               0x00
                 ;#define SD_MAX_WRITE_ATTEMPTS   3907
                 ;/*******************************************************************************
                 ; Write single 512 byte block
                 ; token = 0x00 - busy timeout
                 ; token = 0x05 - data accepted
                 ; token = 0xFF - response timeout
                 ;*******************************************************************************/
                 ;
                 ;unsigned char SD_writeSingleBlock(unsigned long addr, unsigned char *buf, unsigned char *token)
                 ; 0003 0173 {
                 _SD_writeSingleBlock:
                 ; .FSTART _SD_writeSingleBlock
                 ; 0003 0174     unsigned char res1, read;
                 ; 0003 0175     unsigned int i, readAttempts;
                 ; 0003 0176     #asm("wdr")
00f5a8 93ba      	ST   -Y,R27
00f5a9 93aa      	ST   -Y,R26
00f5aa 940e f80a 	CALL __SAVELOCR6
                 ;	addr -> Y+10
                 ;	*buf -> Y+8
                 ;	*token -> Y+6
                 ;	res1 -> R17
                 ;	read -> R16
                 ;	i -> R18,R19
                 ;	readAttempts -> R20,R21
00f5ac 95a8      	wdr
                 ; 0003 0177     addr*=512UL;
00f5ad d15e      	RCALL SUBOPT_0x24
                 ; 0003 0178     // set token to none
                 ; 0003 0179     *token = 0xFF;
                 ; 0003 017A 
                 ; 0003 017B     // assert chip select
                 ; 0003 017C     SPI_transfer(0xFF);
                 ; 0003 017D     CS_ENABLE();
                 ; 0003 017E     SPI_transfer(0xFF);
00f5ae efaf      	LDI  R26,LOW(255)
00f5af ded8      	RCALL _SPI_transfer
                 ; 0003 017F 
                 ; 0003 0180     // send CMD24
                 ; 0003 0181     res1=SD_command(CMD24, addr, CMD24_CRC);
00f5b0 e1e8      	LDI  R30,LOW(24)
00f5b1 d170      	RCALL SUBOPT_0x25
                 ; 0003 0182 
                 ; 0003 0183     // read response
                 ; 0003 0184     //res1 = SD_readRes1();
                 ; 0003 0185 
                 ; 0003 0186     // if no error
                 ; 0003 0187     if(res1 == SD_READY)
00f5b2 3010      	CPI  R17,0
00f5b3 f5a1      	BRNE _0x60026
                 ; 0003 0188     {
                 ; 0003 0189         // send start token
                 ; 0003 018A         SPI_transfer(SD_START_TOKEN);
00f5b4 efae      	LDI  R26,LOW(254)
00f5b5 ded2      	RCALL _SPI_transfer
                 ; 0003 018B 
                 ; 0003 018C         // write buffer to card
                 ; 0003 018D         for(i = 0; i < SD_BLOCK_LEN; i++) SPI_transfer(buf[i]);
                +
00f5b6 e020     +LDI R18 , LOW ( 0 )
00f5b7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60028:
                +
00f5b8 3020     +CPI R18 , LOW ( 512 )
00f5b9 e0e2     +LDI R30 , HIGH ( 512 )
00f5ba 073e     +CPC R19 , R30
                 	__CPWRN 18,19,512
00f5bb f438      	BRSH _0x60029
00f5bc 01f9      	MOVW R30,R18
00f5bd d041      	RCALL SUBOPT_0x3
00f5be 91ac      	LD   R26,X
00f5bf dec8      	RCALL _SPI_transfer
                +
00f5c0 5f2f     +SUBI R18 , LOW ( - 1 )
00f5c1 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00f5c2 cff5      	RJMP _0x60028
                 _0x60029:
                 ; 0003 0190 readAttempts = 0;
                +
00f5c3 e040     +LDI R20 , LOW ( 0 )
00f5c4 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 0191         while(++readAttempts != SD_MAX_WRITE_ATTEMPTS)
                 _0x6002A:
00f5c5 d167      	RCALL SUBOPT_0x26
00f5c6 f059      	BREQ _0x6002C
                 ; 0003 0192             if((read = SPI_transfer(0xFF)) != 0xFF) { *token = 0xFF; break; }
00f5c7 efaf      	LDI  R26,LOW(255)
00f5c8 debf      	RCALL _SPI_transfer
00f5c9 2f0e      	MOV  R16,R30
00f5ca 3fef      	CPI  R30,LOW(0xFF)
00f5cb f029      	BREQ _0x6002D
00f5cc 81ae      	LDD  R26,Y+6
00f5cd 81bf      	LDD  R27,Y+6+1
00f5ce efef      	LDI  R30,LOW(255)
00f5cf 93ec      	ST   X,R30
00f5d0 c001      	RJMP _0x6002C
                 ; 0003 0193 
                 ; 0003 0194         // if data accepted
                 ; 0003 0195         if((read & 0x1F) == 0x05)
                 _0x6002D:
00f5d1 cff3      	RJMP _0x6002A
                 _0x6002C:
00f5d2 2fe0      	MOV  R30,R16
00f5d3 71ef      	ANDI R30,LOW(0x1F)
00f5d4 30e5      	CPI  R30,LOW(0x5)
00f5d5 f491      	BRNE _0x6002E
                 ; 0003 0196         {
                 ; 0003 0197             // set token to data accepted
                 ; 0003 0198             *token = 0x05;
00f5d6 81ae      	LDD  R26,Y+6
00f5d7 81bf      	LDD  R27,Y+6+1
00f5d8 e0e5      	LDI  R30,LOW(5)
00f5d9 93ec      	ST   X,R30
                 ; 0003 0199 
                 ; 0003 019A             // wait for write to finish (timeout = 250ms)
                 ; 0003 019B             readAttempts = 0;
                +
00f5da e040     +LDI R20 , LOW ( 0 )
00f5db e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0003 019C             while(SPI_transfer(0xFF) == 0x00){
                 _0x6002F:
00f5dc efaf      	LDI  R26,LOW(255)
00f5dd deaa      	RCALL _SPI_transfer
00f5de 30e0      	CPI  R30,0
00f5df f441      	BRNE _0x60031
                 ; 0003 019D                 if(++readAttempts == SD_MAX_WRITE_ATTEMPTS){
00f5e0 d14c      	RCALL SUBOPT_0x26
00f5e1 f429      	BRNE _0x60032
                 ; 0003 019E                     *token = 0x00;
00f5e2 81ae      	LDD  R26,Y+6
00f5e3 81bf      	LDD  R27,Y+6+1
00f5e4 e0e0      	LDI  R30,LOW(0)
00f5e5 93ec      	ST   X,R30
                 ; 0003 019F                     break;
00f5e6 c001      	RJMP _0x60031
                 ; 0003 01A0                 }
                 ; 0003 01A1             }
                 _0x60032:
00f5e7 cff4      	RJMP _0x6002F
                 _0x60031:
                 ; 0003 01A2         }
                 ; 0003 01A3     }
                 _0x6002E:
                 ; 0003 01A4 
                 ; 0003 01A5     // deassert chip select
                 ; 0003 01A6     SPI_transfer(0xFF);
                 _0x60026:
00f5e8 d120      	RCALL SUBOPT_0x23
                 ; 0003 01A7     CS_DISABLE();
                 ; 0003 01A8     SPI_transfer(0xFF);
                 ; 0003 01A9 
                 ; 0003 01AA     return res1;
                 _0x2000002:
00f5e9 2fe1      	MOV  R30,R17
                 _0x2000001:
00f5ea 940e f811 	CALL __LOADLOCR6
00f5ec 962e      	ADIW R28,14
00f5ed 9508      	RET
                 ; 0003 01AB }
                 ; .FEND
                 
                 	.DSEG
                 _result:
000914           	.BYTE 0x5
                 _sdBuf:
000919           	.BYTE 0x200
                 _appStartAdr:
000b19           	.BYTE 0x4
                 _adr:
000b1d           	.BYTE 0x4
                 _SectorsPerFat:
000b21           	.BYTE 0x4
                 _fat_begin_lba:
000b25           	.BYTE 0x4
                 _cluster_begin_lba:
000b29           	.BYTE 0x4
                 _fat_file_adr:
000b2d           	.BYTE 0x4
                 _fat_file_next_adr:
000b31           	.BYTE 0x4
                 _filesize:
000b35           	.BYTE 0x4
                 _readbytes:
000b39           	.BYTE 0x4
                 _bytesChecksum:
000b3d           	.BYTE 0x2
                 _checksumCnt:
000b3f           	.BYTE 0x2
                 _Number_of_Reserved_Sectors:
000b41           	.BYTE 0x2
                 _app_pointer:
000b43           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00f5ee 93ba      	ST   -Y,R27
00f5ef 93aa      	ST   -Y,R26
00f5f0 940e f80c 	CALL __SAVELOCR4
00f5f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
                +
00f5f3 e0e0     +LDI R30 , LOW ( 0x0 )
00f5f4 e0f0     +LDI R31 , HIGH ( 0x0 )
00f5f5 e060     +LDI R22 , BYTE3 ( 0x0 )
00f5f6 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00f5f7 940e f7f7 	CALL __PUTPARD1
00f5f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
00f5fa e0a0     +LDI R26 , LOW ( 0x1EF00 )
00f5fb eebf     +LDI R27 , HIGH ( 0x1EF00 )
00f5fc e081     +LDI R24 , BYTE3 ( 0x1EF00 )
00f5fd e090     +LDI R25 , BYTE4 ( 0x1EF00 )
                 	__GETD2N 0x1EF00
00f5fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00f5ff 85a8      	LDD  R26,Y+8
00f600 85b9      	LDD  R27,Y+8+1
00f601 0fae      	ADD  R26,R30
00f602 1fbf      	ADC  R27,R31
00f603 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00f604 940e f7fc 	CALL __PUTPARD2
00f606 940e f7ed 	CALL __GETD2S0
00f608 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00f609 940e f7ed 	CALL __GETD2S0
00f60b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
00f60c 91a0 0b2d 	LDS  R26,_fat_file_adr
00f60e 91b0 0b2e 	LDS  R27,_fat_file_adr+1
00f610 9180 0b2f 	LDS  R24,_fat_file_adr+2
00f612 9190 0b30 	LDS  R25,_fat_file_adr+3
00f614 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
                +
00f615 3faf     +CPI R26 , LOW ( 0xFFFFFFF )
00f616 efef     +LDI R30 , HIGH ( 0xFFFFFFF )
00f617 07be     +CPC R27 , R30
00f618 efef     +LDI R30 , BYTE3 ( 0xFFFFFFF )
00f619 078e     +CPC R24 , R30
00f61a e0ef     +LDI R30 , BYTE4 ( 0xFFFFFFF )
00f61b 079e     +CPC R25 , R30
                 	__CPD2N 0xFFFFFFF
00f61c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
00f61d 91e0 0b2d 	LDS  R30,_fat_file_adr
00f61f 91f0 0b2e 	LDS  R31,_fat_file_adr+1
00f621 9160 0b2f 	LDS  R22,_fat_file_adr+2
00f623 9170 0b30 	LDS  R23,_fat_file_adr+3
00f625 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
00f626 91a0 0b25 	LDS  R26,_fat_begin_lba
00f628 91b0 0b26 	LDS  R27,_fat_begin_lba+1
00f62a 9180 0b27 	LDS  R24,_fat_begin_lba+2
00f62c 9190 0b28 	LDS  R25,_fat_begin_lba+3
00f62e 940e f73e 	CALL __ADDD12
00f630 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0xA:
00f631 940e f7f7 	CALL __PUTPARD1
00f633 e1e9      	LDI  R30,LOW(_sdBuf)
00f634 e0f9      	LDI  R31,HIGH(_sdBuf)
00f635 93fa      	ST   -Y,R31
00f636 93ea      	ST   -Y,R30
00f637 e0a9      	LDI  R26,LOW(9)
00f638 e0b0      	LDI  R27,HIGH(9)
00f639 df31      	RCALL _SD_readSingleBlock
00f63a 93e0 0914 	STS  _result,R30
00f63c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
00f63d 93fa      	ST   -Y,R31
00f63e 93ea      	ST   -Y,R30
00f63f e0a4      	LDI  R26,LOW(4)
00f640 940c f33e 	JMP  _buf2num
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0xC:
00f642 dfda      	RCALL SUBOPT_0x8
                +
00f643 50e2     +SUBI R30 , LOW ( 2 )
00f644 40f0     +SBCI R31 , HIGH ( 2 )
00f645 4060     +SBCI R22 , BYTE3 ( 2 )
00f646 4070     +SBCI R23 , BYTE4 ( 2 )
                 	__SUBD1N 2
00f647 01df      	MOVW R26,R30
00f648 01cb      	MOVW R24,R22
00f649 2de8      	MOV  R30,R8
00f64a e0f0      	LDI  R31,0
00f64b 940e f773 	CALL __CWD1
00f64d 940e f780 	CALL __MULD12U
00f64f 91a0 0b29 	LDS  R26,_cluster_begin_lba
00f651 91b0 0b2a 	LDS  R27,_cluster_begin_lba+1
00f653 9180 0b2b 	LDS  R24,_cluster_begin_lba+2
00f655 9190 0b2c 	LDS  R25,_cluster_begin_lba+3
00f657 940e f73e 	CALL __ADDD12
00f659 93e0 0b1d 	STS  _adr,R30
00f65b 93f0 0b1e 	STS  _adr+1,R31
00f65d 9360 0b1f 	STS  _adr+2,R22
00f65f 9370 0b20 	STS  _adr+3,R23
                +
00f661 e000     +LDI R16 , LOW ( 0 )
00f662 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00f663 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
00f664 2de8      	MOV  R30,R8
00f665 01d8      	MOVW R26,R16
00f666 e0f0      	LDI  R31,0
00f667 17ae      	CP   R26,R30
00f668 07bf      	CPC  R27,R31
00f669 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xE:
00f66a 91e0 0b1d 	LDS  R30,_adr
00f66c 91f0 0b1e 	LDS  R31,_adr+1
00f66e 9160 0b1f 	LDS  R22,_adr+2
00f670 9170 0b20 	LDS  R23,_adr+3
00f672 cfbe      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
00f673 91a0 0b39 	LDS  R26,_readbytes
00f675 91b0 0b3a 	LDS  R27,_readbytes+1
00f677 9180 0b3b 	LDS  R24,_readbytes+2
00f679 9190 0b3c 	LDS  R25,_readbytes+3
00f67b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
00f67c 91ec      	LD   R30,X
00f67d 1fee      	ROL  R30
00f67e e0e0      	LDI  R30,0
00f67f 1fee      	ROL  R30
00f680 29e0      	OR   R30,R0
00f681 01db      	MOVW R26,R22
00f682 93ec      	ST   X,R30
00f683 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00f684 940e f328 	CALL _compbuf
                +
00f686 93e0 0915+STS _result + ( 1 ) , R30
                 	__PUTB1MN _result,1
00f688 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
00f689 e1a9      	LDI  R26,LOW(_sdBuf)
00f68a e0b9      	LDI  R27,HIGH(_sdBuf)
00f68b 0fa2      	ADD  R26,R18
00f68c 1fb3      	ADC  R27,R19
00f68d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
00f68e 91e0 0b19 	LDS  R30,_appStartAdr
00f690 91f0 0b1a 	LDS  R31,_appStartAdr+1
00f692 9160 0b1b 	LDS  R22,_appStartAdr+2
00f694 9170 0b1c 	LDS  R23,_appStartAdr+3
00f696 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x14:
00f697 93e0 0b19 	STS  _appStartAdr,R30
00f699 93f0 0b1a 	STS  _appStartAdr+1,R31
00f69b 9360 0b1b 	STS  _appStartAdr+2,R22
00f69d 9370 0b1c 	STS  _appStartAdr+3,R23
00f69f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00f6a0 e0f0      	LDI  R31,0
00f6a1 940e f773 	CALL __CWD1
00f6a3 940e f76e 	CALL __LSLD16
00f6a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
00f6a6 91a0 0b19 	LDS  R26,_appStartAdr
00f6a8 91b0 0b1a 	LDS  R27,_appStartAdr+1
00f6aa 9180 0b1b 	LDS  R24,_appStartAdr+2
00f6ac 9190 0b1c 	LDS  R25,_appStartAdr+3
00f6ae 940e f743 	CALL __ORD12
00f6b0 cfe6      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
00f6b1 e1ad      	LDI  R26,LOW(_adr)
00f6b2 e0bb      	LDI  R27,HIGH(_adr)
00f6b3 940e f7de 	CALL __GETD1P_INC
                +
00f6b5 5fef     +SUBI R30 , LOW ( - 1 )
00f6b6 4fff     +SBCI R31 , HIGH ( - 1 )
00f6b7 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00f6b8 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00f6b9 940e f7e3 	CALL __PUTDP1_DEC
00f6bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x18:
00f6bc 93e0 0b2d 	STS  _fat_file_adr,R30
00f6be 93f0 0b2e 	STS  _fat_file_adr+1,R31
00f6c0 9360 0b2f 	STS  _fat_file_adr+2,R22
00f6c2 9370 0b30 	STS  _fat_file_adr+3,R23
00f6c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
00f6c5 e1e9      	LDI  R30,LOW(_sdBuf)
00f6c6 e0f9      	LDI  R31,HIGH(_sdBuf)
00f6c7 93fa      	ST   -Y,R31
00f6c8 93ea      	ST   -Y,R30
00f6c9 e0a9      	LDI  R26,LOW(9)
00f6ca e0b0      	LDI  R27,HIGH(9)
00f6cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
00f6cc 93e0 0b1d 	STS  _adr,R30
00f6ce 93f0 0b1e 	STS  _adr+1,R31
00f6d0 9360 0b1f 	STS  _adr+2,R22
00f6d2 9370 0b20 	STS  _adr+3,R23
00f6d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
00f6d5 81ec      	LDD  R30,Y+4
00f6d6 81fd      	LDD  R31,Y+4+1
00f6d7 93fa      	ST   -Y,R31
00f6d8 93ea      	ST   -Y,R30
                +
00f6d9 e2a0     +LDI R26 , 32
00f6da 9fa2     +MUL R26 , R18
00f6db 01f0     +MOVW R30 , R0
00f6dc 9fa3     +MUL R26 , R19
00f6dd 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,32
00f6de 5ee7      	SUBI R30,LOW(-_sdBuf)
00f6df 4ff6      	SBCI R31,HIGH(-_sdBuf)
00f6e0 01df      	MOVW R26,R30
00f6e1 cfa2      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1C:
                +
00f6e2 e2a0     +LDI R26 , 32
00f6e3 9fa2     +MUL R26 , R18
00f6e4 01f0     +MOVW R30 , R0
00f6e5 9fa3     +MUL R26 , R19
00f6e6 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,32
00f6e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
00f6e8 dfd3      	RCALL SUBOPT_0x18
00f6e9 cff8      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1E:
                +
00f6ea 5ced     +SUBI R30 , LOW ( - _sdBuf - ( 26 ) )
00f6eb 4ff6     +SBCI R31 , HIGH ( - _sdBuf - ( 26 ) )
                 	__ADDW1MN _sdBuf,26
00f6ec 81e0      	LD   R30,Z
00f6ed e0f0      	LDI  R31,0
00f6ee 940e f773 	CALL __CWD1
00f6f0 df1b      	RCALL SUBOPT_0x6
00f6f1 940e f743 	CALL __ORD12
00f6f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
00f6f4 9ac0      	SBI  0x18,0
00f6f5 efaf      	LDI  R26,LOW(255)
00f6f6 cd91      	RJMP _SPI_transfer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
00f6f7 2fae      	MOV  R26,R30
00f6f8 dd8f      	RCALL _SPI_transfer
                +
00f6f9 81ab     +LDD R26 , Y + 3
00f6fa 81bc     +LDD R27 , Y + 3 + 1
00f6fb 818d     +LDD R24 , Y + 3 + 2
00f6fc 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
00f6fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
00f6fe 931a      	ST   -Y,R17
00f6ff efaf      	LDI  R26,LOW(255)
00f700 dd87      	RCALL _SPI_transfer
00f701 98c0      	CBI  0x18,0
00f702 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
00f703 93ba      	ST   -Y,R27
00f704 93aa      	ST   -Y,R26
00f705 efaf      	LDI  R26,LOW(255)
00f706 dd81      	RCALL _SPI_transfer
00f707 98c0      	CBI  0x18,0
00f708 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
00f709 efaf      	LDI  R26,LOW(255)
00f70a dd7d      	RCALL _SPI_transfer
00f70b cfe8      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x24:
                +
00f70c 85ea     +LDD R30 , Y + 10
00f70d 85fb     +LDD R31 , Y + 10 + 1
00f70e 856c     +LDD R22 , Y + 10 + 2
00f70f 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
                +
00f710 e0a0     +LDI R26 , LOW ( 0x200 )
00f711 e0b2     +LDI R27 , HIGH ( 0x200 )
00f712 e080     +LDI R24 , BYTE3 ( 0x200 )
00f713 e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
00f714 940e f780 	CALL __MULD12U
                +
00f716 87ea     +STD Y + 10 , R30
00f717 87fb     +STD Y + 10 + 1 , R31
00f718 876c     +STD Y + 10 + 2 , R22
00f719 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00f71a 81ae      	LDD  R26,Y+6
00f71b 81bf      	LDD  R27,Y+6+1
00f71c efef      	LDI  R30,LOW(255)
00f71d 93ec      	ST   X,R30
00f71e efaf      	LDI  R26,LOW(255)
00f71f dd68      	RCALL _SPI_transfer
00f720 98c0      	CBI  0x18,0
00f721 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
00f722 93ea      	ST   -Y,R30
                +
00f723 85eb     +LDD R30 , Y + 11
00f724 85fc     +LDD R31 , Y + 11 + 1
00f725 856d     +LDD R22 , Y + 11 + 2
00f726 857e     +LDD R23 , Y + 11 + 3
                 	__GETD1S 11
00f727 940e f7f7 	CALL __PUTPARD1
00f729 e0a0      	LDI  R26,LOW(0)
00f72a dd75      	RCALL _SD_command
00f72b 2f1e      	MOV  R17,R30
00f72c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
00f72d 01fa      	MOVW R30,R20
00f72e 9631      	ADIW R30,1
00f72f 01af      	MOVW R20,R30
00f730 34e3      	CPI  R30,LOW(0xF43)
00f731 e0af      	LDI  R26,HIGH(0xF43)
00f732 07fa      	CPC  R31,R26
00f733 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00f734 9610      	adiw r26,0
00f735 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00f736 ec84     +LDI R24 , LOW ( 0x9C4 )
00f737 e099     +LDI R25 , HIGH ( 0x9C4 )
                +__DELAY_USW_LOOP :
00f738 9701     +SBIW R24 , 1
00f739 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x9C4
00f73a 95a8      	wdr
00f73b 9711      	sbiw r26,1
00f73c f7c9      	brne __delay_ms0
                 __delay_ms1:
00f73d 9508      	ret
                 
                 __ADDD12:
00f73e 0fea      	ADD  R30,R26
00f73f 1ffb      	ADC  R31,R27
00f740 1f68      	ADC  R22,R24
00f741 1f79      	ADC  R23,R25
00f742 9508      	RET
                 
                 __ORD12:
00f743 2bea      	OR   R30,R26
00f744 2bfb      	OR   R31,R27
00f745 2b68      	OR   R22,R24
00f746 2b79      	OR   R23,R25
00f747 9508      	RET
                 
                 __ANEGW1:
00f748 95f1      	NEG  R31
00f749 95e1      	NEG  R30
00f74a 40f0      	SBCI R31,0
00f74b 9508      	RET
                 
                 __LSLD12:
00f74c 23ee      	TST  R30
00f74d 2e0e      	MOV  R0,R30
00f74e 01fd      	MOVW R30,R26
00f74f 01bc      	MOVW R22,R24
00f750 f031      	BREQ __LSLD12R
                 __LSLD12L:
00f751 0fee      	LSL  R30
00f752 1fff      	ROL  R31
00f753 1f66      	ROL  R22
00f754 1f77      	ROL  R23
00f755 940a      	DEC  R0
00f756 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00f757 9508      	RET
                 
                 __LSRD12:
00f758 23ee      	TST  R30
00f759 2e0e      	MOV  R0,R30
00f75a 01fd      	MOVW R30,R26
00f75b 01bc      	MOVW R22,R24
00f75c f031      	BREQ __LSRD12R
                 __LSRD12L:
00f75d 9576      	LSR  R23
00f75e 9567      	ROR  R22
00f75f 95f7      	ROR  R31
00f760 95e7      	ROR  R30
00f761 940a      	DEC  R0
00f762 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
00f763 9508      	RET
                 
                 __LSLD1:
00f764 0fee      	LSL  R30
00f765 1fff      	ROL  R31
00f766 1f66      	ROL  R22
00f767 1f77      	ROL  R23
00f768 9508      	RET
                 
                 __LSRD16:
00f769 2fe6      	MOV  R30,R22
00f76a 2ff7      	MOV  R31,R23
00f76b e060      	LDI  R22,0
00f76c e070      	LDI  R23,0
00f76d 9508      	RET
                 
                 __LSLD16:
00f76e 2f6e      	MOV  R22,R30
00f76f 2f7f      	MOV  R23,R31
00f770 e0e0      	LDI  R30,0
00f771 e0f0      	LDI  R31,0
00f772 9508      	RET
                 
                 __CWD1:
00f773 2f6f      	MOV  R22,R31
00f774 0f66      	ADD  R22,R22
00f775 0b66      	SBC  R22,R22
00f776 2f76      	MOV  R23,R22
00f777 9508      	RET
                 
                 __MULW12U:
00f778 9ffa      	MUL  R31,R26
00f779 2df0      	MOV  R31,R0
00f77a 9feb      	MUL  R30,R27
00f77b 0df0      	ADD  R31,R0
00f77c 9fea      	MUL  R30,R26
00f77d 2de0      	MOV  R30,R0
00f77e 0df1      	ADD  R31,R1
00f77f 9508      	RET
                 
                 __MULD12U:
00f780 9f7a      	MUL  R23,R26
00f781 2d70      	MOV  R23,R0
00f782 9f6b      	MUL  R22,R27
00f783 0d70      	ADD  R23,R0
00f784 9ff8      	MUL  R31,R24
00f785 0d70      	ADD  R23,R0
00f786 9fe9      	MUL  R30,R25
00f787 0d70      	ADD  R23,R0
00f788 9f6a      	MUL  R22,R26
00f789 2d60      	MOV  R22,R0
00f78a 0d71      	ADD  R23,R1
00f78b 9ffb      	MUL  R31,R27
00f78c 0d60      	ADD  R22,R0
00f78d 1d71      	ADC  R23,R1
00f78e 9fe8      	MUL  R30,R24
00f78f 0d60      	ADD  R22,R0
00f790 1d71      	ADC  R23,R1
00f791 2788      	CLR  R24
00f792 9ffa      	MUL  R31,R26
00f793 2df0      	MOV  R31,R0
00f794 0d61      	ADD  R22,R1
00f795 1f78      	ADC  R23,R24
00f796 9feb      	MUL  R30,R27
00f797 0df0      	ADD  R31,R0
00f798 1d61      	ADC  R22,R1
00f799 1f78      	ADC  R23,R24
00f79a 9fea      	MUL  R30,R26
00f79b 2de0      	MOV  R30,R0
00f79c 0df1      	ADD  R31,R1
00f79d 1f68      	ADC  R22,R24
00f79e 1f78      	ADC  R23,R24
00f79f 9508      	RET
                 
                 __MULB1W2U:
00f7a0 2f6e      	MOV  R22,R30
00f7a1 9f6a      	MUL  R22,R26
00f7a2 01f0      	MOVW R30,R0
00f7a3 9f6b      	MUL  R22,R27
00f7a4 0df0      	ADD  R31,R0
00f7a5 9508      	RET
                 
                 __MULW12:
00f7a6 d029      	RCALL __CHKSIGNW
00f7a7 dfd0      	RCALL __MULW12U
00f7a8 f40e      	BRTC __MULW121
00f7a9 df9e      	RCALL __ANEGW1
                 __MULW121:
00f7aa 9508      	RET
                 
                 __DIVD21U:
00f7ab 933f      	PUSH R19
00f7ac 934f      	PUSH R20
00f7ad 935f      	PUSH R21
00f7ae 2400      	CLR  R0
00f7af 2411      	CLR  R1
00f7b0 2744      	CLR  R20
00f7b1 2755      	CLR  R21
00f7b2 e230      	LDI  R19,32
                 __DIVD21U1:
00f7b3 0faa      	LSL  R26
00f7b4 1fbb      	ROL  R27
00f7b5 1f88      	ROL  R24
00f7b6 1f99      	ROL  R25
00f7b7 1c00      	ROL  R0
00f7b8 1c11      	ROL  R1
00f7b9 1f44      	ROL  R20
00f7ba 1f55      	ROL  R21
00f7bb 1a0e      	SUB  R0,R30
00f7bc 0a1f      	SBC  R1,R31
00f7bd 0b46      	SBC  R20,R22
00f7be 0b57      	SBC  R21,R23
00f7bf f428      	BRCC __DIVD21U2
00f7c0 0e0e      	ADD  R0,R30
00f7c1 1e1f      	ADC  R1,R31
00f7c2 1f46      	ADC  R20,R22
00f7c3 1f57      	ADC  R21,R23
00f7c4 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00f7c5 60a1      	SBR  R26,1
                 __DIVD21U3:
00f7c6 953a      	DEC  R19
00f7c7 f759      	BRNE __DIVD21U1
00f7c8 01fd      	MOVW R30,R26
00f7c9 01bc      	MOVW R22,R24
00f7ca 01d0      	MOVW R26,R0
00f7cb 01ca      	MOVW R24,R20
00f7cc 915f      	POP  R21
00f7cd 914f      	POP  R20
00f7ce 913f      	POP  R19
00f7cf 9508      	RET
                 
                 __CHKSIGNW:
00f7d0 94e8      	CLT
00f7d1 fff7      	SBRS R31,7
00f7d2 c002      	RJMP __CHKSW1
00f7d3 df74      	RCALL __ANEGW1
00f7d4 9468      	SET
                 __CHKSW1:
00f7d5 ffb7      	SBRS R27,7
00f7d6 c006      	RJMP __CHKSW2
00f7d7 95a0      	COM  R26
00f7d8 95b0      	COM  R27
00f7d9 9611      	ADIW R26,1
00f7da f800      	BLD  R0,0
00f7db 9403      	INC  R0
00f7dc fa00      	BST  R0,0
                 __CHKSW2:
00f7dd 9508      	RET
                 
                 __GETD1P_INC:
00f7de 91ed      	LD   R30,X+
00f7df 91fd      	LD   R31,X+
00f7e0 916d      	LD   R22,X+
00f7e1 917d      	LD   R23,X+
00f7e2 9508      	RET
                 
                 __PUTDP1_DEC:
00f7e3 937e      	ST   -X,R23
00f7e4 936e      	ST   -X,R22
00f7e5 93fe      	ST   -X,R31
00f7e6 93ee      	ST   -X,R30
00f7e7 9508      	RET
                 
                 __GETD1S0:
00f7e8 81e8      	LD   R30,Y
00f7e9 81f9      	LDD  R31,Y+1
00f7ea 816a      	LDD  R22,Y+2
00f7eb 817b      	LDD  R23,Y+3
00f7ec 9508      	RET
                 
                 __GETD2S0:
00f7ed 81a8      	LD   R26,Y
00f7ee 81b9      	LDD  R27,Y+1
00f7ef 818a      	LDD  R24,Y+2
00f7f0 819b      	LDD  R25,Y+3
00f7f1 9508      	RET
                 
                 __PUTD1S0:
00f7f2 83e8      	ST   Y,R30
00f7f3 83f9      	STD  Y+1,R31
00f7f4 836a      	STD  Y+2,R22
00f7f5 837b      	STD  Y+3,R23
00f7f6 9508      	RET
                 
                 __PUTPARD1:
00f7f7 937a      	ST   -Y,R23
00f7f8 936a      	ST   -Y,R22
00f7f9 93fa      	ST   -Y,R31
00f7fa 93ea      	ST   -Y,R30
00f7fb 9508      	RET
                 
                 __PUTPARD2:
00f7fc 939a      	ST   -Y,R25
00f7fd 938a      	ST   -Y,R24
00f7fe 93ba      	ST   -Y,R27
00f7ff 93aa      	ST   -Y,R26
00f800 9508      	RET
                 
                 __CPD20:
00f801 9710      	SBIW R26,0
00f802 4080      	SBCI R24,0
00f803 4090      	SBCI R25,0
00f804 9508      	RET
                 
                 __CPD21:
00f805 17ae      	CP   R26,R30
00f806 07bf      	CPC  R27,R31
00f807 0786      	CPC  R24,R22
00f808 0797      	CPC  R25,R23
00f809 9508      	RET
                 
                 __SAVELOCR6:
00f80a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00f80b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00f80c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00f80d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00f80e 931a      	ST   -Y,R17
00f80f 930a      	ST   -Y,R16
00f810 9508      	RET
                 
                 __LOADLOCR6:
00f811 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00f812 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00f813 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00f814 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00f815 8119      	LDD  R17,Y+1
00f816 8108      	LD   R16,Y
00f817 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  50 r1 :  14 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   3 r9 :   0 r10:   0 r11:   4 r12:   5 r13:   2 r14:   0 r15:   0 
r16:  23 r17:  36 r18:  34 r19:  33 r20:  23 r21:  17 r22: 104 r23:  62 
r24:  47 r25:  28 r26: 181 r27:  84 r28:  19 r29:   5 r30: 440 r31: 136 
x  :  40 y  : 184 z  :  16 
Registers used: 25 out of 35 (71.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  26 
adiw  :  21 and   :   0 andi  :  23 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  31 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   0 brne  :  41 brpl  :   0 brsh  :  20 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 139 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   6 cpc   :  32 cpi   :  56 cpse  :   0 dec   :   4 des   :   0 
elpm  :   9 eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :   5 inc   :   2 jmp   :  44 ld    :  32 ldd   :  97 
ldi   : 246 lds   :  99 lpm   :   0 lsl   :   5 lsr   :   1 mov   :  37 
movw  :  49 mul   :  19 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :  11 ori   :   2 out   :  16 pop   :   5 push  :   5 rcall :  86 
ret   :  77 reti  :   0 rjmp  :  72 rol   :  15 ror   :   3 sbc   :   4 
sbci  :  40 sbi   :   3 sbic  :   1 sbis  :   1 sbiw  :  12 sbr   :   1 
sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :  18 st    :  81 std   :  21 sts   :  70 sub   :   1 subi  :  34 
swap  :   0 tst   :   2 wdr   :   4 
Instructions used: 66 out of 117 (56.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x01e000 0x01f030   4086     58   4144  131072   3.2%
[.dseg] 0x000100 0x000b45      0    581    581    4096  14.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
