;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains an example program using the Flash R/W
;*                       functions provided with the files Self_programming.h /
;*                       Self_programming.c . The program should be compiled using
;*                       a linker file (*.xcl) that is configured to place the
;*                       entire program code into the Boot section of the Flash memory.
;*                       Please refer to the application note document for more
;*                       information.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;*****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "flash.h"
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 sts 0x68,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;#include "Self_programming.h"
;#include "spi_sdcard.h"
;
;#define SDBUF_SIZE  512
;#define PAGES_PER_SDBUF (SDBUF_SIZE/PAGESIZE)
;
;//#define DEBUGLED
;//#define DEBUG_ERRSD
;//#define DEBUG_LCD
;
;#ifdef DEBUG_LCD
;
;/* printf */
;#include <stdio.h>
;#include <stdlib.h>
;/* string functions */
;#include <string.h>
;#include <alcd.h>
;
;#endif
;
;unsigned char result[5], sdBuf[SDBUF_SIZE], testBuf[PAGESIZE], token, SectorsPerCluster, pagesCnt;
;unsigned long appStartAdr,adr,SectorsPerFat,fat_begin_lba;
;unsigned long cluster_begin_lba,root_dir_first_cluster,fat_file_adr,fat_file_next_adr,filesize,readbytes;
;unsigned int appPages,bytesChecksum,checksumCnt;
;unsigned int Number_of_Reserved_Sectors;
;//(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;//(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FA ...
;//(unsigned char)sectors_per_cluster = BPB_SecPerClus;
;//(unsigned long)root_dir_first_cluster = BPB_RootClus;
;//void testWrite();
;
;#ifdef DEBUG_ERRSD
;void errorSD(unsigned char err);
;#endif
;#ifdef DEBUG_LCD
;lcd_printhex(unsigned long num32, char size);
;char cnum[10];
;#endif
;
;//function prototypes
;//unsigned char fat_init();//0=sucess, 1,2,3 errors
;//unsigned char dir_open(const char *dirname); //0=sucess, 4 error
;//unsigned char file_open(const char *filename); //0=sucess, 5,6 errors
;unsigned long buf2num(unsigned char *buf,unsigned char len);
;unsigned char compbuf(const unsigned char *src,unsigned char *dest);
;void (*app_pointer)(void) = (void(*)(void))0x0000;
;
;
;
;void main( void ){
; 0002 0051 void main( void ){

	.CSEG
;PCODE: $00000010 VOL: 0
; 0002 0052 
; 0002 0053   unsigned int i,j,k;
; 0002 0054   unsigned char rollnum;
; 0002 0055   unsigned char rollbuf[11];
; 0002 0056 /* globally enable interrupts */
; 0002 0057 #asm("sei")
;PCODE: $00000011 VOL: 0
;	i -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
;	rollnum -> Y+11
;	rollbuf -> Y+0
;PCODE: $00000012 VOL: 0
	sei
;PCODE: $00000013 VOL: 0
; 0002 0058 #ifdef DEBUG_LCD
; 0002 0059     DDRC.0=1;
; 0002 005A     PORTC.0=1;
; 0002 005B     /* initialize the LCD for 2 lines & 16 columns */
; 0002 005C     lcd_init(16);
; 0002 005D     /* switch to writing in Display RAM */
; 0002 005E     lcd_gotoxy(0,0);
; 0002 005F     lcd_clear();
; 0002 0060     lcd_putsf("BootSdTest.");
; 0002 0061     lcd_gotoxy(0,1);
; 0002 0062     lcd_putsf("0");
; 0002 0063     delay_ms(500);
; 0002 0064     //while(1);
; 0002 0065 #endif
; 0002 0066 #ifdef DEBUGLED
; 0002 0067   DDRC=0xFF;
; 0002 0068   PORTC=0xFF;
; 0002 0069     //do
; 0002 006A     {
; 0002 006B       PORTC.0=0;
; 0002 006C       PORTC.1=1;
; 0002 006D       delay_ms(500);
; 0002 006E       PORTC.1=0;
; 0002 006F       PORTC.0=1;
; 0002 0070       delay_ms(500);
; 0002 0071       PORTC=0xFF;
; 0002 0072     }
; 0002 0073     //while(1);
; 0002 0074 #endif
; 0002 0075     //fat init function
; 0002 0076     //init SD
; 0002 0077   if((result[0]=SD_init())!=SD_SUCCESS){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 0078 #ifdef DEBUG_ERRSD
; 0002 0079     errorSD(1);
; 0002 007A #endif
; 0002 007B     //return 1;
; 0002 007C     //app_pointer();//jump to app 0 on error
; 0002 007D   }
; 0002 007E   #ifdef DEBUG_LCD
; 0002 007F   lcd_putsf("1");
; 0002 0080   delay_ms(500);
; 0002 0081   #endif
; 0002 0082   // read MBR get FAT start sector
; 0002 0083   if((result[0]=SD_readSingleBlock(0, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0002 0084 #ifdef DEBUG_ERRSD
; 0002 0085     errorSD(2);
; 0002 0086 #endif
; 0002 0087     //return 2;
; 0002 0088     //app_pointer();//jump to app 0 on error
; 0002 0089   }
; 0002 008A   #ifdef DEBUG_LCD
; 0002 008B   lcd_putsf("2");
; 0002 008C   delay_ms(500);
; 0002 008D   #endif
; 0002 008E   adr=buf2num(&sdBuf[445+9],4);//FAT start sector. 1 sector = 512 bytes
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 008F 
; 0002 0090   //load and read FAT ID (1st) sector. Get FAT info. Secors per Cluster and etc..
; 0002 0091   if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 0092     #ifdef DEBUG_ERRSD
; 0002 0093     errorSD(3);
; 0002 0094     #endif
; 0002 0095     //return 3;
; 0002 0096     //app_pointer();//jump to app 0 on error
; 0002 0097   }
; 0002 0098   #ifdef DEBUG_LCD
; 0002 0099   lcd_putsf("3");
; 0002 009A   delay_ms(500);
; 0002 009B   #endif
; 0002 009C   SectorsPerCluster=sdBuf[0x0D];// 8 sectors per cluster
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 009D   SectorsPerFat=buf2num(&sdBuf[0x24],4); // 0xF10 for test sdcard
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 009E   Number_of_Reserved_Sectors=buf2num(&sdBuf[0x0E],2); // 0x20 usually
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 009F   //read the FAT fils/directories info from Root Directory cluster (usually 2),Number_of_Reserved_Sectors (usually 0x20) ...
; 0002 00A0   //(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
; 0002 00A1   fat_begin_lba=adr+Number_of_Reserved_Sectors;//0x20;//first sector of FAT data
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 00A2   //(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_ ...
; 0002 00A3   //Number_of_FATs always 2. Offset 0x10 8bit
; 0002 00A4   cluster_begin_lba=fat_begin_lba+(2*SectorsPerFat);//number of sector where data begin
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 00A5   //read root dir (sector 2 but always offset 2 too then 0) to find folder 0 FAT reference. and find Flash.dat sector
; 0002 00A6   //lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;
; 0002 00A7   adr=cluster_begin_lba +(2-2)*SectorsPerCluster;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 00A8   //adr*=512UL;
; 0002 00A9 
; 0002 00AA     //dir open function
; 0002 00AB     result[1]=0;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 00AC   for(i=0;i<SectorsPerCluster;i++)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 00AD   {
; 0002 00AE 
; 0002 00AF       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 00B0     #ifdef DEBUG_ERRSD
; 0002 00B1         errorSD(4);
; 0002 00B2     #endif
; 0002 00B3         //return 4;
; 0002 00B4         //app_pointer();//jump to app 0 on error
; 0002 00B5       }
; 0002 00B6       for(j=0;j<(16);j++)//search 16*32bit records in 512bytes sector
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 00B7       {
; 0002 00B8            if((result[1]=compbuf("0          ",&sdBuf[j*32]))!=0)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 00B9            //if((result[1]=compbuf(dirname,&sdBuf[j*32]))!=0)
; 0002 00BA            {
; 0002 00BB                 break;//dir 0 is found
;PCODE: $0000007B VOL: 0
; 0002 00BC            }
; 0002 00BD       }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 00BE       if(result[1]!=0)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0002 00BF       {
; 0002 00C0         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0002 00C1         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 00C2         break;
;PCODE: $00000099 VOL: 0
; 0002 00C3       }
; 0002 00C4       else
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 00C5         adr++;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0002 00C6   }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0002 00C7   if(result[1]==0){
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 00C8      app_pointer();//jump to app on error dir not found
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0002 00C9   }
; 0002 00CA   #ifdef DEBUG_LCD
; 0002 00CB   lcd_putsf("4");//dir found ok
; 0002 00CC   delay_ms(500);
; 0002 00CD   #endif
; 0002 00CE   //fat_file_adr is hold the files records cluster in found dir
; 0002 00CF   //file open func. read first cluster where data about filenames in dir
; 0002 00D0   adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 00D1   for(i=0;i<SectorsPerCluster;i++)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 00D2   {
; 0002 00D3 
; 0002 00D4       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0002 00D5     #ifdef DEBUG_ERRSD
; 0002 00D6         errorSD(5);
; 0002 00D7     #endif
; 0002 00D8         //return 5;
; 0002 00D9         //app_pointer();//jump to app on error
; 0002 00DA       }
; 0002 00DB       for(j=0;j<(16);j++)//search 16 * 32 filename records
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0002 00DC       {
; 0002 00DD            if((result[1]=compbuf("UPDATE",&sdBuf[j*32]))!=0)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0002 00DE            //if((result[1]=compbuf(filename,&sdBuf[j*32]))!=0)
; 0002 00DF            {
; 0002 00E0                 break;//file Flash... is found
;PCODE: $000000E1 VOL: 0
; 0002 00E1            }
; 0002 00E2       }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 00E3       if(result[1]!=0)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 00E4       {
; 0002 00E5         //read 1st number of cluster where data placed
; 0002 00E6         fat_file_adr =(unsigned long)sdBuf[j*32+0x14]<<16;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0002 00E7         fat_file_adr|=(unsigned long)sdBuf[j*32+0x1A];
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0002 00E8         filesize = buf2num(&sdBuf[j*32+0x1C],8);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0002 00E9         break;
;PCODE: $00000107 VOL: 0
; 0002 00EA       }
; 0002 00EB       else
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0002 00EC         adr++;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0002 00ED   }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0002 00EE   if(result[1]==0){// error if file not found
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 00EF     #ifdef DEBUG_ERRSD
; 0002 00F0     errorSD(6);
; 0002 00F1     #endif
; 0002 00F2     //return 6;
; 0002 00F3     //app_pointer();//jump to app on error
; 0002 00F4   }
; 0002 00F5   #ifdef DEBUG_LCD
; 0002 00F6   lcd_putsf("5");//file found ok
; 0002 00F7   delay_ms(500);
; 0002 00F8   #endif
; 0002 00F9   //check UPDATE0 or UPDATE1...UPDATE9
; 0002 00FA   if((sdBuf[j*32+6])=='0'){
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0002 00FB     //return 1;//error if update reach 0
; 0002 00FC     #ifdef DEBUG_ERRSD
; 0002 00FD     errorSD(7);
; 0002 00FE     #endif
; 0002 00FF     #ifdef DEBUG_LCD
; 0002 0100     lcd_putsf("ret0");
; 0002 0101     delay_ms(500);
; 0002 0102     #endif
; 0002 0103     //app_pointer();//jump to app if no more retry
; 0002 0104   }
; 0002 0105   else if(((sdBuf[j*32+6])>'0')||((sdBuf[j*32+6])<='9')){
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 0106     sdBuf[j*32+6]--;//decrement 1 retry.
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0002 0107   }
; 0002 0108   else{
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0002 0109     sdBuf[j*32+6]='9';
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0002 010A   }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 010B   result[0]=SD_writeSingleBlock(adr, sdBuf, &token);//save new UPDATE(num) filename.
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0002 010C   #ifdef DEBUG_LCD
; 0002 010D   lcd_putsf("7");
; 0002 010E   delay_ms(500);
; 0002 010F   #endif
; 0002 0110   //check FAT for chain of clusters to read
; 0002 0111   readbytes=0;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0002 0112   while(fat_file_adr != 0x0FFFFFFFUL)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0002 0113   {
; 0002 0114     //read where next cluster from FAT, check that not EOF
; 0002 0115     //if((result[0]=SD_readSingleBlock(fat_begin_lba, sdBuf, &token))!=SD_SUCCESS){
; 0002 0116 
; 0002 0117     if((result[0]=SD_readSingleBlock(fat_begin_lba+((fat_file_adr*4)/512), sdBuf, &token))!=SD_SUCCESS){
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0002 0118     #ifdef DEBUG_ERRSD
; 0002 0119         errorSD(7);
; 0002 011A     #endif
; 0002 011B         while(1);//do watchdog reset on error
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 011C     }
; 0002 011D     //next cluster address, of file data, read from current cluster record.each record 4 bytes (32bits)
; 0002 011E     //fat_file_next_adr=buf2num(&sdBuf[fat_file_adr*4],4);
; 0002 011F     fat_file_next_adr=buf2num(&sdBuf[(fat_file_adr*4)%512],4);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0002 0120     #ifdef DEBUG_LCD
; 0002 0121       lcd_clear();
; 0002 0122       lcd_putsf("beglba");
; 0002 0123       lcd_printhex(fat_begin_lba,sizeof(fat_begin_lba));
; 0002 0124       delay_ms(1000);
; 0002 0125       lcd_clear();
; 0002 0126       lcd_putsf("curcls");
; 0002 0127       lcd_printhex(fat_file_adr,sizeof(fat_file_adr));
; 0002 0128       lcd_gotoxy(0,1);
; 0002 0129       lcd_putsf("nxtcls");
; 0002 012A       lcd_printhex(fat_file_next_adr,sizeof(fat_file_next_adr));
; 0002 012B       delay_ms(1000);
; 0002 012C     #endif
; 0002 012D     adr=cluster_begin_lba +(fat_file_adr-2)*SectorsPerCluster;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0002 012E     for(i=0;i<SectorsPerCluster;i++)
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0002 012F     {
; 0002 0130         //read data from next sector of file cluster
; 0002 0131         if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0002 0132         #ifdef DEBUG_ERRSD
; 0002 0133             errorSD(8);
; 0002 0134         #endif
; 0002 0135         }
; 0002 0136         #ifdef DEBUG_LCD
; 0002 0137           lcd_clear();
; 0002 0138           lcd_putsf("sector ");
; 0002 0139           lcd_printhex(i,sizeof(i));
; 0002 013A           //delay_ms(500);
; 0002 013B           //if(readbytes==2048){
; 0002 013C           lcd_gotoxy(0,1);
; 0002 013D           lcd_putsf("data0 ");
; 0002 013E           lcd_printhex(sdBuf[0],sizeof(sdBuf[0]));
; 0002 013F           delay_ms(1000);
; 0002 0140         //}
; 0002 0141         #endif
; 0002 0142         //address 2000 = start adr flash app 3 bytes, flash pages 2 bytes, checksum 2 bytes
; 0002 0143         //app bytes starts from 2048, roll 0x88
; 0002 0144         if(readbytes<512){
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0002 0145             //j=0x99;
; 0002 0146             for(j=0;j<256;j++){//find roll
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0002 0147                if(j>0){
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0002 0148                    for(k=0;k<10;k++){//[settings]
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0002 0149                         rollbuf[k]=(sdBuf[k]<<1)|(sdBuf[k]>>7);  //ROL
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0002 014A                         rollbuf[k]^=j;  //XOR   j=roll
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0002 014B                    }
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0002 014C                }
; 0002 014D                result[1]=compbuf("[settings]",&rollbuf[0]);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0002 014E                if(result[1]!=0){
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0002 014F                     rollnum=j;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0002 0150                     #ifdef DEBUG_LCD
; 0002 0151                       lcd_clear();
; 0002 0152                       lcd_putsf("roll ");
; 0002 0153                       lcd_printhex(rollnum,sizeof(rollnum));
; 0002 0154                       delay_ms(1000);
; 0002 0155                     #endif
; 0002 0156                     break;
;PCODE: $000001C8 VOL: 0
; 0002 0157                }
; 0002 0158             }
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 0159             if(result[1]==0){//roll didn't found
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0002 015A                 #ifdef DEBUG_ERRSD
; 0002 015B                 errorSD(9);
; 0002 015C                 #endif
; 0002 015D                 //return;
; 0002 015E             }
; 0002 015F         }
;PCODE: $000001D3 VOL: 0
; 0002 0160 
; 0002 0161         for(j=0;j<512;j++)
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0002 0162         {
; 0002 0163             if(rollnum!=0){
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0002 0164                 sdBuf[j]=(sdBuf[j]<<1)|(sdBuf[j]>>7);  //ROL
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0002 0165                 sdBuf[j]^=rollnum;//0x88;  //XOR
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0002 0166             }
; 0002 0167             checksumCnt+=sdBuf[j];
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0002 0168         }
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0002 0169         readbytes+=512;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0002 016A         //read app data
; 0002 016B         if(readbytes>2048)
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0002 016C         {
; 0002 016D            for(pagesCnt=0;pagesCnt<PAGES_PER_SDBUF;pagesCnt++)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0002 016E            {
; 0002 016F                #ifdef DEBUG_LCD
; 0002 0170                   lcd_clear();
; 0002 0171                   lcd_putsf("appage ");
; 0002 0172                   lcd_printhex(appPages,sizeof(appPages));
; 0002 0173                   delay_ms(1000);
; 0002 0174                   lcd_clear();
; 0002 0175                   lcd_putsf("apstrt ");
; 0002 0176                   lcd_printhex(appStartAdr,sizeof(appStartAdr));
; 0002 0177                   delay_ms(1000);
; 0002 0178                 #endif
; 0002 0179                #asm("wdr")
;PCODE: $00000212 VOL: 0
	wdr
;PCODE: $00000213 VOL: 0
; 0002 017A                if(WriteFlashPage(appStartAdr, &sdBuf[pagesCnt*PAGESIZE])==0)
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0002 017B                {
; 0002 017C                     //after error during flash write page. wait for watchdog to reset
; 0002 017D                     #ifdef DEBUGLED
; 0002 017E                     do
; 0002 017F                     {
; 0002 0180                       PORTC.6=0;
; 0002 0181                       delay_ms(500);
; 0002 0182                       PORTC.6=1;
; 0002 0183                       delay_ms(500);
; 0002 0184                     }
; 0002 0185                     #endif
; 0002 0186                     while(1);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0002 0187                }
; 0002 0188                appStartAdr+=PAGESIZE;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0002 0189                appPages--;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0002 018A                if(appPages==0)
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0002 018B                {
; 0002 018C                     #ifdef DEBUG_LCD
; 0002 018D                       lcd_clear();
; 0002 018E                       lcd_putsf("jump to app");
; 0002 018F                       delay_ms(2000);
; 0002 0190                     #endif
; 0002 0191                     app_pointer();//go to app address 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 0192                     /*
; 0002 0193                     do
; 0002 0194                     {
; 0002 0195                       #ifdef DEBUGLED
; 0002 0196                       PORTC.5=0;
; 0002 0197                       delay_ms(500);
; 0002 0198                       PORTC.5=1;
; 0002 0199                       delay_ms(500);
; 0002 019A                       #endif
; 0002 019B                     }while(1);
; 0002 019C                     */
; 0002 019D                }
; 0002 019E            }
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0002 019F         }
; 0002 01A0         //read app start adr, num of pages, checksum
; 0002 01A1         else if(readbytes>=2000){//Offset=512-48=464
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0002 01A2            appStartAdr=(unsigned long)sdBuf[464]<<16;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0002 01A3            appStartAdr|=(unsigned long)sdBuf[465]<<8;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0002 01A4            appStartAdr|=(unsigned long)sdBuf[466];
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0002 01A5            appPages=(unsigned int)sdBuf[467]<<8;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 01A6            appPages|=(unsigned int)sdBuf[468];
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0002 01A7            bytesChecksum=(unsigned int)sdBuf[469]<<8;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0002 01A8            bytesChecksum|=(unsigned int)sdBuf[470];
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0002 01A9            checksumCnt=0;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0002 01AA            #ifdef DEBUG_LCD
; 0002 01AB               lcd_clear();
; 0002 01AC               lcd_putsf("appags ");
; 0002 01AD               lcd_printhex(appPages,sizeof(appPages));
; 0002 01AE               delay_ms(500);
; 0002 01AF             #endif
; 0002 01B0         }
; 0002 01B1         if(fat_file_next_adr == 0x0FFFFFFFUL){
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0002 01B2 
; 0002 01B3 
; 0002 01B4             if(readbytes >= filesize){
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0002 01B5                 break;
;PCODE: $0000026E VOL: 0
; 0002 01B6             }
; 0002 01B7             else
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0002 01B8             {
; 0002 01B9                 /*
; 0002 01BA                 if(  WriteFlashPage(0x1EF00, sdBuf)){//;     // Writes testbuffer1 to Flash page 2
; 0002 01BB                     #ifdef DEBUGLED
; 0002 01BC                     PORTC.5=0;
; 0002 01BD                     #endif
; 0002 01BE                 }                                          // Function returns TRUE
; 0002 01BF                 if(  ReadFlashPage (0x1EF00, testBuf)){//;      // Reads back Flash page 2 to TestBuffer2
; 0002 01C0                     #ifdef DEBUGLED
; 0002 01C1                     PORTC.6=0;
; 0002 01C2                     #endif
; 0002 01C3                 }
; 0002 01C4                 */
; 0002 01C5             }
;PCODE: $00000271 VOL: 0
; 0002 01C6 
; 0002 01C7         }
; 0002 01C8         adr++;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0002 01C9     }
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0002 01CA     fat_file_adr = fat_file_next_adr;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0002 01CB   }
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0002 01CC   while(1);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0002 01CD }
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0

	.DSEG
_0x4000E:
	.BYTE 0x1E
;
;unsigned char compbuf(const unsigned char *src,unsigned char *dest)
; 0002 01D0 {

	.CSEG
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0002 01D1     while(*src)
;PCODE: $00000289 VOL: 0
;	*src -> Y+2
;	*dest -> Y+0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0002 01D2     {
; 0002 01D3         if(*src++ != *dest++)
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0002 01D4             return 0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0002 01D5         //src++;dest++;
; 0002 01D6         //len--;
; 0002 01D7     }
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0002 01D8     return 1;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0002 01D9 }
;PCODE: $000002A0 VOL: 0
;
;#ifdef DEBUG_ERRSD
;void errorSD(unsigned char err)
;{
;#ifdef DEBUGLED
;    unsigned int repeat=10;
;    do{
;       PORTC &= ~(1<<err);
;       delay_ms(500);
;       PORTC = 0xFF;
;       delay_ms(500);
;    }
;    while(repeat--);
;#endif
;#ifdef DEBUG_LCD
;  char strnum[5];
;    if(err>100){
;       err=100;
;    }
;    itoa(err,strnum);
;    lcd_gotoxy(0,0);
;    lcd_putsf("SD ERROR: ");
;    lcd_puts(strnum);
;    while(1);
;#else
;    app_pointer();
;#endif
;    //while(1);
;}
;#endif
;
;//convert bytes buffer to 32bit UL value
;unsigned long buf2num(unsigned char *buf,unsigned char len)
; 0002 01FB {
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0002 01FC     unsigned long num=0;
; 0002 01FD     //unsigned char i;
; 0002 01FE     /*
; 0002 01FF     if(len>4){
; 0002 0200        len=4;// 4bytes max 32bit UL
; 0002 0201     }
; 0002 0202     */
; 0002 0203     for(;((len>0));len--)
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;	*buf -> Y+5
;	len -> Y+4
;	num -> Y+0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0002 0204     {
; 0002 0205         num<<=8;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0002 0206         num|=buf[len-1];
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0002 0207     }
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0002 0208     return num;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0002 0209 }
;PCODE: $000002CC VOL: 0
;
;
;#ifdef DEBUG_LCD
;lcd_printhex(unsigned long num32, char size){
;    char i,nible;
;    //num32>>=((4-size)*8);//0x12345678 >>24 -> 0x00000012
;    //lcd_putchar(size+'0');
;    for(i=1;i<=(size*2);i++){
;        nible=((num32)>>(32-((4-size)*8)-((i)*4)))&0x0F;
;        if(nible>9){
;          nible-=0x0A;
;          nible+='A';
;        }
;        else{
;          nible+='0';
;        }
;        lcd_putchar(nible);
;    }
;}
;#endif
