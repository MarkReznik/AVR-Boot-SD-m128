;//-----------------------------------------------------------------------
;// PFF - Low level disk control module for ATmega32
;//-----------------------------------------------------------------------
;#define _WRITE_FUNC	1			//allow write operations
;
;//#include "common.h"
;#include "diskio.h"
;#include "mmc.h"
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// Definitions for MMC/SDC connection
;
;//#define SD_INS  6
;//#define SD_WP   7
;
;// Definitions for MMC/SDC command
;#define CMD0	(0x40+0)	// GO_IDLE_STATE
;#define CMD1	(0x40+1)	// SEND_OP_COND (MMC)
;#define	ACMD41	(0xC0+41)	// SEND_OP_COND (SDC)
;#define CMD8	(0x40+8)	// SEND_IF_COND
;#define CMD16	(0x40+16)	// SET_BLOCKLEN
;#define CMD17	(0x40+17)	// READ_SINGLE_BLOCK
;#define CMD24	(0x40+24)	// WRITE_BLOCK
;#define CMD55	(0x40+55)	// APP_CMD
;#define CMD58	(0x40+58)	// READ_OCR
;
;//-----------------------------------------------------------------------
;// SPI functions
;//-----------------------------------------------------------------------
;#define hardware_spi // если определено, то spi аппаратный
;
;#define SPI_PORTX PORTB
;#define SPI_DDRX DDRB
;
;#define SPI_MISO SD_DO
;#define SPI_MOSI SD_DI
;#define SPI_SCK SD_CLK
;#define SPI_SS SD_CS
;
;void INIT_SPI(void) {
; 0002 0027 void INIT_SPI(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0028 #ifdef hardware_spi
; 0002 0029 	/*настройка портов ввода-вывода
; 0002 002A 	 все выводы, кроме MISO выходы*/
; 0002 002B 	SPI_DDRX |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS) | (0 << SPI_MISO);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0002 002C 	SPI_PORTX |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS) | (1 << SPI_MISO);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 002D 
; 0002 002E 	/*разрешение spi,старший бит вперед,мастер, режим 0*/
; 0002 002F 	SPCR = (1 << SPE) | (0 << DORD) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0030 	SPSR = (1 << SPI2X);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0031 #else
; 0002 0032 	PORTB |= (1<<SD_CS) | (1<<SD_DO) | (1<<SD_DI)/* | (1<<SD_WP) | (1<<SD_INS)*/;
; 0002 0033 	DDRB |=(1<<SD_CS) | (1<<SD_DI) | (1<<SD_CLK);
; 0002 0034 #endif
; 0002 0035 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void xmit_spi(BYTE data) {		// Send a byte
; 0002 0037 void xmit_spi(BYTE data) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 0038 #ifdef hardware_spi
; 0002 0039 	SPDR = data;
;PCODE: $0000001D VOL: 0
;	data -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 003A 	while (!(SPSR & (1 << SPIF)));
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 003B #else
; 0002 003C 	BYTE i;
; 0002 003D 
; 0002 003E 	for (i = 0; i < 8; i++) {
; 0002 003F 		if ((data & 0x80) == 0x00)
; 0002 0040 			PORTB &= ~(1<<SD_DI);
; 0002 0041 		else
; 0002 0042 			PORTB |= (1<<SD_DI);
; 0002 0043 		data = data << 1;
; 0002 0044 		PORTB |= (1<<SD_CLK);
; 0002 0045 		#asm("nop")
; 0002 0046 		PORTB &= ~(1<<SD_CLK);
; 0002 0047 	}
; 0002 0048 #endif
; 0002 0049 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;BYTE rcv_spi(void) {				// Send 0xFF and receive a byte
; 0002 004B BYTE rcv_spi(void) {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 004C #ifdef hardware_spi
; 0002 004D 	unsigned char data;
; 0002 004E 	SPDR = 0xFF;
;PCODE: $0000002B VOL: 0
;	data -> R17
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 004F 	while (!(SPSR & (1 << SPIF)));
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 0050 	data = SPDR;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0051 	return data;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0052 #else
; 0002 0053 	BYTE i, res = 0;
; 0002 0054 
; 0002 0055 	PORTB |= (1<<SD_DI);
; 0002 0056 
; 0002 0057 	for (i = 0; i < 8; i++) {
; 0002 0058 		PORTB |= (1<<SD_CLK);
; 0002 0059 		res = res << 1;
; 0002 005A 		if ((PINB & (1<<SD_DO))!=0x00)
; 0002 005B 		res = res | 0x01;
; 0002 005C 		PORTB &= ~(1<<SD_CLK);
; 0002 005D 		#asm("nop")
; 0002 005E 	}
; 0002 005F 	return res;
; 0002 0060 #endif
; 0002 0061 } /* Send 0xFF and receive a byte */
;PCODE: $00000039 VOL: 0
;//-----------------------------------------------------------------------
;
;
;
;//-----------------------------------------------------------------------
;//   Module Private Function
;//-----------------------------------------------------------------------
;static BYTE CardType;
;
;//-----------------------------------------------------------------------
;// Deselect the card and release SPI bus
;//-----------------------------------------------------------------------
;static
;void release_spi (void)
; 0002 0070 {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 0071 	rcv_spi();
;PCODE: $0000003C VOL: 0
; 0002 0072 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;//-----------------------------------------------------------------------
;// Send a command packet to MMC
;//-----------------------------------------------------------------------
;static
;BYTE send_cmd (
; 0002 0079 	BYTE cmd,		// Command byte
; 0002 007A 	DWORD arg		// Argument
; 0002 007B )
; 0002 007C {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 007D 	BYTE n, res;
; 0002 007E 
; 0002 007F 
; 0002 0080 	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n>
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;	cmd -> Y+6
;	arg -> Y+2
;	n -> R17
;	res -> R16
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 0081 		cmd &= 0x7F;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 0082 		res = send_cmd(CMD55, 0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 0083 		if (res > 1) return res;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0084 	}
;PCODE: $00000059 VOL: 0
; 0002 0085 
; 0002 0086 	// Select the card
; 0002 0087 	DESELECT();
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0002 0088 	rcv_spi();
;PCODE: $0000005D VOL: 0
; 0002 0089 	SELECT();
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 008A 	rcv_spi();
;PCODE: $00000060 VOL: 0
; 0002 008B 
; 0002 008C 	// Send a command packet
; 0002 008D 	xmit_spi(cmd);						// Start + Command index
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0002 008E 	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24]
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0002 008F 	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16]
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0002 0090 	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8]
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0091 	xmit_spi((BYTE)arg);				// Argument[7..0]
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 0092 	n = 0x01;							// Dummy CRC + Stop
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 0093 	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 0094 	if (cmd == CMD8) n = 0x87;			// Valid CRC for CMD8(0x1AA)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0095 	xmit_spi(n);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0096 
; 0002 0097 	// Receive a command response
; 0002 0098 	n = 10;								// Wait for a valid response in timeout of 10 attempts
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0099 	do {
;PCODE: $00000085 VOL: 0
; 0002 009A 		res = rcv_spi();
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 009B 	} while ((res & 0x80) && --n);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 009C 
; 0002 009D 	return res;			// Return with the response value
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 009E }
;PCODE: $0000009C VOL: 0
;
;//--------------------------------------------------------------------------
;//
;//   Public Functions
;//
;//--------------------------------------------------------------------------
;
;//--------------------------------------------------------------------------
;// Initialize Disk Drive
;//--------------------------------------------------------------------------
;DSTATUS disk_initialize (void)
; 0002 00AA {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 00AB 	BYTE n, cmd, ty, ocr[4];
; 0002 00AC 	WORD tmr;
; 0002 00AD 
; 0002 00AE 
; 0002 00AF 	INIT_SPI();
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;	n -> R17
;	cmd -> R16
;	ty -> R19
;	ocr -> Y+6
;	tmr -> R20,R21
;PCODE: $000000A1 VOL: 0
; 0002 00B0 
; 0002 00B1 //	if ((PINB&_BV(SD_INS))!=0x00) return STA_NOINIT;
; 0002 00B2 
; 0002 00B3 #if _WRITE_FUNC
; 0002 00B4 	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0002 00B5 #endif
; 0002 00B6 	for (n = 100; n; n--) rcv_spi();	// Dummy clocks
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 00B8 ty = 0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 00B9 	if (send_cmd(CMD0, 0) == 1) {			// Enter Idle state
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0002 00BA 		if (send_cmd(CMD8, 0x1AA) == 1) {	// SDv2
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 00BB 			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Get trailing return value of R7 resp
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 00BC if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 00BD 				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00BE 				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0002 00BF 					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 00C0 ty = (ocr[0] & 0x40) ? 0x04	 | 0x08	 : 0x04	;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0002 00C1 				}
; 0002 00C2 			}
;PCODE: $00000129 VOL: 0
; 0002 00C3 		} else {							// SDv1 or MMCv3
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 00C4 			if (send_cmd(ACMD41, 0) <= 1) 	{
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 00C5 				ty = CT_SD1; cmd = ACMD41;	// SDv1
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0002 00C6 			} else {
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 00C7 				ty = CT_MMC; cmd = CMD1;	// MMCv3
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0002 00C8 			}
;PCODE: $0000013D VOL: 0
; 0002 00C9 			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0002 00CA 			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0002 00CB 				ty = 0;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 00CC 		}
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 00CD 	}
; 0002 00CE 	CardType = ty;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 00CF 	release_spi();
;PCODE: $00000165 VOL: 0
; 0002 00D0 
; 0002 00D1 #ifdef hardware_spi
; 0002 00D2 	//для аппаратного SPI!!!--------------------------------------------
; 0002 00D3 	SPCR &= ~((1 << SPR1) | (1 << SPR0)); // убираем предделитель
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0002 00D4 	SPSR |= (1 << SPI2X); // удваиваем частоту
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0002 00D5 	//------------------------------------------------------------------
; 0002 00D6 #endif
; 0002 00D7 
; 0002 00D8 	return ty ? 0 : STA_NOINIT;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0002 00D9 }
;PCODE: $00000176 VOL: 0
;//-----------------------------------------------------------------------
;// Read partial sector
;//-----------------------------------------------------------------------
;
;DRESULT disk_readp (
; 0002 00DF 	BYTE *buff,		// Pointer to the read buffer (NULL:Read bytes are forwarded to the stream)
; 0002 00E0 	DWORD lba,		// Sector number (LBA)
; 0002 00E1 	WORD ofs,		// Byte offset to read from (0..511)
; 0002 00E2 	WORD cnt		// Number of bytes to read (ofs + cnt mus be <= 512)
; 0002 00E3 )
; 0002 00E4 {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0002 00E5 	DRESULT res;
; 0002 00E6 	BYTE rc;
; 0002 00E7 	WORD bc;
; 0002 00E8 
; 0002 00E9 //	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
; 0002 00EA 
; 0002 00EB 	if (!(CardType & CT_BLOCK)) lba *= 512;		// Convert to byte address if needed
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;	*buff -> Y+12
;	lba -> Y+8
;	ofs -> Y+6
;	cnt -> Y+4
;	res -> R17
;	rc -> R16
;	bc -> R18,R19
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0002 00EC 
; 0002 00ED 	res = RES_ERROR;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0002 00EE 	if (send_cmd(CMD17, lba) == 0) {		// READ_SINGLE_BLOCK
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0002 00EF 
; 0002 00F0 		bc = 30000;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0002 00F1 		do {							// Wait for data packet in timeout of 100ms
;PCODE: $0000018D VOL: 0
; 0002 00F2 			rc = rcv_spi();
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0002 00F3 		} while (rc == 0xFF && --bc);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0002 00F4 
; 0002 00F5 		if (rc == 0xFE) {				// A data packet arrived
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0002 00F6 			bc = 514 - ofs - cnt;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0002 00F7 
; 0002 00F8 			// Skip leading bytes
; 0002 00F9 			if (ofs) {
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0002 00FA 				do rcv_spi(); while (--ofs);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0002 00FB 			}
; 0002 00FC 
; 0002 00FD 			// Receive a part of the sector
; 0002 00FE 			if (buff) {	// Store data to the memory
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0002 00FF 				do
;PCODE: $000001B7 VOL: 0
; 0002 0100 					*buff++ = rcv_spi();
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 0101 				while (--cnt);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0002 0102 			} else {	// Forward data to the outgoing stream (depends on the project)
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0002 0103 				do
;PCODE: $000001C9 VOL: 0
; 0002 0104                 ;//uart_transmit(rcv_spi());		// (Console output)
; 0002 0105 				while (--cnt);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0002 0106 			}
;PCODE: $000001D1 VOL: 0
; 0002 0107 
; 0002 0108 			// Skip trailing bytes and CRC
; 0002 0109 			do rcv_spi(); while (--bc);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0002 010A 
; 0002 010B 			res = RES_OK;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0002 010C 		}
; 0002 010D 	}
;PCODE: $000001DD VOL: 0
; 0002 010E 
; 0002 010F 	release_spi();
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0002 0110 
; 0002 0111 	return res;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 0112 }
;PCODE: $000001E4 VOL: 0
;
;//-----------------------------------------------------------------------
;// Write partial sector
;//-----------------------------------------------------------------------
;#if _WRITE_FUNC
;
;DRESULT disk_writep (
; 0002 011A 	const BYTE *buff,	// Pointer to the bytes to be written (NULL:Initiate/Finalize sector write)
; 0002 011B 	DWORD sa			// Number of bytes to send, Sector number (LBA) or zero
; 0002 011C )
; 0002 011D {
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0002 011E 	DRESULT res;
; 0002 011F 	WORD bc;
; 0002 0120 	static WORD wc;
; 0002 0121 
; 0002 0122 //	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
; 0002 0123 //	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;
; 0002 0124 
; 0002 0125 	res = RES_ERROR;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;	*buff -> Y+8
;	sa -> Y+4
;	res -> R17
;	bc -> R18,R19
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0002 0126 
; 0002 0127 	if (buff) {		// Send data bytes
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0002 0128 		bc = (WORD)sa;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0002 0129 		while (bc && wc) {		// Send data bytes to the card
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0002 012A 			xmit_spi(*buff++);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0002 012B 			wc--; bc--;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0002 012C 		}
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0002 012D 		res = RES_OK;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0002 012E 	} else {
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0002 012F 		if (sa) {	// Initiate sector write process
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0002 0130 			if (!(CardType & CT_BLOCK)) sa *= 512;	// Convert to byte address if needed
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0002 0131 			if (send_cmd(CMD24, sa) == 0) {			// WRITE_SINGLE_BLOCK
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0002 0132 				xmit_spi(0xFF); xmit_spi(0xFE);		// Data block header
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0002 0133 				wc = 512;							// Set byte counter
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0002 0134 				res = RES_OK;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0002 0135 			}
; 0002 0136 		} else {	// Finalize sector write process
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0137 			bc = wc + 2;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0002 0138 			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0002 0139 if ((rcv_spi() & 0x1F) == 0x05) {
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0002 013A 				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	// Wait ready
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0002 013B 				if (bc) res = RES_OK;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0002 013C 			}
;PCODE: $00000250 VOL: 0
; 0002 013D 			release_spi();
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 013E 		}
;PCODE: $00000253 VOL: 0
; 0002 013F 	}
;PCODE: $00000254 VOL: 0
; 0002 0140 
; 0002 0141 	return res;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0002 0142 }
;PCODE: $00000259 VOL: 0
;#endif
