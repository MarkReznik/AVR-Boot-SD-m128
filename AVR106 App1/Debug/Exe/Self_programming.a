;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : All devices with bootloaders support.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains functions for easy reading and writing
;*                       of Flash memory on parts having the "Self-programming"
;*                       feature. The user functions are as follows:
;*
;*                       ReadFlashByte()
;*                       ReadFlashPage()
;*                       WriteFlashByte()
;*                       WriteFlashPage()
;*                       RecoverFlash()
;*
;*                       The remaining functions contained in this file are used
;*                       by the functions listet above.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include <inavr.h>
;#include "Self_programming.h"
;//#include "flash.h"
;
;void (*__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F)(void flash * addr, unsigned int data)= (void(*)(void flash *, unsigned in ...
;void (*__AddrToZ24ByteToSPMCR_SPM_W)(void flash * addr)= (void(*)(void flash *)) 0x0F9EB;
;void (*__AddrToZ24ByteToSPMCR_SPM_E)(void flash * addr)= (void(*)(void flash *)) 0x0FA0B;
;void (*__AddrToZ24ByteToSPMCR_SPM_EW)(void flash * addr)= (void(*)(void flash *)) 0x0FA2B;
;
;/*!
;* Declare global struct variable in EEPROM if Flash recovery enabled.
;* FlashBackup pageNumber holds Flash pageaddress (/PAGESIZE) the data in Flash
;* recovery buffer should be written to if data need to be recovered.
;* FlashBackup.status tells if data need to be recovered.
;**/
;#ifdef __FLASH_RECOVER
;__eeprom struct {
;  unsigned int  pageNumber;
;  unsigned char status;
;}FlashBackup = {0};
;#endif
;
;__eeprom struct {
;  unsigned long  flashStartAdr;
;  unsigned int length;
;  unsigned char status;//0=already moved to flash, 1=not moved to flash yet
;  unsigned char data[PAGESIZE];
;}_EepromBackup @10;
;
;/*!
;* The function Returns one byte located on Flash address given by ucFlashStartAdr.
;**/
;unsigned char ReadFlashByte(MyAddressType flashStartAdr){
; 0001 0042 unsigned char ReadFlashByte(MyAddressType flashStartAdr){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0043 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
; 0001 0044   flashStartAdr;//+=ADR_LIMIT_LOW;
;PCODE: $0000000F VOL: 0
;	flashStartAdr -> Y+0
;PCODE: $00000010 VOL: 0
; 0001 0045   return (unsigned char)*((MyFlashCharPointer)flashStartAdr);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0046 //#pragma diag_default=Pe1053 // Back to default.
; 0001 0047 } // Returns data from Flash
;PCODE: $00000015 VOL: 0
;
;/*!
;* The function reads one Flash page from address flashStartAdr and stores data
;* in array dataPage[]. The number of bytes stored is depending upon the
;* Flash page size. The function returns FALSE if input address is not a Flash
;* page address, else TRUE.
;**/
;unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
; 0001 004F unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0050   unsigned int index;
; 0001 0051   flashStartAdr;//+=ADR_LIMIT_LOW;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	flashStartAdr -> Y+4
;	*dataPage -> Y+2
;	index -> R16,R17
;PCODE: $0000001B VOL: 0
; 0001 0052   if(!(flashStartAdr & (PAGESIZE-1))){      // If input address is a page address
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0053     for(index = 0; index < PAGESIZE; index++){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0054       dataPage[index] = ReadFlashByte(flashStartAdr + index);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0055     }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0056     return TRUE;                            // Return TRUE if valid page address
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0057   }
; 0001 0058   else{
;PCODE: $00000040 VOL: 0
; 0001 0059     return FALSE;                           // Return FALSE if not valid page address
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 005A   }
;PCODE: $00000048 VOL: 0
; 0001 005B }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;unsigned char ReadFlashBytes(MyAddressType flashStartAdr, unsigned char *dataPage, unsigned int length){
; 0001 005C unsigned char ReadFlashBytes(MyAddressType flashStartAdr, unsigned char *dataPage, unsigned int length){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 005D   	unsigned int index;
; 0001 005E   	flashStartAdr+=ADR_LIMIT_LOW;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	flashStartAdr -> Y+6
;	*dataPage -> Y+4
;	length -> Y+2
;	index -> R16,R17
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 005F     for(index = 0; index < length; index++){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0060       dataPage[index] = ReadFlashByte(flashStartAdr + index);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0061     }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0062     return TRUE;                            // Return TRUE if valid page address
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0063 }
;PCODE: $00000078 VOL: 0
;unsigned char VerifyFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
; 0001 0064 unsigned char VerifyFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0065   unsigned int index;
; 0001 0066   if(!(flashStartAdr & (PAGESIZE-1))){      // If input address is a page address
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	flashStartAdr -> Y+4
;	*dataPage -> Y+2
;	index -> R16,R17
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0067     for(index = 0; index < PAGESIZE; index++){
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0068       if(dataPage[index] != ReadFlashByte(flashStartAdr + index))
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0069       {
; 0001 006A         PORTC.6=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 006B         return FALSE;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 006C       }
; 0001 006D     }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 006E     return TRUE;                            // Return TRUE if valid page address
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 006F   }
; 0001 0070   else{
;PCODE: $000000AE VOL: 0
; 0001 0071     PORTC.7=0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0072     return FALSE;                           // Return FALSE if not valid page address
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 0073   }
;PCODE: $000000B8 VOL: 0
; 0001 0074 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;unsigned char WriteFlashBytes(MyAddressType flashAdr, unsigned char *data, unsigned int length)
; 0001 0076 {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 0077     unsigned char tempBuffer[PAGESIZE];
; 0001 0078     MyAddressType flashAdrStart,flashAdrNext;
; 0001 0079     unsigned int lengthStart,lengthIndex;                //length=0x20
; 0001 007A     while(length)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	flashAdr -> Y+272
;	*data -> Y+270
;	length -> Y+268
;	tempBuffer -> Y+12
;	flashAdrStart -> Y+8
;	flashAdrNext -> Y+4
;	lengthStart -> R16,R17
;	lengthIndex -> R18,R19
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 007B     {
; 0001 007C         flashAdrStart= flashAdr-(flashAdr%PAGESIZE);//0x1F0-(0x1F0%0x100)=0x0100                        //
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 007D         flashAdrNext = flashAdrStart+PAGESIZE;          //0x0100+0x100=0x200
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 007E         if((flashAdrNext - flashAdr) >= length)    //enough space case
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 007F         {
; 0001 0080            lengthStart=length;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 0081            length=0;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 0082         }
; 0001 0083         else                                   //(0x200-0x1F0)<0x20
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0084         {
; 0001 0085            lengthStart=(flashAdrNext - flashAdr);        //len1=0x200-0x1F0=0x10
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 0086            length-=lengthStart;                         //len2=0x20-0x10=0x10
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 0087         }
;PCODE: $000000E6 VOL: 0
; 0001 0088         if(ReadFlashPage(flashAdrStart,tempBuffer)==FALSE) //read flash page to tempBuffer
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0089         {
; 0001 008A             PORTC.3=0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 008B             return FALSE;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 008C         }
; 0001 008D         for(lengthIndex=(flashAdr%PAGESIZE);lengthIndex<((flashAdr%PAGESIZE)+lengthStart);lengthIndex++)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 008E         {
; 0001 008F             tempBuffer[lengthIndex]=*data++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0001 0090         }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 0091         flashAdr=flashAdrNext;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 0092         if(WriteFlashPage(flashAdrStart+ADR_LIMIT_LOW,tempBuffer)==FALSE) //write tempBuffer to flash page
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 0093         {
; 0001 0094             PORTC.4=0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0095             return FALSE;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 0096         }
; 0001 0097     }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0001 0098     return TRUE;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 0099 }
;PCODE: $0000012C VOL: 0
;
;/*!
;* The function writes byte data to Flash address flashAddr. Returns FALSE if
;* input address is not valid Flash byte address for writing, else TRUE.
;**/
;unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
; 0001 009F unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00A0   MyAddressType  pageAdr;
; 0001 00A1   unsigned char eepromInterruptSettings,saveSREG;
; 0001 00A2   flashAddr+=ADR_LIMIT_LOW;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;	flashAddr -> Y+7
;	data -> Y+6
;	pageAdr -> Y+2
;	eepromInterruptSettings -> R17
;	saveSREG -> R16
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 00A3   if( AddressCheck( flashAddr & ~(PAGESIZE-1) )){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 00A4 
; 0001 00A5     if(ReadFlashByte(flashAddr)==data)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00A6     {
; 0001 00A7         PORTC.4=0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 00A8         return TRUE;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0001 00A9     }
; 0001 00AA     eepromInterruptSettings= EECR & (1<<EERIE); // Stores EEPROM interrupt mask
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0001 00AB     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00AC     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 00AD     saveSREG=SREG;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 00AE     #asm("cli")
;PCODE: $00000159 VOL: 0
	cli
;PCODE: $0000015A VOL: 0
; 0001 00AF     pageAdr=flashAddr & ~(PAGESIZE-1);      // Gets Flash page address from byte address
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 00B0 
; 0001 00B1     #ifdef __FLASH_RECOVER
; 0001 00B2     FlashBackup.status=0;                   // Inicate that Flash buffer does
; 0001 00B3                                             // not contain data for writing
; 0001 00B4     while(EECR & (1<<EEWE));
; 0001 00B5     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
; 0001 00B6     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
; 0001 00B7     FlashBackup.pageNumber = (unsigned int) (pageAdr/PAGESIZE); // Stores page address
; 0001 00B8                                                        // data should be written to
; 0001 00B9     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
; 0001 00BA                                                // contains unwritten data
; 0001 00BB     while(EECR & (1<<EEWE));
; 0001 00BC     #endif
; 0001 00BD 
; 0001 00BE     if(LpmReplaceSpm(flashAddr, data)!=0)         // Fills Flash write buffer
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0001 00BF     {
; 0001 00C0         _PAGE_WRITE(pageAdr);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 00C1         PORTC.1=0;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 00C2     }
; 0001 00C3     else
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 00C4     {
; 0001 00C5         _PAGE_EW(pageAdr);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00C6         PORTC.2=0;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0001 00C7     }
;PCODE: $00000170 VOL: 0
; 0001 00C8 
; 0001 00C9     #ifdef __FLASH_RECOVER
; 0001 00CA     FlashBackup.status = 0;                 // Indicates that Flash recovery buffer
; 0001 00CB                                             // does not contain unwritten data
; 0001 00CC     while(EECR & (1<<EEWE));
; 0001 00CD     #endif
; 0001 00CE 
; 0001 00CF     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00D0     SREG=saveSREG;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 00D1     return TRUE;                            // Return TRUE if address
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0001 00D2                                             // valid for writing
; 0001 00D3   }
; 0001 00D4   else
;PCODE: $0000017D VOL: 0
; 0001 00D5     return FALSE;                           // Return FALSE if address not
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 00D6                                             // valid for writing
; 0001 00D7 }
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;
;/*!
;* The function writes data from array dataPage[] to Flash page address
;* flashStartAdr. The Number of bytes written is depending upon the Flash page
;* size. Returns FALSE if input argument ucFlashStartAdr is not a valid Flash
;* page address for writing, else TRUE.
;**/
;unsigned char WriteFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage)
; 0001 00E0 {
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 00E1   unsigned int index;
; 0001 00E2   unsigned char eepromInterruptSettings,saveSREG;
; 0001 00E3   MyAddressType  pageAdr;
; 0001 00E4   flashStartAdr;//+=ADR_LIMIT_LOW;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;	flashStartAdr -> Y+10
;	*dataPage -> Y+8
;	index -> R16,R17
;	eepromInterruptSettings -> R19
;	saveSREG -> R18
;	pageAdr -> Y+4
;PCODE: $00000192 VOL: 0
; 0001 00E5   if( AddressCheck(flashStartAdr) ){
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0001 00E6     if(eepromBackup(flashStartAdr,PAGESIZE,dataPage)==0)
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0001 00E7     {
; 0001 00E8         return FALSE;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0001 00E9     }
; 0001 00EA     eepromInterruptSettings = EECR & (1<<EERIE); // Stoes EEPROM interrupt mask
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0001 00EB     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0001 00EC     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0001 00ED     saveSREG=SREG;                          // Save SREG
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0001 00EE     #asm("cli")
;PCODE: $000001B1 VOL: 0
	cli
;PCODE: $000001B2 VOL: 0
; 0001 00EF 
; 0001 00F0     #ifdef __FLASH_RECOVER
; 0001 00F1     FlashBackup.status=0;                   // Inicate that Flash buffer does
; 0001 00F2                                             // not contain data for writing
; 0001 00F3     while(EECR & (1<<EEWE));
; 0001 00F4 
; 0001 00F5     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
; 0001 00F6       _WAIT_FOR_SPM();
; 0001 00F7       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
; 0001 00F8     }
; 0001 00F9 
; 0001 00FA     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
; 0001 00FB     FlashBackup.pageNumber=(unsigned int)(flashStartAdr/PAGESIZE);
; 0001 00FC     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
; 0001 00FD                                            // contains unwritten data
; 0001 00FE     while(EECR & (1<<EEWE));
; 0001 00FF     #endif
; 0001 0100 
; 0001 0101     //debug
; 0001 0102     _PAGE_ERASE(flashStartAdr);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 0103 
; 0001 0104     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0001 0105       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0001 0106     }
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0001 0107     _PAGE_WRITE(flashStartAdr);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 0108     if(VerifyFlashPage(flashStartAdr,dataPage)==FALSE)
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0001 0109     {
; 0001 010A       //PORTC.6=0;
; 0001 010B       return FALSE;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 010C     }
; 0001 010D     #ifdef __FLASH_RECOVER
; 0001 010E       FlashBackup.status=0;                 // Inicate that Flash buffer does
; 0001 010F                                             // not contain data for writing
; 0001 0110       while(EECR & (1<<EEWE));
; 0001 0111     #endif
; 0001 0112 
; 0001 0113     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0001 0114     SREG=saveSREG;                          // Restore interrupts to SREG
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 0115     _EepromBackup.status=0;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0001 0116     return TRUE;                            // Return TRUE if address                                            // vali ...
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0001 0117   }
; 0001 0118   else
;PCODE: $000001F1 VOL: 0
; 0001 0119     return FALSE;                           // Return FALSE if not address not
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0001 011A                                             // valid for writing
; 0001 011B }
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;
;unsigned char eepromBackup(unsigned long flashStartAdr, unsigned int length, unsigned char *data)
; 0001 011E {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0001 011F     _EepromBackup.flashStartAdr=flashStartAdr;
;PCODE: $000001FD VOL: 0
;	flashStartAdr -> Y+4
;	length -> Y+2
;	*data -> Y+0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0001 0120     _EepromBackup.length=length;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0001 0121     for(;length>0;length--)
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0001 0122     {
; 0001 0123          _EepromBackup.data[length-1]=data[length-1];
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0001 0124          if(_EepromBackup.data[length-1]!=data[length-1])
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0001 0125          {
; 0001 0126             return FALSE;//error during backup on eeprom
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0001 0127          }
; 0001 0128     }
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0001 0129     _EepromBackup.status=1;//1=ready to move to flash
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0001 012A     return TRUE;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0001 012B }
;PCODE: $00000239 VOL: 0
;
;/*!
;* The function checks if global variable FlashBackup.status indicates that Flash recovery
;* buffer contains data that needs to be written to Flash. Writes data from
;* Flash recovery buffer to Flash page address given by FLASH_recovery.pageAdr.
;* This function should be called at program startup if FLASH recovery option
;* is enabeled.
;**/
;unsigned char RecoverFlash(){
; 0001 0134 unsigned char RecoverFlash(){
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0001 0135 #ifdef __FLASH_RECOVER
; 0001 0136   unsigned int index;
; 0001 0137   unsigned long flashStartAdr = (MyAddressType)FlashBackup.pageNumber * PAGESIZE;
; 0001 0138   if(FlashBackup.status == FLASH_BUFFER_FULL_ID){ // Checks if Flash recovery
; 0001 0139                                                   //  buffer contains data
; 0001 013A 
; 0001 013B     for(index=0; index < PAGESIZE; index+=2){     // Writes to Flash write buffer
; 0001 013C         _WAIT_FOR_SPM();
; 0001 013D         _FILL_TEMP_WORD( index, *((MyFlashIntPointer)(ADR_FLASH_BUFFER+index)) );
; 0001 013E     }
; 0001 013F 
; 0001 0140 
; 0001 0141     //WriteBufToFlash((MyAddressType)FlashBackup.pageNumber * PAGESIZE);
; 0001 0142     _WAIT_FOR_SPM();
; 0001 0143     _PAGE_ERASE( flashStartAdr );
; 0001 0144     _WAIT_FOR_SPM();
; 0001 0145     _PAGE_WRITE( flashStartAdr );
; 0001 0146     _WAIT_FOR_SPM();
; 0001 0147     _ENABLE_RWW_SECTION();
; 0001 0148     FlashBackup.status=0;                   // Inicate that Flash buffer does
; 0001 0149                                             // not contain data for writing
; 0001 014A     while(EECR & (1<<EEWE));
; 0001 014B     return TRUE;                            // Returns TRUE if recovery has
; 0001 014C                                             // taken place
; 0001 014D   }
; 0001 014E #endif
; 0001 014F   return FALSE;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0001 0150 }
;PCODE: $0000023E VOL: 0
;
;
;/*!
;* The function checks if input argument is a valid Flash page address for
;* writing. Returns TRUE only if:
;* - Address points to the beginning of a Flash page
;* - Address is within the limits defined in Self_programming.h
;* - Address is not equal to page address used for buffring by the Flash recovery
;*   functions (if enabled).
;* Returns FALSE else.
;**/
;unsigned char AddressCheck(MyAddressType flashAdr){
; 0001 015C unsigned char AddressCheck(MyAddressType flashAdr){
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 015D   #ifdef __FLASH_RECOVER
; 0001 015E   // The next line gives a warning 'pointless comparison with zero' if ADR_LIMIT_LOW is 0. Ignore it.
; 0001 015F   if( (flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) &&
; 0001 0160       (flashAdr != ADR_FLASH_BUFFER) && !(flashAdr & (PAGESIZE-1)) )
; 0001 0161     return TRUE;                            // Address is a valid page address
; 0001 0162   else
; 0001 0163     return FALSE;                           // Address is not a valid page address
; 0001 0164   #else
; 0001 0165   if((flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) && !(flashAdr & (PAGESIZE-1) ) )
;PCODE: $00000241 VOL: 0
;	flashAdr -> Y+0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0001 0166     return TRUE;                            // Address is a valid page address
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0001 0167   else
;PCODE: $00000253 VOL: 0
; 0001 0168     return FALSE;                           // Address is not a valid page address
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 0169   #endif
; 0001 016A }
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;
;
;/*!
;* The function reads Flash page given by flashAddr, replaces one byte given by
;* flashAddr with data, and stores entire page in Flash temporary buffer.
;**/
;unsigned char LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
; 0001 0171 unsigned char LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 0172 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
; 0001 0173     unsigned int index, oddByte, pcWord;
; 0001 0174     unsigned char onlyWrite=1;
; 0001 0175     MyAddressType  pageAdr;
; 0001 0176     oddByte=(unsigned char)flashAddr & 1;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;	flashAddr -> Y+12
;	data -> Y+11
;	index -> R16,R17
;	oddByte -> R18,R19
;	pcWord -> R20,R21
;	onlyWrite -> Y+10
;	pageAdr -> Y+6
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0001 0177     pcWord=(unsigned int)flashAddr & (PAGESIZE-2); // Used when writing FLASH temp buffer
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0001 0178     pageAdr=flashAddr & ~(PAGESIZE-1);        // Get FLASH page address from byte address
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0001 0179     //_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
; 0001 017A     for(index=0; index < PAGESIZE; index+=2){
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0001 017B         if(index==pcWord){
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0001 017C           if(oddByte){
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0001 017D             _FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 017E           }                                     // Write odd byte in temporary buffer
; 0001 017F           else{
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0001 0180             _FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0001 0181           }                                     // Write even byte in temporary buffer
;PCODE: $00000296 VOL: 0
; 0001 0182           if(((*((MyFlashCharPointer)flashAddr))&0xFF)!=0xFF)
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0001 0183                 onlyWrite=0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0001 0184         }
;PCODE: $0000029E VOL: 0
; 0001 0185         else{
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0001 0186           _FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0001 0187           //if(*((MyFlashIntPointer)(pageAdr+index)) != 0xFFFF)
; 0001 0188                 //onlyWrite=0;
; 0001 0189         }                                       // Write Flash word directly to temporary buffer
;PCODE: $000002AB VOL: 0
; 0001 018A     }
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0001 018B     return onlyWrite;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0001 018C //#pragma diag_default=Pe1053 // Back to default.
; 0001 018D }
;PCODE: $000002B5 VOL: 0
