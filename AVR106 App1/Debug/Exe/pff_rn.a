;/*----------------------------------------------------------------------------/
;/  Petit FatFs - FAT file system module  R0.02                 (C)ChaN, 2009
;/-----------------------------------------------------------------------------/
;/ Petit FatFs module is an open source software to implement FAT file system to
;/ small embedded systems. This is a free software and is opened for education,
;/ research and commercial developments under license policy of following trems.
;/
;/  Copyright (C) 2009, ChaN, all right reserved.
;/
;/ * The Petit FatFs module is a free software and there is NO WARRANTY.
;/ * No restriction on use. You can use, modify and redistribute it for
;/   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
;/ * Redistributions of source code must retain the above copyright notice.
;/
;/-----------------------------------------------------------------------------/
;/ Jun 15,'09  R0.01a  First release. (Branched from FatFs R0.07b.)
;/
;/ Dec 14,'09  R0.02   Added multiple code page support.
;/                     Added write funciton.
;/                     Changed stream read mode interface.
;/----------------------------------------------------------------------------*/
;
;#include "pff_rn.h"		/* Petit FatFs configurations and declarations */
;#include "diskio.h"		/* Declarations of low level disk I/O functions */
;#include <string.h>
;
;/*--------------------------------------------------------------------------
;
;   Private Functions
;
;---------------------------------------------------------------------------*/
;
;static
;FATFS *FatFs;	/* Pointer to the file system object (logical drive) */
;
;
;
;/*-----------------------------------------------------------------------*/
;/* String functions                                                      */
;/*-----------------------------------------------------------------------*/
;
;/* Fill memory */
;static
;void mem_set (void* dst, int val, int cnt) {
; 0003 002C void mem_set (void* dst, int val, int cnt) {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0003 002D 	char *d = (char*)dst;
; 0003 002E 	while (cnt--) *d++ = (char)val;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;	*dst -> Y+6
;	val -> Y+4
;	cnt -> Y+2
;	*d -> R16,R17
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 002F }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;/* Compare memory to memory */
;static
;int mem_cmp (const void* dst, const void* src, int cnt) {
; 0003 0033 int mem_cmp (const void* dst, const void* src, int cnt) {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0003 0034 	const char *d = (const char *)dst, *s = (const char *)src;
; 0003 0035 	int r = 0;
; 0003 0036 	while (cnt-- && (r = *d++ - *s++) == 0) ;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;	*dst -> Y+10
;	*src -> Y+8
;	cnt -> Y+6
;	*d -> R16,R17
;	*s -> R18,R19
;	r -> R20,R21
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0037 	return r;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 0038 }
;PCODE: $00000045 VOL: 0
;
;
;
;/*-----------------------------------------------------------------------*/
;/* FAT access - Read value of a FAT entry                                */
;/*-----------------------------------------------------------------------*/
;
;static
;CLUST get_fat (	/* 1:IO error, Else:Cluster status */
; 0003 0042 	CLUST clst	/* Cluster# to get the link information */
; 0003 0043 )
; 0003 0044 {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0003 0045 	WORD wc, bc, ofs;
; 0003 0046 	BYTE buf[4];
; 0003 0047 	FATFS *fs = FatFs;
; 0003 0048 
; 0003 0049 
; 0003 004A 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	clst -> Y+12
;	wc -> R16,R17
;	bc -> R18,R19
;	ofs -> R20,R21
;	buf -> Y+8
;	*fs -> Y+6
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 004B 		return 1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0003 004C 
; 0003 004D 	switch (fs->fs_type) {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0003 004E 	case FS_FAT12 :
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 004F 		bc = (WORD)clst; bc += bc / 2;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0003 0050 		ofs = bc % 512; bc /= 512;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0003 0051 		if (ofs != 511) {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0003 0052 			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0003 0053 		} else {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0003 0054 			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0003 0055 			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0003 0056 		}
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0003 0057 		wc = LD_WORD(buf);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0003 0058 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0003 0059 
; 0003 005A 	case FS_FAT16 :
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0003 005B 		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 005C 		return LD_WORD(buf);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0003 005D #if _FS_FAT32
; 0003 005E 	case FS_FAT32 :
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0003 005F 		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0003 0060 		return LD_DWORD(buf) & 0x0FFFFFFF;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0003 0061 #endif
; 0003 0062 	}
;PCODE: $000000F6 VOL: 0
; 0003 0063 
; 0003 0064 	return 1;	/* An error occured at the disk I/O layer */
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0003 0065 }
;PCODE: $000000FB VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Get sector# from cluster#                                             */
;/*-----------------------------------------------------------------------*/
;
;static
;DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
; 0003 0070 	CLUST clst		/* Cluster# to be converted */
; 0003 0071 )
; 0003 0072 {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0003 0073 	FATFS *fs = FatFs;
; 0003 0074 
; 0003 0075 
; 0003 0076 	clst -= 2;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;	clst -> Y+2
;	*fs -> R16,R17
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0003 0077 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0003 0078 	return (DWORD)clst * fs->csize + fs->database;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0003 0079 }
;PCODE: $00000128 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Rewind directory index                           */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_rewind (
; 0003 0084 	DIR *dj			/* Pointer to directory object */
; 0003 0085 )
; 0003 0086 {
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0003 0087 	CLUST clst;
; 0003 0088 	FATFS *fs = FatFs;
; 0003 0089 
; 0003 008A 
; 0003 008B 	dj->index = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;	*dj -> Y+6
;	clst -> Y+2
;	*fs -> R16,R17
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0003 008C 	clst = dj->sclust;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0003 008D 	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0003 008E 		return FR_DISK_ERR;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0003 008F #if _FS_FAT32
; 0003 0090 	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0003 0091 		clst = fs->dirbase;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0003 0092 #endif
; 0003 0093 	dj->clust = clst;						/* Current cluster */
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0003 0094 	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0003 0095 
; 0003 0096 	return FR_OK;	/* Seek succeeded */
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0003 0097 }
;PCODE: $00000173 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Move directory index next                        */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
; 0003 00A2 	DIR *dj			/* Pointer to directory object */
; 0003 00A3 )
; 0003 00A4 {
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0003 00A5 	CLUST clst;
; 0003 00A6 	WORD i;
; 0003 00A7 	FATFS *fs = FatFs;
; 0003 00A8 
; 0003 00A9 
; 0003 00AA 	i = dj->index + 1;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;	*dj -> Y+8
;	clst -> Y+4
;	i -> R16,R17
;	*fs -> R18,R19
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0003 00AB 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0003 00AC 		return FR_NO_FILE;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0003 00AD 
; 0003 00AE 	if (!(i & (16-1))) {	/* Sector changed? */
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0003 00AF 		dj->sect++;			/* Next sector */
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0003 00B0 
; 0003 00B1 		if (dj->clust == 0) {	/* Static table */
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0003 00B2 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0003 00B3 				return FR_NO_FILE;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0003 00B4 		}
;PCODE: $000001A3 VOL: 0
; 0003 00B5 		else {					/* Dynamic table */
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0003 00B6 			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0003 00B7 				clst = get_fat(dj->clust);		/* Get next cluster */
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0003 00B8 				if (clst <= 1) return FR_DISK_ERR;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0003 00B9 				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0003 00BA 					return FR_NO_FILE;			/* Report EOT */
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0003 00BB 				dj->clust = clst;				/* Initialize data for new cluster */
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0003 00BC 				dj->sect = clust2sect(clst);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0003 00BD 			}
; 0003 00BE 		}
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0003 00BF 	}
; 0003 00C0 
; 0003 00C1 	dj->index = i;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0003 00C2 
; 0003 00C3 	return FR_OK;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0003 00C4 }
;PCODE: $000001D7 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Find an object in the directory                  */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_find (
; 0003 00CF 	DIR *dj			/* Pointer to the directory object linked to the file name */
; 0003 00D0 )
; 0003 00D1 {
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0003 00D2 	FRESULT res;
; 0003 00D3 	BYTE c, *dir;
; 0003 00D4 
; 0003 00D5 
; 0003 00D6 	res = dir_rewind(dj);			/* Rewind directory object */
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;	*dj -> Y+4
;	res -> R17
;	c -> R16
;	*dir -> R18,R19
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0003 00D7 	if (res != FR_OK) return res;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0003 00D8 
; 0003 00D9 	dir = FatFs->buf;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0003 00DA 	do {
;PCODE: $000001E9 VOL: 0
; 0003 00DB 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
; 0003 00DC 			? FR_DISK_ERR : FR_OK;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0003 00DD 		if (res != FR_OK) break;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0003 00DE 		c = dir[DIR_Name];	/* First character */
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0003 00DF 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0003 00E0 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0003 00E1 			break;
;PCODE: $0000021D VOL: 0
; 0003 00E2 		res = dir_next(dj);							/* Next entry */
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0003 00E3 	} while (res == FR_OK);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0003 00E4 
; 0003 00E5 	return res;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0003 00E6 }
;PCODE: $0000022B VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read an object from the directory                                     */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;static
;FRESULT dir_read (
; 0003 00F1 	DIR *dj			/* Pointer to the directory object to store read object name */
; 0003 00F2 )
; 0003 00F3 {
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0003 00F4 	FRESULT res;
; 0003 00F5 	BYTE a, c, *dir;
; 0003 00F6 
; 0003 00F7 
; 0003 00F8 	res = FR_NO_FILE;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;	*dj -> Y+6
;	res -> R17
;	a -> R16
;	c -> R19
;	*dir -> R20,R21
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0003 00F9 	dir = FatFs->buf;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0003 00FA 	while (dj->sect) {
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0003 00FB 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
; 0003 00FC 			? FR_DISK_ERR : FR_OK;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0003 00FD 		if (res != FR_OK) break;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0003 00FE 		c = dir[DIR_Name];
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0003 00FF 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0003 0100 		a = dir[DIR_Attr] & AM_MASK;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0003 0101 		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0003 0102 			break;
;PCODE: $0000026E VOL: 0
; 0003 0103 		res = dir_next(dj);				/* Next entry */
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0003 0104 		if (res != FR_OK) break;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0003 0105 	}
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0003 0106 
; 0003 0107 	if (res != FR_OK) dj->sect = 0;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0003 0108 
; 0003 0109 	return res;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0003 010A }
;PCODE: $00000284 VOL: 0
;
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Pick a segment and create the object name in directory form           */
;/*-----------------------------------------------------------------------*/
;
;#ifdef _EXCVT
;	static const BYTE cvt[] = _EXCVT;
;#endif
;
;static
;FRESULT create_name (
; 0003 011A 	DIR *dj,			/* Pointer to the directory object */
; 0003 011B 	const char **path	/* Pointer to pointer to the segment in the path string */
; 0003 011C )
; 0003 011D {
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0003 011E 	BYTE c, d, ni, si, i, *sfn;
; 0003 011F 	const char *p;
; 0003 0120 
; 0003 0121 	/* Create file name in directory form */
; 0003 0122 	sfn = dj->fn;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;	*dj -> Y+12
;	*path -> Y+10
;	c -> R17
;	d -> R16
;	ni -> R19
;	si -> R18
;	i -> R21
;	*sfn -> Y+8
;	*p -> Y+6
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0003 0123 	mem_set(sfn, ' ', 11);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0003 0124 	si = i = 0; ni = 8;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0003 0125 	p = *path;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0003 0126 	for (;;) {
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0003 0127 		c = p[si++];
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0003 0128 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0003 0129 		if (c == '.' || i >= ni) {
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0003 012A 			if (ni != 8 || c != '.') break;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0003 012B 			i = 8; ni = 11;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0003 012C 			continue;
;PCODE: $000002C6 VOL: 0
; 0003 012D 		}
; 0003 012E #ifdef _EXCVT
; 0003 012F 		if (c >= 0x80)					/* To upper extended char (SBCS) */
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0003 0130 			c = cvt[c - 0x80];
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0003 0131 #endif
; 0003 0132 		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0003 0133 			d = p[si++];					/* Get 2nd byte */
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0003 0134 			sfn[i++] = c;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0003 0135 			sfn[i++] = d;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0003 0136 		} else {						/* Single byte code */
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0003 0137 			if (IsLower(c)) c -= 0x20;	/* toupper */
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0003 0138 			sfn[i++] = c;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0003 0139 		}
;PCODE: $0000030B VOL: 0
; 0003 013A 	}
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0003 013B 	*path = &p[si];						/* Rerurn pointer to the next segment */
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0003 013C 
; 0003 013D 	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0003 013E 
; 0003 013F 	return FR_OK;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0003 0140 }
;PCODE: $00000324 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Get file information from directory entry                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;static
;void get_fileinfo (		/* No return code */
; 0003 014B 	DIR *dj,			/* Pointer to the directory object */
; 0003 014C 	FILINFO *fno	 	/* Pointer to store the file information */
; 0003 014D )
; 0003 014E {
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0003 014F 	BYTE i, c, *dir;
; 0003 0150 	char *p;
; 0003 0151 
; 0003 0152 
; 0003 0153 	p = fno->fname;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;	*dj -> Y+8
;	*fno -> Y+6
;	i -> R17
;	c -> R16
;	*dir -> R18,R19
;	*p -> R20,R21
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0003 0154 	if (dj->sect) {
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0003 0155 		dir = FatFs->buf;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0003 0156 		for (i = 0; i < 8; i++) {	/* Copy file name body */
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0003 0157 			c = dir[i];
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0003 0158 			if (c == ' ') break;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0003 0159 			if (c == 0x05) c = 0xE5;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0003 015A 			*p++ = c;
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0003 015B 		}
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0003 015C 		if (dir[8] != ' ') {		/* Copy file name extension */
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0003 015D 			*p++ = '.';
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0003 015E 			for (i = 8; i < 11; i++) {
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0003 015F 				c = dir[i];
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0003 0160 				if (c == ' ') break;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0003 0161 				*p++ = c;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0003 0162 			}
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0003 0163 		}
; 0003 0164 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0003 0165 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0003 0166 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0003 0167 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0003 0168 	}
; 0003 0169 	*p = 0;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0003 016A }
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;
;
;#endif /* _USE_DIR */
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Follow a file path                                                    */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
; 0003 0177 	DIR *dj,			/* Directory object to return last directory and found object */
; 0003 0178 	const char *path	/* Full-path string to find a file or directory */
; 0003 0179 )
; 0003 017A {
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0003 017B 	FRESULT res;
; 0003 017C 	BYTE *dir;
; 0003 017D 
; 0003 017E 
; 0003 017F 	while (*path == ' ') path++;		/* Skip leading spaces */
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;	*dj -> Y+6
;	*path -> Y+4
;	res -> R17
;	*dir -> R18,R19
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0003 0180 if (*path == '/') path++;
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0003 0181 	dj->sclust = 0;						/* Set start directory (always root dir) */
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0003 0182 
; 0003 0183 	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0003 0184 		res = dir_rewind(dj);
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0003 0185 		FatFs->buf[0] = 0;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0003 0186 
; 0003 0187 	} else {							/* Follow path */
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0003 0188 		for (;;) {
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0003 0189 			res = create_name(dj, &path);	/* Get a segment */
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0003 018A 			if (res != FR_OK) break;
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0003 018B 			res = dir_find(dj);				/* Find it */
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0003 018C 			if (res != FR_OK) {				/* Could not find the object */
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0003 018D 				if (res == FR_NO_FILE && !*(dj->fn+11))
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0003 018E 					res = FR_NO_PATH;
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0003 018F 				break;
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0003 0190 			}
; 0003 0191 			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0003 0192 			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0003 0193 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0003 0194 				res = FR_NO_PATH; break;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0003 0195 			}
; 0003 0196 			dj->sclust =
;PCODE: $000003F2 VOL: 0
; 0003 0197 #if _FS_FAT32
; 0003 0198 				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
; 0003 0199 #endif
; 0003 019A 				LD_WORD(dir+DIR_FstClusLO);
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0003 019B 		}
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0003 019C 	}
;PCODE: $00000404 VOL: 0
; 0003 019D 
; 0003 019E 	return res;
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0003 019F }
;PCODE: $00000409 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Check a sector if it is an FAT boot record                            */
;/*-----------------------------------------------------------------------*/
;
;static
;BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
; 0003 01AA 	BYTE *buf,	/* Working buffer */
; 0003 01AB 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
; 0003 01AC )
; 0003 01AD {
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0003 01AE     if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
;PCODE: $0000040C VOL: 0
;	*buf -> Y+4
;	sect -> Y+0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0003 01AF 		return 3;
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0003 01B0 	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0003 01B1 		return 2;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0003 01B2 
; 0003 01B3 	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0003 01B4 		return 0;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0003 01B5 #if _FS_FAT32
; 0003 01B6 	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0003 01B7 		return 0;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0003 01B8 #endif
; 0003 01B9 	return 1;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0003 01BA }
;PCODE: $00000455 VOL: 0
;
;
;
;
;/*--------------------------------------------------------------------------
;
;   Public Functions
;
;--------------------------------------------------------------------------*/
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Mount/Unmount a Locical Drive                                         */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_mount (
; 0003 01CC 	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
; 0003 01CD )
; 0003 01CE {
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0003 01CF 	BYTE fmt, buf[36];
; 0003 01D0 	DWORD bsect, fsize, tsect, mclst;
; 0003 01D1 
; 0003 01D2 
; 0003 01D3 	FatFs = 0;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;	*fs -> Y+53
;	fmt -> R17
;	buf -> Y+17
;	bsect -> Y+13
;	fsize -> Y+9
;	tsect -> Y+5
;	mclst -> Y+1
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0003 01D4 	if (!fs) return FR_OK;				/* Unregister fs object */
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0003 01D5 
; 0003 01D6 
; 0003 01D7 	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0003 01D8 		return FR_NOT_READY;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0003 01D9 
; 0003 01DA 	/* Search FAT partition on the drive */
; 0003 01DB 	bsect = 0;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0003 01DC 	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0003 01DD 	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0003 01DE 		/* Check a partition listed in top of the partition table */
; 0003 01DF 		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0003 01E0 			fmt = 3;
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0003 01E1 		} else {
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0003 01E2 			if (buf[4]) {					/* Is the partition existing? */
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0003 01E3 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0003 01E4 				fmt = check_fs(buf, bsect);	/* Check the partition */
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0003 01E5 			}
; 0003 01E6 		}
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0003 01E7 	}
; 0003 01E8 	if (fmt == 3) return FR_DISK_ERR;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0003 01E9 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0003 01EA 
; 0003 01EB 	/* Initialize the file system object */
; 0003 01EC 	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0003 01ED 
; 0003 01EE 	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0003 01EF 	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0003 01F0 
; 0003 01F1 	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0003 01F2 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0003 01F3 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0003 01F4 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0003 01F5 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0003 01F6 	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0003 01F7 	mclst = (tsect						/* Last cluster# + 1 */
;PCODE: $000004EC VOL: 0
; 0003 01F8 		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
; 0003 01F9 		) / fs->csize + 2;
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0003 01FA 	fs->max_clust = (CLUST)mclst;
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0003 01FB 
; 0003 01FC 	fmt = FS_FAT12;							/* Determine the FAT sub type */
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0003 01FD 	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0003 01FE 	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0003 01FF #if _FS_FAT32
; 0003 0200 		fmt = FS_FAT32;
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0003 0201 #else
; 0003 0202 		return FR_NO_FILESYSTEM;
; 0003 0203 #endif
; 0003 0204 
; 0003 0205 	fs->fs_type = fmt;		/* FAT sub-type */
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0003 0206 #if _FS_FAT32
; 0003 0207 	if (fmt == FS_FAT32)
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0003 0208 		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0003 0209 	else
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0003 020A #endif
; 0003 020B 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0003 020C 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0003 020D 
; 0003 020E 	fs->flag = 0;
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0003 020F 	FatFs = fs;
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0003 0210 
; 0003 0211 	return FR_OK;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0003 0212 }
;PCODE: $00000541 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Open or Create a File                                                 */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_open (
; 0003 021C 	const char *path	/* Pointer to the file name */
; 0003 021D )
; 0003 021E {
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0003 021F 	FRESULT res;
; 0003 0220 	DIR dj;
; 0003 0221 	BYTE sp[12], dir[32];
; 0003 0222 	FATFS *fs = FatFs;
; 0003 0223 
; 0003 0224 
; 0003 0225 	if (!fs)						/* Check file system */
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;	*path -> Y+64
;	res -> R17
;	dj -> Y+48
;	sp -> Y+36
;	dir -> Y+4
;	*fs -> R18,R19
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0003 0226 		return FR_NOT_ENABLED;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0003 0227 
; 0003 0228 	fs->flag = 0;
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0003 0229 	fs->buf = dir;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0003 022A 	dj.fn = sp;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0003 022B 	res = follow_path(&dj, path);	/* Follow the file path */
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0003 022C 	if (res != FR_OK) return res;	/* Follow failed */
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0003 022D 	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0003 022E 		return FR_NO_FILE;
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0003 022F 
; 0003 0230 	fs->org_clust =						/* File start cluster */
;PCODE: $00000571 VOL: 0
; 0003 0231 #if _FS_FAT32
; 0003 0232 		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
; 0003 0233 #endif
; 0003 0234 		LD_WORD(dir+DIR_FstClusLO);
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0003 0235 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0003 0236 	fs->fptr = 0;						/* File pointer */
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0003 0237 	fs->flag = FA_OPENED;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0003 0238 
; 0003 0239 	return FR_OK;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0003 023A }
;PCODE: $0000058A VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read File                                                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_READ
;
;FRESULT pf_read (
; 0003 0245 	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
; 0003 0246 	WORD btr,		/* Number of bytes to read */
; 0003 0247 	WORD* br		/* Pointer to number of bytes read */
; 0003 0248 )
; 0003 0249 {
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
; 0003 024A 	DRESULT dr;
; 0003 024B 	CLUST clst;
; 0003 024C 	DWORD sect, remain;
; 0003 024D 	BYTE *rbuff = buff;
; 0003 024E 	WORD rcnt;
; 0003 024F 	FATFS *fs = FatFs;
; 0003 0250 
; 0003 0251 
; 0003 0252 	*br = 0;
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;	*buff -> Y+24
;	btr -> Y+22
;	*br -> Y+20
;	dr -> R17
;	clst -> Y+16
;	sect -> Y+12
;	remain -> Y+8
;	*rbuff -> R18,R19
;	rcnt -> R20,R21
;	*fs -> Y+6
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0003 0253 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0003 0254 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0003 0255 		return FR_NOT_OPENED;
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0003 0256 
; 0003 0257 	remain = fs->fsize - fs->fptr;
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0003 0258 	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
; 0003 0259 
; 0003 025A 	while (btr)	{									/* Repeat until all data transferred */
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0003 025B 		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0003 025C 			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0003 025D 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
; 0003 025E 					fs->org_clust : get_fat(fs->curr_clust);
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0003 025F 				if (clst <= 1) goto fr_abort;
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
; 0003 0260 				fs->curr_clust = clst;				/* Update current cluster */
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0003 0261 				fs->csect = 0;						/* Reset sector offset in the cluster */
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0003 0262 			}
; 0003 0263 			sect = clust2sect(fs->curr_clust);		/* Get current sector */
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0003 0264 			if (!sect) goto fr_abort;
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
; 0003 0265 			fs->dsect = sect + fs->csect++;
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0003 0266 		}
; 0003 0267 		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0003 0268 		if (rcnt > btr) rcnt = btr;
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
; 0003 0269 		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
; 0003 026A 		if (dr) goto fr_abort;
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0003 026B 		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0003 026C 		btr -= rcnt; *br += rcnt;
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0003 026D 	}
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0003 026E 
; 0003 026F 	return FR_OK;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0003 0270 
; 0003 0271 fr_abort:
;PCODE: $00000640 VOL: 0
; 0003 0272 	fs->flag = 0;
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
; 0003 0273 	return FR_DISK_ERR;
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
; 0003 0274 }
;PCODE: $00000649 VOL: 0
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Write File                                                            */
;/*-----------------------------------------------------------------------*/
;#if _USE_WRITE
;
;FRESULT pf_write (
; 0003 027F 	const void* buff,	/* Pointer to the data to be written */
; 0003 0280 	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
; 0003 0281 	WORD* bw			/* Pointer to number of bytes written */
; 0003 0282 )
; 0003 0283 {
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
; 0003 0284 	CLUST clst;
; 0003 0285 	DWORD sect, remain;
; 0003 0286 	const BYTE *p = buff;
; 0003 0287 	WORD wcnt;
; 0003 0288 	FATFS *fs = FatFs;
; 0003 0289 
; 0003 028A 
; 0003 028B 	*bw = 0;
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;	*buff -> Y+22
;	btw -> Y+20
;	*bw -> Y+18
;	clst -> Y+14
;	sect -> Y+10
;	remain -> Y+6
;	*p -> R16,R17
;	wcnt -> R18,R19
;	*fs -> R20,R21
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
; 0003 028C 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0003 028D 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
; 0003 028E 		return FR_NOT_OPENED;
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0003 028F 
; 0003 0290 	if (!btw) {		/* Finalize request */
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0003 0291 		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0003 0292 		fs->flag &= ~FA__WIP;
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0003 0293 		return FR_OK;
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
; 0003 0294 	} else {		/* Write data request */
;PCODE: $00000682 VOL: 0
; 0003 0295 		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
; 0003 0296 			fs->fptr &= 0xFFFFFE00;
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0003 0297 	}
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
; 0003 0298 	remain = fs->fsize - fs->fptr;
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0003 0299 	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
; 0003 029A 
; 0003 029B 	while (btw)	{									/* Repeat until all data transferred */
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0003 029C 		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
; 0003 029D 			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
; 0003 029E 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
; 0003 029F 					fs->org_clust : get_fat(fs->curr_clust);
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0003 02A0 				if (clst <= 1) goto fw_abort;
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0003 02A1 				fs->curr_clust = clst;				/* Update current cluster */
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0003 02A2 				fs->csect = 0;						/* Reset sector offset in the cluster */
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0003 02A3 			}
; 0003 02A4 			sect = clust2sect(fs->curr_clust);		/* Get current sector */
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0003 02A5 			if (!sect) goto fw_abort;
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
; 0003 02A6 			fs->dsect = sect + fs->csect++;
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0003 02A7 			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0003 02A8 			fs->flag |= FA__WIP;
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0003 02A9 		}
; 0003 02AA 		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0003 02AB 		if (wcnt > btw) wcnt = btw;
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
; 0003 02AC 		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
; 0003 02AD 		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0003 02AE 		btw -= wcnt; *bw += wcnt;
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
; 0003 02AF 		if (((WORD)fs->fptr % 512) == 0) {
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
; 0003 02B0 			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
; 0003 02B1 			fs->flag &= ~FA__WIP;
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
; 0003 02B2 		}
; 0003 02B3 	}
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
; 0003 02B4 
; 0003 02B5 	return FR_OK;
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
; 0003 02B6 
; 0003 02B7 fw_abort:
;PCODE: $00000737 VOL: 0
; 0003 02B8 	fs->flag = 0;
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
; 0003 02B9 	return FR_DISK_ERR;
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
; 0003 02BA }
;PCODE: $00000740 VOL: 0
;
;FRESULT pf_write512 (
; 0003 02BD 	BYTE* buff,	/* Pointer to the data to be written */
; 0003 02BE 	WORD ofs,			//offset to fill data
; 0003 02BF 	WORD btw,           /* Number of bytes to write */
; 0003 02C0     WORD* bw			/* Pointer to number of bytes written */
; 0003 02C1 )
; 0003 02C2 {
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
; 0003 02C3      BYTE res;
; 0003 02C4      WORD i=ofs%512,j=0;
; 0003 02C5      BYTE buf512[512];
; 0003 02C6      FATFS *fs = FatFs;
; 0003 02C7 
; 0003 02C8      //WORD nbytes=0;
; 0003 02C9      if((btw)>512){
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;	*buff -> Y+526
;	ofs -> Y+524
;	btw -> Y+522
;	*bw -> Y+520
;	res -> R17
;	i -> R18,R19
;	j -> R20,R21
;	buf512 -> Y+8
;	*fs -> Y+6
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
; 0003 02CA          return FR_DISK_ERR; //write bytes great than 512
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
; 0003 02CB      }
; 0003 02CC      res=pf_lseek((ofs/512)*512);
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
; 0003 02CD      if(((ofs%512)+btw)>512){//read replace then write
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
; 0003 02CE         res=pf_read(buf512, 512, bw);
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
; 0003 02CF         if(res!=FR_OK){
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
; 0003 02D0             return res;
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
; 0003 02D1         }
; 0003 02D2         for(;i<512;i++,j++){
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
; 0003 02D3             buf512[i]=buff[j];
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
; 0003 02D4         }
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
; 0003 02D5         res=pf_lseek(fs->fptr - 512);
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
; 0003 02D6         //res=pf_lseek((ofs/512)*512);
; 0003 02D7         res=pf_write(buf512, 512, bw);
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
; 0003 02D8         if(res!=FR_OK){
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
; 0003 02D9             return res;
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
; 0003 02DA         }
; 0003 02DB         i=0;
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
; 0003 02DC          //return FR_DISK_ERR; //write bytes great than 512
; 0003 02DD      }
; 0003 02DE      {
;PCODE: $000007A1 VOL: 0
; 0003 02DF 
; 0003 02E0         res=pf_read(buf512, 512, bw);
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
; 0003 02E1         res=pf_lseek(fs->fptr - 512);
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
; 0003 02E2         /*
; 0003 02E3         if(j>0){
; 0003 02E4             res=pf_lseek(((ofs/512)+1)*512);
; 0003 02E5         }
; 0003 02E6         else{
; 0003 02E7             res=pf_lseek((ofs/512)*512);
; 0003 02E8         }
; 0003 02E9         */
; 0003 02EA         if(res!=FR_OK){
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
; 0003 02EB             return res;
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
; 0003 02EC         }
; 0003 02ED         for(;j<btw;i++,j++){
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
; 0003 02EE             buf512[i]=buff[j];
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
; 0003 02EF         }
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
; 0003 02F0 
; 0003 02F1         res=pf_write(buf512, 512, bw);
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
; 0003 02F2         if(res!=FR_OK){
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
; 0003 02F3             return res;
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
; 0003 02F4         }
; 0003 02F5      }
;PCODE: $000007DC VOL: 0
; 0003 02F6 
; 0003 02F7 }
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Seek File R/W Pointer                                                 */
;/*-----------------------------------------------------------------------*/
;#if _USE_LSEEK
;
;FRESULT pf_lseek (
; 0003 0302 	DWORD ofs		/* File pointer from top of file */
; 0003 0303 )
; 0003 0304 {
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
; 0003 0305 	CLUST clst;
; 0003 0306 	DWORD bcs, sect, ifptr;
; 0003 0307 	FATFS *fs = FatFs;
; 0003 0308 
; 0003 0309 
; 0003 030A 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;	ofs -> Y+18
;	clst -> Y+14
;	bcs -> Y+10
;	sect -> Y+6
;	ifptr -> Y+2
;	*fs -> R16,R17
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
; 0003 030B 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
; 0003 030C 			return FR_NOT_OPENED;
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
; 0003 030D 
; 0003 030E 	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0003 030F 	ifptr = fs->fptr;
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
; 0003 0310 	fs->fptr = 0;
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
; 0003 0311 	if (ofs > 0) {
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
; 0003 0312 		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
; 0003 0313 		if (ifptr > 0 &&
; 0003 0314 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
; 0003 0315 			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
; 0003 0316 			ofs -= fs->fptr;
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
; 0003 0317 			clst = fs->curr_clust;
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
; 0003 0318 		} else {							/* When seek to back cluster, */
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0003 0319 			clst = fs->org_clust;			/* start from the first cluster */
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
; 0003 031A 			fs->curr_clust = clst;
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
; 0003 031B 		}
;PCODE: $0000084D VOL: 0
; 0003 031C 		while (ofs > bcs) {				/* Cluster following loop */
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
; 0003 031D 			clst = get_fat(clst);		/* Follow cluster chain */
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
; 0003 031E 			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
; 0003 031F 			fs->curr_clust = clst;
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
; 0003 0320 			fs->fptr += bcs;
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
; 0003 0321 			ofs -= bcs;
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
; 0003 0322 		}
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
; 0003 0323 		fs->fptr += ofs;
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
; 0003 0324 		sect = clust2sect(clst);		/* Current sector */
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
; 0003 0325 		if (!sect) goto fe_abort;
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
; 0003 0326 		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
; 0003 0327 		if (ofs % 512)
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
; 0003 0328 			fs->dsect = sect + fs->csect++;
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
; 0003 0329 	}
;PCODE: $0000089B VOL: 0
; 0003 032A 
; 0003 032B 	return FR_OK;
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
; 0003 032C 
; 0003 032D fe_abort:
;PCODE: $000008A4 VOL: 0
; 0003 032E 	fs->flag = 0;
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
; 0003 032F 	return FR_DISK_ERR;
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
; 0003 0330 }
;PCODE: $000008B0 VOL: 0
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Create a Directroy Object                                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;
;FRESULT pf_opendir (
; 0003 033B 	DIR *dj,			/* Pointer to directory object to create */
; 0003 033C 	const char *path	/* Pointer to the directory path */
; 0003 033D )
; 0003 033E {
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
; 0003 033F 	FRESULT res;
; 0003 0340 	BYTE sp[12], dir[32];
; 0003 0341 	FATFS *fs = FatFs;
; 0003 0342 
; 0003 0343 
; 0003 0344 	if (!fs) {				/* Check file system */
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;	*dj -> Y+50
;	*path -> Y+48
;	res -> R17
;	sp -> Y+36
;	dir -> Y+4
;	*fs -> R18,R19
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
; 0003 0345 		res = FR_NOT_ENABLED;
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
; 0003 0346 	} else {
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
; 0003 0347 		fs->buf = dir;
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
; 0003 0348 		dj->fn = sp;
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0003 0349 		res = follow_path(dj, path);			/* Follow the path to the directory */
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
; 0003 034A 		if (res == FR_OK) {						/* Follow completed */
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
; 0003 034B 			if (dir[0]) {						/* It is not the root dir */
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
; 0003 034C 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
; 0003 034D 					dj->sclust =
; 0003 034E #if _FS_FAT32
; 0003 034F 					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
; 0003 0350 #endif
; 0003 0351 					LD_WORD(dir+DIR_FstClusLO);
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
; 0003 0352 				} else {						/* The object is not a directory */
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
; 0003 0353 					res = FR_NO_PATH;
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
; 0003 0354 				}
;PCODE: $000008DE VOL: 0
; 0003 0355 			}
; 0003 0356 			if (res == FR_OK)
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
; 0003 0357 				res = dir_rewind(dj);			/* Rewind dir */
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
; 0003 0358 		}
;PCODE: $000008E5 VOL: 0
; 0003 0359 		if (res == FR_NO_FILE) res = FR_NO_PATH;
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
; 0003 035A 	}
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
; 0003 035B 
; 0003 035C 	return res;
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
; 0003 035D }
;PCODE: $000008F2 VOL: 0
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read Directory Entry in Sequense                                      */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_readdir (
; 0003 0367 	DIR *dj,			/* Pointer to the open directory object */
; 0003 0368 	FILINFO *fno		/* Pointer to file information to return */
; 0003 0369 )
; 0003 036A {
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
; 0003 036B 	FRESULT res;
; 0003 036C 	BYTE sp[12], dir[32];
; 0003 036D 	FATFS *fs = FatFs;
; 0003 036E 
; 0003 036F 
; 0003 0370 	if (!fs) {				/* Check file system */
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;	*dj -> Y+50
;	*fno -> Y+48
;	res -> R17
;	sp -> Y+36
;	dir -> Y+4
;	*fs -> R18,R19
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
; 0003 0371 		res = FR_NOT_ENABLED;
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
; 0003 0372 	} else {
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
; 0003 0373 		fs->buf = dir;
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0003 0374 		dj->fn = sp;
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
; 0003 0375 		if (!fno) {
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
; 0003 0376 			res = dir_rewind(dj);
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
; 0003 0377 		} else {
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
; 0003 0378 			res = dir_read(dj);
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
; 0003 0379 			if (res == FR_NO_FILE) {
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
; 0003 037A 				dj->sect = 0;
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
; 0003 037B 				res = FR_OK;
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
; 0003 037C 			}
; 0003 037D 			if (res == FR_OK) {				/* A valid entry is found */
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
; 0003 037E 				get_fileinfo(dj, fno);		/* Get the object information */
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
; 0003 037F 				res = dir_next(dj);			/* Increment index for next */
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
; 0003 0380 				if (res == FR_NO_FILE) {
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
; 0003 0381 					dj->sect = 0;
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
; 0003 0382 					res = FR_OK;
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
; 0003 0383 				}
; 0003 0384 			}
;PCODE: $0000092D VOL: 0
; 0003 0385 		}
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0003 0386 	}
;PCODE: $00000930 VOL: 0
; 0003 0387 
; 0003 0388 	return res;
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
; 0003 0389 }
;PCODE: $00000935 VOL: 0
;
;
;/*-----------------------------------------------------------------------*/
;/* Rename file inside provided directory                                      */
;/*-----------------------------------------------------------------------*/
;FRESULT pf_rename (
; 0003 0390     const char* dirname,
; 0003 0391     const char* oldname,
; 0003 0392     const char* newname
; 0003 0393 )
; 0003 0394 {
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
; 0003 0395     FRESULT res;
; 0003 0396     FILINFO fno;
; 0003 0397     DIR dir;
; 0003 0398     int i,j;
; 0003 0399     BYTE rwbuf[512];
; 0003 039A 
; 0003 039B     res = pf_opendir(&dir, dirname);
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;	*dirname -> Y+560
;	*oldname -> Y+558
;	*newname -> Y+556
;	res -> R17
;	fno -> Y+534
;	dir -> Y+518
;	i -> R18,R19
;	j -> R20,R21
;	rwbuf -> Y+6
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
; 0003 039C     if (res == FR_OK) {
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
; 0003 039D         i = strlen(oldname);
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
; 0003 039E         j = strlen(oldname);
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
; 0003 039F         if(i==6 || j==6){
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
; 0003 03A0 
; 0003 03A1         }
; 0003 03A2         for (;;) {
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
; 0003 03A3             res = pf_readdir(&dir, &fno);
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
; 0003 03A4             if (res != FR_OK || fno.fname[0] == 0) break;
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
; 0003 03A5             for(j=0;j<i;j++){
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
; 0003 03A6                 if(fno.fname[j] != oldname[j]){
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
; 0003 03A7                     break;
;PCODE: $00000975 VOL: 0
; 0003 03A8                 }
; 0003 03A9             }
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
; 0003 03AA             if(i==j){
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
; 0003 03AB 
; 0003 03AC                res = disk_readp(rwbuf,dir.sect,0,512);
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
; 0003 03AD                if (res != FR_OK) break;
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
; 0003 03AE                i = strlen(newname);
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
; 0003 03AF                for(j=0;j<i;j++){
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
; 0003 03B0                   rwbuf[((dir.index-1)*32)%512+j]=newname[j];
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
; 0003 03B1                }
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
; 0003 03B2                res = disk_writep(0,dir.sect);
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
; 0003 03B3                if (res != FR_OK) break;
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
; 0003 03B4                res = disk_writep(rwbuf,512);
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
; 0003 03B5                if (res != FR_OK) break;
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
; 0003 03B6                res = disk_writep(0,0);
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
; 0003 03B7                if (res != FR_OK) break;
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
; 0003 03B8                res = pf_opendir(&dir, dirname);
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
; 0003 03B9                if (res != FR_OK) break;
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
; 0003 03BA                res = pf_readdir(&dir, &fno);
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
; 0003 03BB                if (res != FR_OK || fno.fname[0] == 0) break;
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
; 0003 03BC                for(j=0;j<i;j++){
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
; 0003 03BD                     if(fno.fname[j] != newname[j]){
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0003 03BE                         return FR_NO_FILE;
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
; 0003 03BF                     }
; 0003 03C0                }
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
; 0003 03C1                if(i==j){
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
; 0003 03C2                   break;
;PCODE: $00000A06 VOL: 0
; 0003 03C3                }
; 0003 03C4             }
;PCODE: $00000A07 VOL: 0
; 0003 03C5             else{
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
; 0003 03C6                res=FR_NO_FILE;
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
; 0003 03C7             }
;PCODE: $00000A0C VOL: 0
; 0003 03C8         }
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
; 0003 03C9     }
; 0003 03CA 
; 0003 03CB     return res;
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
; 0003 03CC }
;PCODE: $00000A15 VOL: 0
;#endif /* _USE_DIR */
;
