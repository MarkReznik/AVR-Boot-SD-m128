;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains an example program using the Flash R/W
;*                       functions provided with the files Self_programming.h /
;*                       Self_programming.c . The program should be compiled using
;*                       a linker file (*.xcl) that is configured to place the
;*                       entire program code into the Boot section of the Flash memory.
;*                       Please refer to the application note document for more
;*                       information.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;*****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "Self_programming.h"
;
;void main( void ){
; 0000 0020 void main( void ){

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0021   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
; 0000 0022   //unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
; 0000 0023                                             // code stack
; 0000 0024   static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
; 0000 0025   int index;
; 0000 0026   DDRC=0xFF;
;PCODE: $0000000E VOL: 0
;	testBuffer1 -> Y+0
;	index -> R16,R17
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0027   PORTC=0xFF;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0028 
; 0000 0029   for(index=0; index<PAGESIZE; index++){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A     testBuffer1[index]=index;//(unsigned char)0xFF; // Fills testBuffer1 with values FF
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002B   }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002C   if(WriteFlashBytes(0x2, testBuffer1,PAGESIZE)){     // Writes testbuffer1 to Flash page 2
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002D     PORTC.2=0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002E   }                                            // Same as byte 4 on page 2
; 0000 002F   //MCUCR &= ~(1<<IVSEL);
; 0000 0030   ReadFlashBytes(0x2,&testChar,1);        // Reads back value from address 0x204
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0031   if(testChar==0x00)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0032   {
; 0000 0033       ReadFlashBytes(0x3,&testChar,1);        // Reads back value from address 0x204
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0034       if(testChar==0x01)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0035         ReadFlashBytes(0x100,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0036         if(testChar==0xFE)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0037             ReadFlashBytes(0x101,&testChar,1);        // Reads back value from address 0x204
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0038             if(testChar==0xFF)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0039               while(1)
;PCODE: $0000005A VOL: 0
; 0000 003A               {
; 0000 003B                   PORTC.0=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003C                   delay_ms(500);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003D                   PORTC.0=1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003E                   delay_ms(500);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003F               }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0040   }
;PCODE: $00000065 VOL: 0
; 0000 0041 
; 0000 0042   while(1)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0043   {
; 0000 0044       PORTC.1=0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0045       delay_ms(500);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0046       PORTC.1=1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0047       delay_ms(500);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0048   }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0049   //}
; 0000 004A }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
