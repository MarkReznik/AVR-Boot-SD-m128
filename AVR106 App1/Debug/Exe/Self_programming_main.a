;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains an example program using the Flash R/W
;*                       functions provided with the files Self_programming.h /
;*                       Self_programming.c . The program should be compiled using
;*                       a linker file (*.xcl) that is configured to place the
;*                       entire program code into the Boot section of the Flash memory.
;*                       Please refer to the application note document for more
;*                       information.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;*****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "Self_programming.h"
;/* FAT on MMC/SD/SD HC card support */
;#include <pff.h>
;/* printf */
;#include <stdio.h>
;#include <stdlib.h>
;/* string functions */
;#include <string.h>
;#include <alcd.h>
;
;/* Timer1 overflow interrupt frequency [Hz] */
;#define T1_OVF_FREQ 100
;/* Timer1 clock prescaler value */
;#define T1_PRESC 1024L
;/* Timer1 initialization value after overflow */
;#define T1_INIT (0x10000L-(_MCU_CLOCK_FREQUENCY_/(T1_PRESC*T1_OVF_FREQ)))
;/* 100Hz timer interrupt generated by ATmega128 Timer1 overflow */
;interrupt [TIM1_OVF] void timer_comp_isr(void)
; 0000 0030 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0031     /* re-initialize Timer1 */
; 0000 0032     TCNT1H=T1_INIT>>8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0033     TCNT1L=T1_INIT&0xFF;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0034     /* card access low level timing function */
; 0000 0035     //disk_timerproc();
; 0000 0036 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;
;/* error message list */
;flash char * flash error_msg[]=
;{
;"", /* not used */
;"FR_DISK_ERR",
;"FR_INT_ERR",
;"FR_INT_ERR",
;"FR_NOT_READY",
;"FR_NO_FILE",
;"FR_NO_PATH",
;"FR_INVALID_NAME",
;"FR_DENIED",
;"FR_EXIST",
;"FR_INVALID_OBJECT",
;"FR_WRITE_PROTECTED",
;"FR_INVALID_DRIVE",
;"FR_NOT_ENABLED",
;"FR_NO_FILESYSTEM",
;"FR_MKFS_ABORTED",
;"FR_TIMEOUT"
;};
;/* display error message and stop */
;void error(FRESULT res, unsigned char num)
; 0000 0050 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0051     char* strnum;
; 0000 0052     itoa(num,strnum);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	res -> Y+3
;	num -> Y+2
;	*strnum -> R16,R17
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0053     if ((res>=FR_DISK_ERR) && (res<=FR_NO_FILESYSTEM)){//FR_NO_FILESYSTEM  FR_TIMEOUT
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0054        lcd_gotoxy(0,0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0055        printf("ERROR: %p\r\n",error_msg[res]);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0056        lcd_putsf("SD ERROR:");
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0057        lcd_puts(strnum);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0058        lcd_putsf(",");
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0059        itoa(res,strnum);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005A        lcd_puts(strnum);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005B        lcd_gotoxy(0,1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005C        lcd_putsf(error_msg[res]);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005D     }
; 0000 005E     /* stop here */
; 0000 005F     do
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0060         {
; 0000 0061           PORTC.0=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0062           PORTC.1=0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0063           delay_ms(50);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0064           PORTC.1=1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0065           PORTC.0=1;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0066           delay_ms(50);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0067           PORTC=0xFC;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0068         }
; 0000 0069       while(1);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 006A }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;unsigned char UnitTest1(){
; 0000 006C unsigned char UnitTest1(){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006D   //FRESULT f_mount(unsigned char vol, FATFS *fs);   FR_OK, FR_INVALID_DRIVE
; 0000 006E   //FRESULT f_open(FIL* fp, const char* path, unsigned char mode);
; 0000 006F   //[logical_drive_number:][/][directory_name/]file_name   0:file.txt(current dir file)
; 0000 0070   // 0:/file.txt (root dir file)
; 0000 0071   // FA_READ | FA_WRITE,FA_OPEN_EXISTING,FA_OPEN_ALWAYS,FA_CREATE_NEW,FA_CREATE_ALWAYS
; 0000 0072   // f_read(FIL* fp, void* buff, unsigned int btr, unsigned int* br)
; 0000 0073   // f_write(FIL* fp, const void* buff, unsigned int btw, unsigned int* bw)
; 0000 0074   // f_lseek(FIL* fp, unsigned long ofs)
; 0000 0075   // f_truncate(FIL* fp)  cut the size of file to current position of pointer
; 0000 0076   // f_close(FIL* fp)
; 0000 0077   // f_sync(FIL* fp) useful when file open in write mode a lomg time
; 0000 0078   // f_opendir(DIR* dj, const char* path)
; 0000 0079   // f_readdir(DIR* dj, FILINFO* fno)
; 0000 007A   // FRESULT f_mkdir (const char* path)  FRESULT f_unlink(const char* path)
; 0000 007B 
; 0000 007C 
; 0000 007D       /* FAT function result */
; 0000 007E     FRESULT res;
; 0000 007F     /* number of bytes written/read to the file */
; 0000 0080     unsigned int nbytes;
; 0000 0081     /* will hold the information for logical drive 0: */
; 0000 0082     FATFS fat;
; 0000 0083     /* will hold the file information */
; 0000 0084     //FIL file;
; 0000 0085     /* will hold file attributes, time stamp information */
; 0000 0086     FILINFO finfo;
; 0000 0087 
; 0000 0088     /* root directory path */
; 0000 0089     //char path[256]="0:/unittest.txt";
; 0000 008A     char path[256]="/0/unittest.txt";
; 0000 008B     /* text to be written to the file */
; 0000 008C     char text[]="Unit Test 1";
; 0000 008D     /* file read buffer */
; 0000 008E     char buffer[256];
; 0000 008F 
; 0000 0090     /* globally enable interrupts */
; 0000 0091     //#asm("sei")
; 0000 0092 
; 0000 0093 
; 0000 0094     /* mount logical drive 0: */
; 0000 0095     //if ((res=f_mount(0,&fat))==FR_OK)
; 0000 0096     if ((res=pf_mount(&fat))==FR_OK)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;	res -> R17
;	nbytes -> R18,R19
;	fat -> Y+550
;	finfo -> Y+528
;	path -> Y+272
;	text -> Y+260
;	buffer -> Y+4
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0097        printf("Logical drive 0: mounted OK\r\n");
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0098     else
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0099        /* an error occured, display it and stop */
; 0000 009A        error(res,1);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009B 
; 0000 009C 
; 0000 009D     printf("%s \r\n",path);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009E     /*this line will remove READ_ONLY attribute*/
; 0000 009F     //f_chmod(path, AM_ARC, AM_ARC|AM_RDO);
; 0000 00A0     /* create a new file in the root of drive 0:
; 0000 00A1        and set write access mode */
; 0000 00A2     //if ((res=f_open(&file,path,FA_CREATE_ALWAYS | FA_WRITE))==FR_OK)
; 0000 00A3     if ((res=pf_open(path))==FR_OK)
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A4        printf("File %s created OK\r\n",path);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00A5     else{
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A6        /* an error occured, display it and stop */
; 0000 00A7        if(res!=3)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A8             error(res,2);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A9     }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00AA 
; 0000 00AB     /* write some text to the file,
; 0000 00AC        without the NULL string terminator sizeof(data)-1 */
; 0000 00AD     //if ((res=f_write(&file,text,sizeof(text)-1,&nbytes))==FR_OK)
; 0000 00AE     if ((res=pf_write(text,sizeof(text)-1,&nbytes))==FR_OK)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AF        printf("%u bytes written of %u\r\n",nbytes,sizeof(text)-1);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B0     else
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00B1        ///* an error occured, display it and stop */
; 0000 00B2        error(res,3);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B3 
; 0000 00B4         /* close the file */
; 0000 00B5     /*
; 0000 00B6     if ((res=f_close(&file))==FR_OK)
; 0000 00B7        printf("File %s closed OK\r\n",path);
; 0000 00B8     else
; 0000 00B9        // an error occured, display it and stop
; 0000 00BA        error(res,4);
; 0000 00BB     */
; 0000 00BC 
; 0000 00BD     /* open the file in read mode */
; 0000 00BE 
; 0000 00BF     //if ((res=f_open(&file,path,FA_READ|FA_WRITE))==FR_OK)
; 0000 00C0     if ((res=pf_open(path))==FR_OK)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00C1        printf("File %s opened OK\r\n",path);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00C2     else
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00C3        ///* an error occured, display it and stop */
; 0000 00C4        error(res,7);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00C5 
; 0000 00C6 
; 0000 00C7 
; 0000 00C8     /* read and display the file's content.
; 0000 00C9        make sure to leave space for a NULL terminator
; 0000 00CA        in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0000 00CB     //if ((res=f_read(&file,buffer,sizeof(buffer)-1,&nbytes))==FR_OK)
; 0000 00CC     if ((res=pf_read(buffer,sizeof(buffer)-1,&nbytes))==FR_OK)
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00CD        {
; 0000 00CE        printf("%u bytes read\r\n",nbytes);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00CF        /* NULL terminate the char string in the buffer */
; 0000 00D0        buffer[nbytes+1]=NULL;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00D1        /* display the buffer contents */
; 0000 00D2        printf("Read text: \"%s\"\r\n",buffer);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00D3        }
; 0000 00D4     else
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D5        /* an error occured, display it and stop */
; 0000 00D6        error(res,6);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00D7 
; 0000 00D8 
; 0000 00D9     /* close the file */
; 0000 00DA     /*
; 0000 00DB     if ((res=f_close(&file))==FR_OK)
; 0000 00DC        printf("File %s closed OK\r\n",path);
; 0000 00DD     else
; 0000 00DE        // an error occured, display it and stop
; 0000 00DF        error(res,6);
; 0000 00E0     */
; 0000 00E1 
; 0000 00E2     /* display file's attribute, size and time stamp */
; 0000 00E3     //display_status(path);
; 0000 00E4 
; 0000 00E5 
; 0000 00E6     /* change file's attributes, set the file to be Read-Only */
; 0000 00E7     /*
; 0000 00E8     if ((res=f_chmod(path,AM_RDO,AM_RDO))==FR_OK)
; 0000 00E9        printf("Read-Only attribute set OK\r\n",path);
; 0000 00EA     else
; 0000 00EB        // an error occured, display it and stop
; 0000 00EC        error(res,7);
; 0000 00ED     */
; 0000 00EE   return 1;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00EF }
;PCODE: $00000118 VOL: 0
;void main( void ){
; 0000 00F0 void main( void ){
;PCODE: $00000119 VOL: 0
; 0000 00F1   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
; 0000 00F2   //unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
; 0000 00F3                                             // code stack
; 0000 00F4   static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
; 0000 00F5   int index;
; 0000 00F6 
; 0000 00F7   /* initialize Timer1 overflow interrupts in Mode 0 (Normal) */
; 0000 00F8 TCCR1A=0x00;
;PCODE: $0000011A VOL: 0
;	testBuffer1 -> Y+0
;	index -> R16,R17
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00F9 /* clkio/1024 */
; 0000 00FA TCCR1B=(1<<CS12)|(1<<CS10);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00FB /* timer overflow interrupts will occur with 100Hz frequency */
; 0000 00FC TCNT1H=T1_INIT>>8;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00FD TCNT1L=T1_INIT&0xFF;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00FE /* enable Timer1 overflow interrupt */
; 0000 00FF TIMSK=1<<TOIE1;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0100 
; 0000 0101   /* globally enable interrupts */
; 0000 0102     #asm("sei")
;PCODE: $00000125 VOL: 0
	sei
;PCODE: $00000126 VOL: 0
; 0000 0103 
; 0000 0104   DDRC=0xFF;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0105   PORTC=0xFF;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0106   /* initialize the LCD for 2 lines & 16 columns */
; 0000 0107     lcd_init(16);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0108   /* switch to writing in Display RAM */
; 0000 0109     //lcd_gotoxy(0,0);
; 0000 010A     lcd_clear();
;PCODE: $0000012D VOL: 0
; 0000 010B     //lcd_putsf("User char 0:");
; 0000 010C 
; 0000 010D   //disk_timerproc();
; 0000 010E   lcd_clear();
;PCODE: $0000012E VOL: 0
; 0000 010F   lcd_putsf("ppf Test.");
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0110   UnitTest1();
;PCODE: $00000132 VOL: 0
; 0000 0111   /* switch to writing in Display RAM */
; 0000 0112     lcd_gotoxy(0,0);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0113     lcd_putsf("Test1 done.");
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0114   do
;PCODE: $0000013A VOL: 0
; 0000 0115     {
; 0000 0116       PORTC.0=0;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0117       PORTC.1=0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0118       delay_ms(500);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0119       PORTC.1=1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 011A       PORTC.0=1;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 011B       delay_ms(500);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 011C       PORTC=0xFC;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 011D     }
; 0000 011E   while(1);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 011F   for(index=0; index<PAGESIZE; index++){
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0120     testBuffer1[index]=index;//(unsigned char)0xFF; // Fills testBuffer1 with values FF
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0121   }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0122   if(WriteFlashBytes(0x2, testBuffer1,PAGESIZE)){     // Writes testbuffer1 to Flash page 2
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0123     PORTC.2=0;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0124   }                                            // Same as byte 4 on page 2
; 0000 0125   //MCUCR &= ~(1<<IVSEL);
; 0000 0126   ReadFlashBytes(0x2,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0127   if(testChar==0x00)
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0128   {
; 0000 0129       ReadFlashBytes(0x3,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 012A       if(testChar==0x01)
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 012B         ReadFlashBytes(0x100,&testChar,1);        // Reads back value from address 0x204
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 012C         if(testChar==0xFE)
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 012D             ReadFlashBytes(0x101,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 012E             if(testChar==0xFF)
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 012F               while(1)
;PCODE: $00000193 VOL: 0
; 0000 0130               {
; 0000 0131                   PORTC.0=0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0132                   delay_ms(500);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0133                   PORTC.0=1;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0134                   delay_ms(500);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0135               }
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0136   }
;PCODE: $0000019E VOL: 0
; 0000 0137 
; 0000 0138   while(1)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0139   {
; 0000 013A       PORTC.1=0;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 013B       delay_ms(500);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 013C       PORTC.1=1;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 013D       delay_ms(500);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 013E   }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 013F   //}
; 0000 0140 }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
