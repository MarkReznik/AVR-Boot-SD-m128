;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains an example program using the Flash R/W
;*                       functions provided with the files Self_programming.h /
;*                       Self_programming.c . The program should be compiled using
;*                       a linker file (*.xcl) that is configured to place the
;*                       entire program code into the Boot section of the Flash memory.
;*                       Please refer to the application note document for more
;*                       information.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;*****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "Self_programming.h"
;/* FAT on MMC/SD/SD HC card support */
;//Petit fat api
;#include <pff_rn.h>
;#include "diskio.h"		/* Declarations of low level disk I/O functions */
;/* printf */
;#include <stdio.h>
;#include <stdlib.h>
;/* string functions */
;#include <string.h>
;#include <alcd.h>
;
;/*Globals*/
;int retry;
;/* FAT function result */
;FRESULT res;
;/* number of bytes written/read to the file */
;unsigned int nbytes;
;/* will hold the information for logical drive 0: */
;FATFS fat;
;/* will hold the file information */
;//FIL file;
;/* will hold file attributes, time stamp information */
;FILINFO finfo;
;/* root directory path */
;char path[64];//="/0/unittest.txt";
;/* text to be written to the file */
;char text[]="Unit Test 1";

	.DSEG
;/* file read buffer */
;char buffer[256];
;
;/* error message list */
;flash char * flash error_msg[]=
;{
;"", /* not used */
;"FR_DISK_ERR",
;"FR_INT_ERR",
;"FR_INT_ERR",
;"FR_NOT_READY",
;"FR_NO_FILE",
;"FR_NO_PATH",
;"FR_INVALID_NAME",
;"FR_DENIED",
;"FR_EXIST",
;"FR_INVALID_OBJECT",
;"FR_WRITE_PROTECTED",
;"FR_INVALID_DRIVE",
;"FR_NOT_ENABLED",
;"FR_NO_FILESYSTEM",
;"FR_MKFS_ABORTED",
;"FR_TIMEOUT"
;};
;/* display error message and stop */
;void error(FRESULT res, unsigned char num)
; 0000 0054 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0055     char strnum[5];
; 0000 0056     if(num>100){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	res -> Y+6
;	num -> Y+5
;	strnum -> Y+0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0057        num=100;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0058     }
; 0000 0059     itoa(num,strnum);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 005A     do{
;PCODE: $0000001C VOL: 0
; 0000 005B     if ((res>=0) && (res<=FR_NO_FILESYSTEM)){//FR_NO_FILESYSTEM  FR_TIMEOUT
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005C        lcd_gotoxy(0,0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005D        printf("ERROR: %p\r\n",error_msg[res]);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005E        if(res==0){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005F         lcd_putsf("SD OK: ");
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0060        }
; 0000 0061        else{
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0062         lcd_putsf("SD ERROR: ");
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0063        }
;PCODE: $00000045 VOL: 0
; 0000 0064        delay_ms(100);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0065        lcd_puts(strnum);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0066        lcd_putsf(",");
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0067        itoa(res,strnum);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0068        lcd_puts(strnum);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0069        lcd_gotoxy(0,1);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006A        lcd_putsf(error_msg[res]);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006B     }
; 0000 006C     /* stop here */
; 0000 006D     //do
; 0000 006E         //{
; 0000 006F           PORTC.0=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0070           PORTC.1=0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0071           delay_ms(150);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0072           PORTC.1=1;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0073           PORTC.0=1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0074           delay_ms(150);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0075           PORTC=0xFC;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0076         }
; 0000 0077       while(1);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0078 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;unsigned char rn(char *newname, char *oldname){
; 0000 0079 unsigned char rn(char *newname, char *oldname){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 007A     strcpy(path,"/0/unittest.txt");
;PCODE: $0000007A VOL: 0
;	*newname -> Y+2
;	*oldname -> Y+0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007B 
; 0000 007C }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x10
;unsigned char RenameTest(){
; 0000 007D unsigned char RenameTest(){

	.CSEG
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007E    int retry;
; 0000 007F    strcpy(path,"/0/unittest.txt");
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;	retry -> R16,R17
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0080 
; 0000 0081 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0

	.DSEG
_0x16:
	.BYTE 0x10
;
;FRESULT rename (const char* dirname, const char* oldname, char* newname)
; 0000 0084 {

	.CSEG
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0085     FRESULT res;
; 0000 0086     FILINFO fno;
; 0000 0087     DIR dir;
; 0000 0088     int i;
; 0000 0089     BYTE rwbuf[512];
; 0000 008A 
; 0000 008B     res = pf_opendir(&dir, path);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;	*dirname -> Y+558
;	*oldname -> Y+556
;	*newname -> Y+554
;	res -> R17
;	fno -> Y+532
;	dir -> Y+516
;	i -> R18,R19
;	rwbuf -> Y+4
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 008C     if (res == FR_OK) {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008D         i = strlen(path);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008E         for (;;) {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008F             res = pf_readdir(&dir, &fno);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0090             if (res != FR_OK || fno.fname[0] == 0) break;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0091             if(fno.fname[0] == 'U'){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0092                res = disk_readp(rwbuf,dir.sect,0,512);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0093                if (res != FR_OK) break;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0094                rwbuf[((dir.index-1)*32)+6]='5';
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0095                res = disk_writep(0,dir.sect);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0096                if (res != FR_OK) break;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0097                res = disk_writep(rwbuf,512);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0098                if (res != FR_OK) break;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0099                res = disk_writep(0,0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 009A                break;
;PCODE: $000000E7 VOL: 0
; 0000 009B             }
; 0000 009C             /*
; 0000 009D             if (fno.fattrib & AM_DIR) {
; 0000 009E                 sprintf(&path[i], "/%s", fno.fname);
; 0000 009F                 res = scan_files(path);
; 0000 00A0                 if (res != FR_OK) break;
; 0000 00A1                 path[i] = 0;
; 0000 00A2             } else {
; 0000 00A3                 printf("%s/%s\n", path, fno.fname);
; 0000 00A4             }
; 0000 00A5             */
; 0000 00A6         }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00A7     }
; 0000 00A8 
; 0000 00A9     return res;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00AA }
;PCODE: $000000F1 VOL: 0
;
;unsigned char UnitTest1(){
; 0000 00AC unsigned char UnitTest1(){
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00AD 
; 0000 00AE     strcpy(path,"/0/UPDATE3.DAT");
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00AF     /* mount logical drive 0: */
; 0000 00B0     //if ((res=f_mount(0,&fat))==FR_OK)
; 0000 00B1     for(retry=0;retry<5;retry++){
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00B2         res=pf_mount(&fat);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B3         if (res==FR_OK){
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B4             break;
;PCODE: $00000107 VOL: 0
; 0000 00B5         }
; 0000 00B6         else{
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00B7           delay_ms(500);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00B8         }
;PCODE: $0000010C VOL: 0
; 0000 00B9     }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00BA     if (res==FR_OK)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00BB        printf("Logical drive 0: mounted OK\r\n");
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00BC     else
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00BD        /* an error occured, display it and stop */
; 0000 00BE        error(res,1);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BF     //scan_files("/0");
; 0000 00C0 
; 0000 00C1     //res=pf_rename("/0","UPDATE","DONE001");
; 0000 00C2     res=pf_rename("/0","DONE","UPDATE");
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C3     error(res,22);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00C4 
; 0000 00C5     printf("%s \r\n",path);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C6 
; 0000 00C7 
; 0000 00C8 
; 0000 00C9     /*this line will remove READ_ONLY attribute*/
; 0000 00CA     //f_chmod(path, AM_ARC, AM_ARC|AM_RDO);
; 0000 00CB     /* create a new file in the root of drive 0:
; 0000 00CC        and set write access mode */
; 0000 00CD     //if ((res=f_open(&file,path,FA_CREATE_ALWAYS | FA_WRITE))==FR_OK)
; 0000 00CE     if ((res=pf_open(path))==FR_OK)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00CF        printf("File %s created OK\r\n",path);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00D0     else{
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D1        /* an error occured, display it and stop */
; 0000 00D2        if(res!=3)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D3             error(res,2);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00D4     }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00D5 
; 0000 00D6     /* write some text to the file,
; 0000 00D7        without the NULL string terminator sizeof(data)-1 */
; 0000 00D8     //if ((res=f_write(&file,text,sizeof(text)-1,&nbytes))==FR_OK)
; 0000 00D9     if ((res=pf_write(text,sizeof(text)-1,&nbytes))==FR_OK)
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00DA        printf("%u bytes written of %u\r\n",nbytes,sizeof(text)-1);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00DB     else
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00DC        ///* an error occured, display it and stop */
; 0000 00DD        error(res,3);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00DE 
; 0000 00DF         /* close the file */
; 0000 00E0     /*
; 0000 00E1     if ((res=f_close(&file))==FR_OK)
; 0000 00E2        printf("File %s closed OK\r\n",path);
; 0000 00E3     else
; 0000 00E4        // an error occured, display it and stop
; 0000 00E5        error(res,4);
; 0000 00E6     */
; 0000 00E7 
; 0000 00E8     /* open the file in read mode */
; 0000 00E9 
; 0000 00EA     //if ((res=f_open(&file,path,FA_READ|FA_WRITE))==FR_OK)
; 0000 00EB     if ((res=pf_open(path))==FR_OK)
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00EC        printf("File %s opened OK\r\n",path);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00ED     else
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00EE        ///* an error occured, display it and stop */
; 0000 00EF        error(res,7);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00F0 
; 0000 00F1 
; 0000 00F2 
; 0000 00F3     /* read and display the file's content.
; 0000 00F4        make sure to leave space for a NULL terminator
; 0000 00F5        in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0000 00F6     //if ((res=f_read(&file,buffer,sizeof(buffer)-1,&nbytes))==FR_OK)
; 0000 00F7     if ((res=pf_read(buffer,sizeof(buffer)-1,&nbytes))==FR_OK)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00F8        {
; 0000 00F9        printf("%u bytes read\r\n",nbytes);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00FA        /* NULL terminate the char string in the buffer */
; 0000 00FB        buffer[nbytes+1]=NULL;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00FC        /* display the buffer contents */
; 0000 00FD        printf("Read text: \"%s\"\r\n",buffer);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00FE        }
; 0000 00FF     else
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0100        /* an error occured, display it and stop */
; 0000 0101        error(res,6);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0102 
; 0000 0103 
; 0000 0104     /* close the file */
; 0000 0105     /*
; 0000 0106     if ((res=f_close(&file))==FR_OK)
; 0000 0107        printf("File %s closed OK\r\n",path);
; 0000 0108     else
; 0000 0109        // an error occured, display it and stop
; 0000 010A        error(res,6);
; 0000 010B     */
; 0000 010C 
; 0000 010D     /* display file's attribute, size and time stamp */
; 0000 010E     //display_status(path);
; 0000 010F 
; 0000 0110 
; 0000 0111     /* change file's attributes, set the file to be Read-Only */
; 0000 0112     /*
; 0000 0113     if ((res=f_chmod(path,AM_RDO,AM_RDO))==FR_OK)
; 0000 0114        printf("Read-Only attribute set OK\r\n",path);
; 0000 0115     else
; 0000 0116        // an error occured, display it and stop
; 0000 0117        error(res,7);
; 0000 0118     */
; 0000 0119   return 1;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 011A }
;PCODE: $000001AC VOL: 0

	.DSEG
_0x22:
	.BYTE 0x1E
;void main( void ){
; 0000 011B void main( void ){

	.CSEG
;PCODE: $000001AD VOL: 0
; 0000 011C   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
; 0000 011D   //unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
; 0000 011E                                             // code stack
; 0000 011F   static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
; 0000 0120   int index;
; 0000 0121 
; 0000 0122   /* globally enable interrupts */
; 0000 0123     #asm("sei")
;PCODE: $000001AE VOL: 0
;	testBuffer1 -> Y+0
;	index -> R16,R17
;PCODE: $000001AF VOL: 0
	sei
;PCODE: $000001B0 VOL: 0
; 0000 0124 
; 0000 0125   DDRC=0xFF;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0126   PORTC=0xFF;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0127   /* initialize the LCD for 2 lines & 16 columns */
; 0000 0128     lcd_init(16);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0129   /* switch to writing in Display RAM */
; 0000 012A     //lcd_gotoxy(0,0);
; 0000 012B     lcd_clear();
;PCODE: $000001B7 VOL: 0
; 0000 012C     //lcd_putsf("User char 0:");
; 0000 012D 
; 0000 012E   //disk_timerproc();
; 0000 012F   lcd_clear();
;PCODE: $000001B8 VOL: 0
; 0000 0130   lcd_putsf("pff Test.");
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0131   delay_ms(2000);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0132   UnitTest1();
;PCODE: $000001BE VOL: 0
; 0000 0133 
; 0000 0134   //RenameTest();
; 0000 0135   //UpdateTest();
; 0000 0136   //WriteDataTest();
; 0000 0137   //ReadDataTest();
; 0000 0138 
; 0000 0139   /* switch to writing in Display RAM */
; 0000 013A     lcd_gotoxy(0,0);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 013B     lcd_putsf("Test2 done.");
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 013C   do
;PCODE: $000001C6 VOL: 0
; 0000 013D     {
; 0000 013E       PORTC.0=0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 013F       PORTC.1=0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0140       delay_ms(500);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0141       PORTC.1=1;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0142       PORTC.0=1;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0143       delay_ms(500);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0144       PORTC=0xFC;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0145     }
; 0000 0146   while(1);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0147   for(index=0; index<PAGESIZE; index++){
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0148     testBuffer1[index]=index;//(unsigned char)0xFF; // Fills testBuffer1 with values FF
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0149   }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 014A   if(WriteFlashBytes(0x2, testBuffer1,PAGESIZE)){     // Writes testbuffer1 to Flash page 2
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 014B     PORTC.2=0;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 014C   }                                            // Same as byte 4 on page 2
; 0000 014D   //MCUCR &= ~(1<<IVSEL);
; 0000 014E   ReadFlashBytes(0x2,&testChar,1);        // Reads back value from address 0x204
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 014F   if(testChar==0x00)
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0150   {
; 0000 0151       ReadFlashBytes(0x3,&testChar,1);        // Reads back value from address 0x204
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0152       if(testChar==0x01)
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0153         ReadFlashBytes(0x100,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0154         if(testChar==0xFE)
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0155             ReadFlashBytes(0x101,&testChar,1);        // Reads back value from address 0x204
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0156             if(testChar==0xFF)
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0157               while(1)
;PCODE: $0000021F VOL: 0
; 0000 0158               {
; 0000 0159                   PORTC.0=0;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 015A                   delay_ms(500);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 015B                   PORTC.0=1;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 015C                   delay_ms(500);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 015D               }
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 015E   }
;PCODE: $0000022A VOL: 0
; 0000 015F 
; 0000 0160   while(1)
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0161   {
; 0000 0162       PORTC.1=0;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0163       delay_ms(500);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0164       PORTC.1=1;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0165       delay_ms(500);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0166   }
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0167   //}
; 0000 0168 }
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
