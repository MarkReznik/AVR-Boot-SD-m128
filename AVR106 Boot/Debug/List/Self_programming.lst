
AVRASM ver. 2.1.30  D:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128\AVR106 Boot\Debug\List\Self_programming.asm Thu Mar 19 21:47:54 2020

D:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128\AVR106 Boot\Debug\List\Self_programming.asm(1100): warning: Register r4 already defined by the .DEF directive
D:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128\AVR106 Boot\Debug\List\Self_programming.asm(1101): warning: Register r5 already defined by the .DEF directive
D:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128\AVR106 Boot\Debug\List\Self_programming.asm(1102): warning: Register r6 already defined by the .DEF directive
D:\MyProjects\My_AVR_Programmer\AVRbootSD\AVR106 AppBoot_m128\AVR106 Boot\Debug\List\Self_programming.asm(1103): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Medium
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_MEDIUM_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __GETBRPF
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETBRPF_INC
                 	OUT  RAMPZ,R22
                 	ELPM R@0,Z+
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test=R4
                 	.DEF ___AddrToZ24ByteToSPMCR_SPM_W_Test_msb=R5
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test=R6
                 	.DEF ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test_msb=R7
                 
                 	.CSEG
                 	.ORG 0xF800
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
00f800 940c f84d 	JMP  __RESET
00f802 940c f800 	JMP  0xF800
00f804 940c f800 	JMP  0xF800
00f806 940c f800 	JMP  0xF800
00f808 940c f800 	JMP  0xF800
00f80a 940c f800 	JMP  0xF800
00f80c 940c f800 	JMP  0xF800
00f80e 940c f800 	JMP  0xF800
00f810 940c f800 	JMP  0xF800
00f812 940c f800 	JMP  0xF800
00f814 940c f800 	JMP  0xF800
00f816 940c f800 	JMP  0xF800
00f818 940c f800 	JMP  0xF800
00f81a 940c f800 	JMP  0xF800
00f81c 940c f800 	JMP  0xF800
00f81e 940c f800 	JMP  0xF800
00f820 940c f800 	JMP  0xF800
00f822 940c f800 	JMP  0xF800
00f824 940c f800 	JMP  0xF800
00f826 940c f800 	JMP  0xF800
00f828 940c f800 	JMP  0xF800
00f82a 940c f800 	JMP  0xF800
00f82c 940c f800 	JMP  0xF800
00f82e 940c f800 	JMP  0xF800
00f830 940c f800 	JMP  0xF800
00f832 940c f800 	JMP  0xF800
00f834 940c f800 	JMP  0xF800
00f836 940c f800 	JMP  0xF800
00f838 940c f800 	JMP  0xF800
00f83a 940c f800 	JMP  0xF800
00f83c 940c f800 	JMP  0xF800
00f83e 940c f800 	JMP  0xF800
00f840 940c f800 	JMP  0xF800
00f842 940c f800 	JMP  0xF800
00f844 940c f800 	JMP  0xF800
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00f846 fa06
00f847 f9f6      	.DB  0x6,0xFA,0xF6,0xF9
                 
                 
                 __GLOBAL_INI_TBL:
00f848 0004      	.DW  0x04
00f849 0004      	.DW  0x04
00f84a f08c 0001 	.DD  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00f84c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00f84d 94f8      	CLI
00f84e 27ee      	CLR  R30
00f84f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
00f850 e0f1      	LDI  R31,1
00f851 bff5      	OUT  MCUCR,R31
00f852 e0f2      	LDI  R31,2
00f853 bff5      	OUT  MCUCR,R31
00f854 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00f856 e08d      	LDI  R24,(14-2)+1
00f857 e0a2      	LDI  R26,2
00f858 27bb      	CLR  R27
                 __CLEAR_REG:
00f859 93ed      	ST   X+,R30
00f85a 958a      	DEC  R24
00f85b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00f85c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00f85d e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00f85e e0a0      	LDI  R26,LOW(__SRAM_START)
00f85f e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00f860 93ed      	ST   X+,R30
00f861 9701      	SBIW R24,1
00f862 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00f863 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00f864 eff0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
00f865 e0d1      	LDI  R29,BYTE3(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00f866 bfdb      	OUT  RAMPZ,R29
00f867 9187      	ELPM R24,Z+
00f868 9197      	ELPM R25,Z+
00f869 9700      	SBIW R24,0
00f86a f081      	BREQ __GLOBAL_INI_END
00f86b 91a7      	ELPM R26,Z+
00f86c 91b7      	ELPM R27,Z+
00f86d 9007      	ELPM R0,Z+
00f86e 9017      	ELPM R1,Z+
00f86f 91c7      	ELPM R28,Z+
00f870 91d7      	ELPM R29,Z+
00f871 01bf      	MOVW R22,R30
00f872 b7db      	IN   R29,RAMPZ
00f873 01f0      	MOVW R30,R0
00f874 bfcb      	OUT  RAMPZ,R28
                 __GLOBAL_INI_LOOP:
00f875 9007      	ELPM R0,Z+
00f876 920d      	ST   X+,R0
00f877 9701      	SBIW R24,1
00f878 f7e1      	BRNE __GLOBAL_INI_LOOP
00f879 01fb      	MOVW R30,R22
00f87a cfeb      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00f87b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00f87c bfed      	OUT  SPL,R30
00f87d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00f87e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00f87f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00f880 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00f881 940c fa5f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : All devices with bootloaders support.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains functions for easy reading and writing
                 ;*                       of Flash memory on parts having the "Self-programming"
                 ;*                       feature. The user functions are as follows:
                 ;*
                 ;*                       ReadFlashByte()
                 ;*                       ReadFlashPage()
                 ;*                       WriteFlashByte()
                 ;*                       WriteFlashPage()
                 ;*                       RecoverFlash()
                 ;*
                 ;*                       The remaining functions contained in this file are used
                 ;*                       by the functions listet above.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <inavr.h>
                 ;#include "Self_programming.h"
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;#include <delay.h>
                 ;
                 ;
                 ;void (*__AddrToZ24ByteToSPMCR_SPM_W_Test)(void flash *addr)= (void(*)(void flash *)) 0x0FA06;
                 ;void (*__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F_Test)(void flash *addr, unsigned int data)= (void(*)(void flash *, unsigne ...
                 ;
                 ;
                 ;/*!
                 ;* Declare global struct variable in EEPROM if Flash recovery enabled.
                 ;* FlashBackup pageNumber holds Flash pageaddress (/PAGESIZE) the data in Flash
                 ;* recovery buffer should be written to if data need to be recovered.
                 ;* FlashBackup.status tells if data need to be recovered.
                 ;**/
                 ;#ifdef __FLASH_RECOVER
                 ;__eeprom struct {
                 ;  unsigned int  pageNumber;
                 ;  unsigned char status;
                 ;}FlashBackup = {0};
                 ;#endif
                 ;
                 ;void MY_FILL_TEMP_WORD(unsigned long addr,unsigned int data)
                 ; 0000 003A {
                 
                 	.CSEG
                 ; 0000 003B      _FILL_TEMP_WORD(addr,data);
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ; 0000 003C }
                 ;void MY_PAGE_ERASE(unsigned long addr)
                 ; 0000 003E {
                 ; 0000 003F      _PAGE_ERASE(addr);
                 ;	addr -> Y+0
                 ; 0000 0040 }
                 ;void MY_PAGE_WRITE(unsigned long addr)
                 ; 0000 0042 {
                 ; 0000 0043      _PAGE_WRITE(addr);
                 ;	addr -> Y+0
                 ; 0000 0044 }
                 ;/*!
                 ;* The function Returns one byte located on Flash address given by ucFlashStartAdr.
                 ;**/
                 ;unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 ; 0000 0048 unsigned char ReadFlashByte(MyAddressType flashStartAdr){
                 _ReadFlashByte:
                 ; .FSTART _ReadFlashByte
                 ; 0000 0049 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 004A   return (unsigned char)*((MyFlashCharPointer)flashStartAdr);
00f883 940e faed 	CALL __PUTPARD2
                 ;	flashStartAdr -> Y+0
00f885 940e fade 	CALL __GETD1S0
                +
00f887 bf6b     +OUT RAMPZ , R22
00f888 91e6     +ELPM R30 , Z
                 	__GETBRPF 30
00f889 940c fa5d 	JMP  _0x2000001
                 ; 0000 004B //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 004C } // Returns data from Flash
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function reads one Flash page from address flashStartAdr and stores data
                 ;* in array dataPage[]. The number of bytes stored is depending upon the
                 ;* Flash page size. The function returns FALSE if input address is not a Flash
                 ;* page address, else TRUE.
                 ;**/
                 ;unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 ; 0000 0054 unsigned char ReadFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage){
                 _ReadFlashPage:
                 ; .FSTART _ReadFlashPage
                 ; 0000 0055   unsigned int index;
                 ; 0000 0056   if(!(flashStartAdr & (PAGESIZE-1))){      // If input address is a page address
00f88b 93ba      	ST   -Y,R27
00f88c 93aa      	ST   -Y,R26
00f88d 931a      	ST   -Y,R17
00f88e 930a      	ST   -Y,R16
                 ;	flashStartAdr -> Y+4
                 ;	*dataPage -> Y+2
                 ;	index -> R16,R17
                +
00f88f 81ec     +LDD R30 , Y + 4
00f890 81fd     +LDD R31 , Y + 4 + 1
00f891 816e     +LDD R22 , Y + 4 + 2
00f892 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00f893 30e0      	CPI  R30,0
00f894 f4f9      	BRNE _0x3
                 ; 0000 0057     for(index = 0; index < PAGESIZE; index++){
                +
00f895 e000     +LDI R16 , LOW ( 0 )
00f896 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5:
                +
00f897 3000     +CPI R16 , LOW ( 256 )
00f898 e0e1     +LDI R30 , HIGH ( 256 )
00f899 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f89a f4b8      	BRSH _0x6
                 ; 0000 0058       dataPage[index] = ReadFlashByte(flashStartAdr + index);
00f89b 01f8      	MOVW R30,R16
00f89c 81aa      	LDD  R26,Y+2
00f89d 81bb      	LDD  R27,Y+2+1
00f89e 0fea      	ADD  R30,R26
00f89f 1ffb      	ADC  R31,R27
00f8a0 93ff      	PUSH R31
00f8a1 93ef      	PUSH R30
00f8a2 01f8      	MOVW R30,R16
                +
00f8a3 81ac     +LDD R26 , Y + 4
00f8a4 81bd     +LDD R27 , Y + 4 + 1
00f8a5 818e     +LDD R24 , Y + 4 + 2
00f8a6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00f8a7 2766      	CLR  R22
00f8a8 2777      	CLR  R23
00f8a9 940e fad5 	CALL __ADDD21
00f8ab dfd7      	RCALL _ReadFlashByte
00f8ac 91af      	POP  R26
00f8ad 91bf      	POP  R27
00f8ae 93ec      	ST   X,R30
                 ; 0000 0059     }
                +
00f8af 5f0f     +SUBI R16 , LOW ( - 1 )
00f8b0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00f8b1 cfe5      	RJMP _0x5
                 _0x6:
                 ; 0000 005A     return TRUE;                            // Return TRUE if valid page address
00f8b2 e0e1      	LDI  R30,LOW(1)
00f8b3 c001      	RJMP _0x2000004
                 ; 0000 005B   }
                 ; 0000 005C   else{
                 _0x3:
                 ; 0000 005D     return FALSE;                           // Return FALSE if not valid page address
00f8b4 e0e0      	LDI  R30,LOW(0)
                 ; 0000 005E   }
                 ; 0000 005F }
                 _0x2000004:
00f8b5 8119      	LDD  R17,Y+1
00f8b6 8108      	LDD  R16,Y+0
00f8b7 9628      	ADIW R28,8
00f8b8 9508      	RET
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function writes byte data to Flash address flashAddr. Returns FALSE if
                 ;* input address is not valid Flash byte address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0065 unsigned char WriteFlashByte(MyAddressType flashAddr, unsigned char data){
                 _WriteFlashByte:
                 ; .FSTART _WriteFlashByte
                 ; 0000 0066   MyAddressType  pageAdr;
                 ; 0000 0067   unsigned char eepromInterruptSettings;
                 ; 0000 0068   if( AddressCheck( flashAddr & ~(PAGESIZE-1) )){
00f8b9 93aa      	ST   -Y,R26
00f8ba 9724      	SBIW R28,4
00f8bb 931a      	ST   -Y,R17
                 ;	flashAddr -> Y+6
                 ;	data -> Y+5
                 ;	pageAdr -> Y+1
                 ;	eepromInterruptSettings -> R17
                +
00f8bc 81ee     +LDD R30 , Y + 6
00f8bd 81ff     +LDD R31 , Y + 6 + 1
00f8be 8568     +LDD R22 , Y + 6 + 2
00f8bf 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00f8c0 70e0      	ANDI R30,LOW(0xFFFFFF00)
00f8c1 01df      	MOVW R26,R30
00f8c2 01cb      	MOVW R24,R22
00f8c3 d081      	RCALL _AddressCheck
00f8c4 30e0      	CPI  R30,0
00f8c5 f111      	BREQ _0x8
                 ; 0000 0069 
                 ; 0000 006A     eepromInterruptSettings= EECR & (1<<EERIE); // Stores EEPROM interrupt mask
00f8c6 b3ec      	IN   R30,0x1C
00f8c7 70e8      	ANDI R30,LOW(0x8)
00f8c8 2f1e      	MOV  R17,R30
                 ; 0000 006B     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
00f8c9 98e3      	CBI  0x1C,3
                 ; 0000 006C     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 _0x9:
00f8ca 99e1      	SBIC 0x1C,1
00f8cb cffe      	RJMP _0x9
                 ; 0000 006D 
                 ; 0000 006E     pageAdr=flashAddr & ~(PAGESIZE-1);      // Gets Flash page address from byte address
                +
00f8cc 81ee     +LDD R30 , Y + 6
00f8cd 81ff     +LDD R31 , Y + 6 + 1
00f8ce 8568     +LDD R22 , Y + 6 + 2
00f8cf 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00f8d0 70e0      	ANDI R30,LOW(0xFFFFFF00)
                +
00f8d1 83e9     +STD Y + 1 , R30
00f8d2 83fa     +STD Y + 1 + 1 , R31
00f8d3 836b     +STD Y + 1 + 2 , R22
00f8d4 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 006F 
                 ; 0000 0070     #ifdef __FLASH_RECOVER
                 ; 0000 0071     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 0072                                             // not contain data for writing
                 ; 0000 0073     while(EECR & (1<<EEWE));
                 ; 0000 0074     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                 ; 0000 0075     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 0076     FlashBackup.pageNumber = (unsigned int) (pageAdr/PAGESIZE); // Stores page address
                 ; 0000 0077                                                        // data should be written to
                 ; 0000 0078     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 0079                                                // contains unwritten data
                 ; 0000 007A     while(EECR & (1<<EEWE));
                 ; 0000 007B     #endif
                 ; 0000 007C 
                 ; 0000 007D     LpmReplaceSpm(flashAddr, data);         // Fills Flash write buffer
                +
00f8d5 81ee     +LDD R30 , Y + 6
00f8d6 81ff     +LDD R31 , Y + 6 + 1
00f8d7 8568     +LDD R22 , Y + 6 + 2
00f8d8 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00f8d9 940e fae8 	CALL __PUTPARD1
00f8db 85a9      	LDD  R26,Y+9
00f8dc d08c      	RCALL _LpmReplaceSpm
                 ; 0000 007E 
                 ; 0000 007F 
                 ; 0000 0080     WriteBufToFlash(pageAdr);               // Writes to Flash
                +
00f8dd 81a9     +LDD R26 , Y + 1
00f8de 81ba     +LDD R27 , Y + 1 + 1
00f8df 818b     +LDD R24 , Y + 1 + 2
00f8e0 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
00f8e1 d081      	RCALL _WriteBufToFlash
                 ; 0000 0081 
                 ; 0000 0082     #ifdef __FLASH_RECOVER
                 ; 0000 0083     FlashBackup.status = 0;                 // Indicates that Flash recovery buffer
                 ; 0000 0084                                             // does not contain unwritten data
                 ; 0000 0085     while(EECR & (1<<EEWE));
                 ; 0000 0086     #endif
                 ; 0000 0087 
                 ; 0000 0088     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
00f8e2 b3ec      	IN   R30,0x1C
00f8e3 2be1      	OR   R30,R17
00f8e4 bbec      	OUT  0x1C,R30
                 ; 0000 0089     return TRUE;                            // Return TRUE if address
00f8e5 e0e1      	LDI  R30,LOW(1)
00f8e6 8118      	LDD  R17,Y+0
00f8e7 c05b      	RJMP _0x2000003
                 ; 0000 008A                                             // valid for writing
                 ; 0000 008B   }
                 ; 0000 008C   else
                 _0x8:
                 ; 0000 008D     return FALSE;                           // Return FALSE if address not
00f8e8 e0e0      	LDI  R30,LOW(0)
00f8e9 8118      	LDD  R17,Y+0
00f8ea c058      	RJMP _0x2000003
                 ; 0000 008E                                             // valid for writing
                 ; 0000 008F }
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function writes data from array dataPage[] to Flash page address
                 ;* flashStartAdr. The Number of bytes written is depending upon the Flash page
                 ;* size. Returns FALSE if input argument ucFlashStartAdr is not a valid Flash
                 ;* page address for writing, else TRUE.
                 ;**/
                 ;unsigned char WriteFlashPage(MyAddressType flashStartAdr, unsigned char *dataPage)
                 ; 0000 0098 {
                 _WriteFlashPage:
                 ; .FSTART _WriteFlashPage
                 ; 0000 0099   unsigned int index;
                 ; 0000 009A   unsigned char eepromInterruptSettings;
                 ; 0000 009B   if( AddressCheck(flashStartAdr) ){
00f8eb 93ba      	ST   -Y,R27
00f8ec 93aa      	ST   -Y,R26
00f8ed 940e faf8 	CALL __SAVELOCR4
                 ;	flashStartAdr -> Y+6
                 ;	*dataPage -> Y+4
                 ;	index -> R16,R17
                 ;	eepromInterruptSettings -> R19
                +
00f8ef 81ae     +LDD R26 , Y + 6
00f8f0 81bf     +LDD R27 , Y + 6 + 1
00f8f1 8588     +LDD R24 , Y + 6 + 2
00f8f2 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00f8f3 d051      	RCALL _AddressCheck
00f8f4 30e0      	CPI  R30,0
00f8f5 f409      	BRNE PC+2
00f8f6 c049      	RJMP _0xD
                 ; 0000 009C     eepromInterruptSettings = EECR & (1<<EERIE); // Stoes EEPROM interrupt mask
00f8f7 b3ec      	IN   R30,0x1C
00f8f8 70e8      	ANDI R30,LOW(0x8)
00f8f9 2f3e      	MOV  R19,R30
                 ; 0000 009D     EECR &= ~(1<<EERIE);                    // Disable EEPROM interrupt
00f8fa 98e3      	CBI  0x1C,3
                 ; 0000 009E     while(EECR & (1<<EEWE));                // Wait if ongoing EEPROM write
                 _0xE:
00f8fb 99e1      	SBIC 0x1C,1
00f8fc cffe      	RJMP _0xE
                 ; 0000 009F 
                 ; 0000 00A0     #ifdef __FLASH_RECOVER
                 ; 0000 00A1     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00A2                                             // not contain data for writing
                 ; 0000 00A3     while(EECR & (1<<EEWE));
                 ; 0000 00A4 
                 ; 0000 00A5     //_ENABLE_RWW_SECTION();
                 ; 0000 00A6 
                 ; 0000 00A7     _WAIT_FOR_SPM();
                 ; 0000 00A8     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00A9 
                 ; 0000 00AA     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                 ; 0000 00AB       //_WAIT_FOR_SPM();
                 ; 0000 00AC       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00AD       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00AE     }
                 ; 0000 00AF 
                 ; 0000 00B0     WriteBufToFlash(ADR_FLASH_BUFFER);      // Writes to Flash recovery buffer
                 ; 0000 00B1     FlashBackup.pageNumber=(unsigned int)(flashStartAdr/PAGESIZE);
                 ; 0000 00B2     FlashBackup.status = FLASH_BUFFER_FULL_ID; // Indicates that Flash recovery buffer
                 ; 0000 00B3                                            // contains unwritten data
                 ; 0000 00B4     while(EECR & (1<<EEWE));
                 ; 0000 00B5     #endif
                 ; 0000 00B6 
                 ; 0000 00B7     __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
                +
00f8fd e0e0     +LDI R30 , LOW ( 0x0 )
00f8fe e0f0     +LDI R31 , HIGH ( 0x0 )
00f8ff e060     +LDI R22 , BYTE3 ( 0x0 )
00f900 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00f901 940e fae8 	CALL __PUTPARD1
00f903 e0a0      	LDI  R26,LOW(0)
00f904 e0b0      	LDI  R27,0
00f905 940e f9db 	CALL ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0000 00B8     __AddrToZ24ByteToSPMCR_SPM_W((void flash *)0x1EF00);
00f907 940e faab 	CALL SUBOPT_0x0
00f909 940e f9eb 	CALL ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0000 00B9     __AddrToZ24ByteToSPMCR_SPM_E((void flash *)0x1EF00);
00f90b 940e faab 	CALL SUBOPT_0x0
00f90d 940e fa0b 	CALL ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0000 00BA     __AddrToZ24ByteToSPMCR_SPM_EW((void flash *)0x1EF00);
00f90f 940e faab 	CALL SUBOPT_0x0
00f911 940e fa2b 	CALL ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0000 00BB 
                 ; 0000 00BC     _WAIT_FOR_SPM();
                 _0x11:
00f913 91e0 0068 	LDS  R30,104
00f915 70e1      	ANDI R30,LOW(0x1)
00f916 f7e1      	BRNE _0x11
                 ; 0000 00BD     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 00BE     //_ENABLE_RWW_SECTION();
                 ; 0000 00BF 
                 ; 0000 00C0     for(index = 0; index < PAGESIZE; index+=2){ // Fills Flash write buffer
                +
00f917 e000     +LDI R16 , LOW ( 0 )
00f918 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x15:
                +
00f919 3000     +CPI R16 , LOW ( 256 )
00f91a e0e1     +LDI R30 , HIGH ( 256 )
00f91b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f91c f4c8      	BRSH _0x16
                 ; 0000 00C1       //_WAIT_FOR_SPM();
                 ; 0000 00C2       //MY_FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
                 ; 0000 00C3       _FILL_TEMP_WORD(index, (unsigned int)dataPage[index]+((unsigned int)dataPage[index+1] << 8));
00f91d 940e fab0 	CALL SUBOPT_0x1
00f91f 01f8      	MOVW R30,R16
00f920 85a8      	LDD  R26,Y+8
00f921 85b9      	LDD  R27,Y+8+1
00f922 0fae      	ADD  R26,R30
00f923 1fbf      	ADC  R27,R31
00f924 900c      	LD   R0,X
00f925 2411      	CLR  R1
00f926 9631      	ADIW R30,1
00f927 85a8      	LDD  R26,Y+8
00f928 85b9      	LDD  R27,Y+8+1
00f929 0fae      	ADD  R26,R30
00f92a 1fbf      	ADC  R27,R31
00f92b 91ec      	LD   R30,X
00f92c 2ffe      	MOV  R31,R30
00f92d e0e0      	LDI  R30,0
00f92e 01d0      	MOVW R26,R0
00f92f 0fae      	ADD  R26,R30
00f930 1fbf      	ADC  R27,R31
00f931 01f3      	MOVW R30,R6
00f932 9509      	ICALL
                 ; 0000 00C4     }
                +
00f933 5f0e     +SUBI R16 , LOW ( - 2 )
00f934 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00f935 cfe3      	RJMP _0x15
                 _0x16:
                 ; 0000 00C5     //_PAGE_WRITE( flashStartAdr );
                 ; 0000 00C6     WriteBufToFlash(flashStartAdr);         // Writes to Flash
                +
00f936 81ae     +LDD R26 , Y + 6
00f937 81bf     +LDD R27 , Y + 6 + 1
00f938 8588     +LDD R24 , Y + 6 + 2
00f939 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00f93a d028      	RCALL _WriteBufToFlash
                 ; 0000 00C7     #ifdef __FLASH_RECOVER
                 ; 0000 00C8       FlashBackup.status=0;                 // Inicate that Flash buffer does
                 ; 0000 00C9                                             // not contain data for writing
                 ; 0000 00CA       while(EECR & (1<<EEWE));
                 ; 0000 00CB     #endif
                 ; 0000 00CC 
                 ; 0000 00CD     EECR |= eepromInterruptSettings;        // Restore EEPROM interrupt mask
00f93b b3ec      	IN   R30,0x1C
00f93c 2be3      	OR   R30,R19
00f93d bbec      	OUT  0x1C,R30
                 ; 0000 00CE     return TRUE;                            // Return TRUE if address
00f93e e0e1      	LDI  R30,LOW(1)
00f93f c001      	RJMP _0x2000002
                 ; 0000 00CF                                             // valid for writing
                 ; 0000 00D0   }
                 ; 0000 00D1   else
                 _0xD:
                 ; 0000 00D2     return FALSE;                           // Return FALSE if not address not
00f940 e0e0      	LDI  R30,LOW(0)
                 ; 0000 00D3                                             // valid for writing
                 ; 0000 00D4 }
                 _0x2000002:
00f941 940e faff 	CALL __LOADLOCR4
                 _0x2000003:
00f943 962a      	ADIW R28,10
00f944 9508      	RET
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function checks if global variable FlashBackup.status indicates that Flash recovery
                 ;* buffer contains data that needs to be written to Flash. Writes data from
                 ;* Flash recovery buffer to Flash page address given by FLASH_recovery.pageAdr.
                 ;* This function should be called at program startup if FLASH recovery option
                 ;* is enabeled.
                 ;**/
                 ;unsigned char RecoverFlash(){
                 ; 0000 00DD unsigned char RecoverFlash(){
                 ; 0000 00DE #ifdef __FLASH_RECOVER
                 ; 0000 00DF   unsigned int index;
                 ; 0000 00E0   unsigned long flashStartAdr = (MyAddressType)FlashBackup.pageNumber * PAGESIZE;
                 ; 0000 00E1   if(FlashBackup.status == FLASH_BUFFER_FULL_ID){ // Checks if Flash recovery
                 ; 0000 00E2                                                   //  buffer contains data
                 ; 0000 00E3 
                 ; 0000 00E4     for(index=0; index < PAGESIZE; index+=2){     // Writes to Flash write buffer
                 ; 0000 00E5         _WAIT_FOR_SPM();
                 ; 0000 00E6         MY_FILL_TEMP_WORD( index, *((MyFlashIntPointer)(ADR_FLASH_BUFFER+index)) );
                 ; 0000 00E7     }
                 ; 0000 00E8 
                 ; 0000 00E9 
                 ; 0000 00EA     //WriteBufToFlash((MyAddressType)FlashBackup.pageNumber * PAGESIZE);
                 ; 0000 00EB     _WAIT_FOR_SPM();
                 ; 0000 00EC     MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 00ED     _WAIT_FOR_SPM();
                 ; 0000 00EE     MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 00EF     _WAIT_FOR_SPM();
                 ; 0000 00F0     _ENABLE_RWW_SECTION();
                 ; 0000 00F1     FlashBackup.status=0;                   // Inicate that Flash buffer does
                 ; 0000 00F2                                             // not contain data for writing
                 ; 0000 00F3     while(EECR & (1<<EEWE));
                 ; 0000 00F4     return TRUE;                            // Returns TRUE if recovery has
                 ; 0000 00F5                                             // taken place
                 ; 0000 00F6   }
                 ; 0000 00F7 #endif
                 ; 0000 00F8   return FALSE;
                 ; 0000 00F9 }
                 ;
                 ;
                 ;/*!
                 ;* The function checks if input argument is a valid Flash page address for
                 ;* writing. Returns TRUE only if:
                 ;* - Address points to the beginning of a Flash page
                 ;* - Address is within the limits defined in Self_programming.h
                 ;* - Address is not equal to page address used for buffring by the Flash recovery
                 ;*   functions (if enabled).
                 ;* Returns FALSE else.
                 ;**/
                 ;unsigned char AddressCheck(MyAddressType flashAdr){
                 ; 0000 0105 unsigned char AddressCheck(MyAddressType flashAdr){
                 _AddressCheck:
                 ; .FSTART _AddressCheck
                 ; 0000 0106   #ifdef __FLASH_RECOVER
                 ; 0000 0107   // The next line gives a warning 'pointless comparison with zero' if ADR_LIMIT_LOW is 0. Ignore it.
                 ; 0000 0108   if( (flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) &&
                 ; 0000 0109       (flashAdr != ADR_FLASH_BUFFER) && !(flashAdr & (PAGESIZE-1)) )
                 ; 0000 010A     return TRUE;                            // Address is a valid page address
                 ; 0000 010B   else
                 ; 0000 010C     return FALSE;                           // Address is not a valid page address
                 ; 0000 010D   #else
                 ; 0000 010E   if((flashAdr >= ADR_LIMIT_LOW) && (flashAdr <= ADR_LIMIT_HIGH) && !(flashAdr & (PAGESIZE-1) ) )
00f945 940e fab6 	CALL SUBOPT_0x2
                 ;	flashAdr -> Y+0
00f947 940e faf2 	CALL __CPD20
00f949 f070      	BRLO _0x19
00f94a 940e fae3 	CALL __GETD2S0
                +
00f94c 30a0     +CPI R26 , LOW ( 0x1E000 )
00f94d eee0     +LDI R30 , HIGH ( 0x1E000 )
00f94e 07be     +CPC R27 , R30
00f94f e0e1     +LDI R30 , BYTE3 ( 0x1E000 )
00f950 078e     +CPC R24 , R30
00f951 e0e0     +LDI R30 , BYTE4 ( 0x1E000 )
00f952 079e     +CPC R25 , R30
                 	__CPD2N 0x1E000
00f953 f420      	BRSH _0x19
00f954 940e fade 	CALL __GETD1S0
00f956 30e0      	CPI  R30,0
00f957 f009      	BREQ _0x1A
                 _0x19:
00f958 c003      	RJMP _0x18
                 _0x1A:
                 ; 0000 010F     return TRUE;                            // Address is a valid page address
00f959 e0e1      	LDI  R30,LOW(1)
00f95a 940c fa5d 	JMP  _0x2000001
                 ; 0000 0110   else
                 _0x18:
                 ; 0000 0111   {
                 ; 0000 0112     while(1)
                 _0x1C:
                 ; 0000 0113     {
                 ; 0000 0114       PORTC.5=0;
00f95c 98ad      	CBI  0x15,5
                 ; 0000 0115       delay_ms(500);
00f95d 940e fabb 	CALL SUBOPT_0x3
                 ; 0000 0116       PORTC.5=1;
00f95f 9aad      	SBI  0x15,5
                 ; 0000 0117       delay_ms(500);
00f960 940e fabb 	CALL SUBOPT_0x3
                 ; 0000 0118     }
00f962 cff9      	RJMP _0x1C
                 ; 0000 0119     return FALSE;                           // Address is not a valid page address
                 ; 0000 011A   }
                 ; 0000 011B   #endif
                 ; 0000 011C }
                 ; .FEND
                 ;
                 ;
                 ;/*!
                 ;* The function writes Flash temporary buffer to Flash page address given by
                 ;* input argument.
                 ;**/
                 ;
                 ;void WriteBufToFlash(MyAddressType flashStartAdr) {
                 ; 0000 0124 void WriteBufToFlash(MyAddressType flashStartAdr) {
                 _WriteBufToFlash:
                 ; .FSTART _WriteBufToFlash
                 ; 0000 0125     //_WAIT_FOR_SPM();
                 ; 0000 0126     //MY_PAGE_ERASE( flashStartAdr );
                 ; 0000 0127     //_PAGE_ERASE( flashStartAdr );
                 ; 0000 0128     //_WAIT_FOR_SPM();
                 ; 0000 0129     //_ENABLE_RWW_SECTION();
                 ; 0000 012A     //MY_PAGE_WRITE( flashStartAdr );
                 ; 0000 012B     _PAGE_WRITE( flashStartAdr );
00f963 940e fab6 	CALL SUBOPT_0x2
                 ;	flashStartAdr -> Y+0
00f965 01f2      	MOVW R30,R4
00f966 9509      	ICALL
                 ; 0000 012C     //_WAIT_FOR_SPM();
                 ; 0000 012D     //_ENABLE_RWW_SECTION();
                 ; 0000 012E /*
                 ; 0000 012F #pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 0130   #ifdef __HAS_RAMPZ__
                 ; 0000 0131   RAMPZ = (unsigned char)(flashStartAdr >> 16);
                 ; 0000 0132   #endif
                 ; 0000 0133   _PAGE_ERASE(flashStartAdr);
                 ; 0000 0134   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0135   _PAGE_WRITE(flashStartAdr);
                 ; 0000 0136   while( SPMControllRegister & (1<<SPMEN) ); // Wait until Flash write completed
                 ; 0000 0137   #ifdef RWWSRE
                 ; 0000 0138   __DataToR0ByteToSPMCR_SPM( 0, (unsigned char)(1<<RWWSRE)|(1<<SPMEN)); // Enable RWW
                 ; 0000 0139   #endif
                 ; 0000 013A #pragma diag_default=Pe1053 // Back to default.
                 ; 0000 013B */
                 ; 0000 013C }
00f967 940c fa5d 	JMP  _0x2000001
                 ; .FEND
                 ;
                 ;/*!
                 ;* The function reads Flash page given by flashAddr, replaces one byte given by
                 ;* flashAddr with data, and stores entire page in Flash temporary buffer.
                 ;**/
                 ;void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 ; 0000 0142 void LpmReplaceSpm(MyAddressType flashAddr, unsigned char data){
                 _LpmReplaceSpm:
                 ; .FSTART _LpmReplaceSpm
                 ; 0000 0143 //#pragma diag_suppress=Pe1053 // Suppress warning for conversion from long-type address to flash ptr.
                 ; 0000 0144     unsigned int index, oddByte, pcWord;
                 ; 0000 0145 
                 ; 0000 0146     MyAddressType  pageAdr;
                 ; 0000 0147     oddByte=(unsigned char)flashAddr & 1;
00f969 93aa      	ST   -Y,R26
00f96a 9724      	SBIW R28,4
00f96b 940e faf6 	CALL __SAVELOCR6
                 ;	flashAddr -> Y+11
                 ;	data -> Y+10
                 ;	index -> R16,R17
                 ;	oddByte -> R18,R19
                 ;	pcWord -> R20,R21
                 ;	pageAdr -> Y+6
00f96d 85eb      	LDD  R30,Y+11
00f96e 70e1      	ANDI R30,LOW(0x1)
00f96f 2f2e      	MOV  R18,R30
00f970 2733      	CLR  R19
                 ; 0000 0148     pcWord=(unsigned int)flashAddr & (PAGESIZE-2); // Used when writing FLASH temp buffer
00f971 85eb      	LDD  R30,Y+11
00f972 85fc      	LDD  R31,Y+11+1
00f973 7fee      	ANDI R30,LOW(0xFE)
00f974 70f0      	ANDI R31,HIGH(0xFE)
00f975 01af      	MOVW R20,R30
                 ; 0000 0149     pageAdr=flashAddr & ~(PAGESIZE-1);        // Get FLASH page address from byte address
                +
00f976 85eb     +LDD R30 , Y + 11
00f977 85fc     +LDD R31 , Y + 11 + 1
00f978 856d     +LDD R22 , Y + 11 + 2
00f979 857e     +LDD R23 , Y + 11 + 3
                 	__GETD1S 11
00f97a 70e0      	ANDI R30,LOW(0xFFFFFF00)
                +
00f97b 83ee     +STD Y + 6 , R30
00f97c 83ff     +STD Y + 6 + 1 , R31
00f97d 8768     +STD Y + 6 + 2 , R22
00f97e 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 014A     //while( SPMCR_REG & (1<<SPMEN) );
                 ; 0000 014B     //_ENABLE_RWW_SECTION();
                 ; 0000 014C 
                 ; 0000 014D     for(index=0; index < PAGESIZE; index+=2){
                +
00f97f e000     +LDI R16 , LOW ( 0 )
00f980 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x24:
                +
00f981 3000     +CPI R16 , LOW ( 256 )
00f982 e0e1     +LDI R30 , HIGH ( 256 )
00f983 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00f984 f5e0      	BRSH _0x25
                 ; 0000 014E         if(index==pcWord){
                +
00f985 1740     +CP R20 , R16
00f986 0751     +CPC R21 , R17
                 	__CPWRR 20,21,16,17
00f987 f539      	BRNE _0x26
                 ; 0000 014F           if(oddByte){
00f988 2e02      	MOV  R0,R18
00f989 2a03      	OR   R0,R19
00f98a f069      	BREQ _0x27
                 ; 0000 0150             //MY_FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
                 ; 0000 0151             _FILL_TEMP_WORD( index, (*(MyFlashCharPointer)(flashAddr & ~1) | ((unsigned int)data<<8)) );
00f98b 940e fab0 	CALL SUBOPT_0x1
                +
00f98d 85ef     +LDD R30 , Y + 15
00f98e 89f8     +LDD R31 , Y + 15 + 1
00f98f 8969     +LDD R22 , Y + 15 + 2
00f990 897a     +LDD R23 , Y + 15 + 3
                 	__GETD1S 15
00f991 7fee      	ANDI R30,LOW(0xFFFFFFFE)
                +
00f992 bf6b     +OUT RAMPZ , R22
00f993 91a6     +ELPM R26 , Z
                 	__GETBRPF 26
00f994 e0b0      	LDI  R27,0
00f995 e0e0      	LDI  R30,0
00f996 85fe      	LDD  R31,Y+14
00f997 c011      	RJMP _0x2A
                 ; 0000 0152           }                                     // Write odd byte in temporary buffer
                 ; 0000 0153           else{
                 _0x27:
                 ; 0000 0154             //MY_FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
                 ; 0000 0155             _FILL_TEMP_WORD( index, ( (*( (MyFlashCharPointer)flashAddr+1)<<8)  | data ) );
00f998 940e fab0 	CALL SUBOPT_0x1
                +
00f99a 85ef     +LDD R30 , Y + 15
00f99b 89f8     +LDD R31 , Y + 15 + 1
00f99c 8969     +LDD R22 , Y + 15 + 2
00f99d 897a     +LDD R23 , Y + 15 + 3
                 	__GETD1S 15
                +
00f99e 5fef     +SUBI R30 , LOW ( - 1 )
00f99f 4fff     +SBCI R31 , HIGH ( - 1 )
00f9a0 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00f9a1 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
                +
00f9a2 bf6b     +OUT RAMPZ , R22
00f9a3 91e6     +ELPM R30 , Z
                 	__GETBRPF 30
00f9a4 2ffe      	MOV  R31,R30
00f9a5 e0e0      	LDI  R30,0
00f9a6 01df      	MOVW R26,R30
00f9a7 85ee      	LDD  R30,Y+14
00f9a8 e0f0      	LDI  R31,0
                 _0x2A:
00f9a9 2bea      	OR   R30,R26
00f9aa 2bfb      	OR   R31,R27
00f9ab 01df      	MOVW R26,R30
00f9ac 01f3      	MOVW R30,R6
00f9ad 9509      	ICALL
                 ; 0000 0156           }                                     // Write even byte in temporary buffer
                 ; 0000 0157         }
                 ; 0000 0158         else{
00f9ae c00f      	RJMP _0x29
                 _0x26:
                 ; 0000 0159           //MY_FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
                 ; 0000 015A           _FILL_TEMP_WORD(index, *( (MyFlashIntPointer)(pageAdr+index) ) );
00f9af 940e fab0 	CALL SUBOPT_0x1
00f9b1 01f8      	MOVW R30,R16
                +
00f9b2 85aa     +LDD R26 , Y + 10
00f9b3 85bb     +LDD R27 , Y + 10 + 1
00f9b4 858c     +LDD R24 , Y + 10 + 2
00f9b5 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
00f9b6 2766      	CLR  R22
00f9b7 2777      	CLR  R23
00f9b8 940e fad0 	CALL __ADDD12
00f9ba 940e fada 	CALL __GETW2PF
00f9bc 01f3      	MOVW R30,R6
00f9bd 9509      	ICALL
                 ; 0000 015B         }                                       // Write Flash word directly to temporary buffer
                 _0x29:
                 ; 0000 015C     }
                +
00f9be 5f0e     +SUBI R16 , LOW ( - 2 )
00f9bf 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00f9c0 cfc0      	RJMP _0x24
                 _0x25:
                 ; 0000 015D //#pragma diag_default=Pe1053 // Back to default.
                 ; 0000 015E }
00f9c1 940e fafd 	CALL __LOADLOCR6
00f9c3 962f      	ADIW R28,15
00f9c4 9508      	RET
                 ; .FEND
                 ;/*****************************************************************************
                 ;*
                 ;* (C) 2010, HP InfoTech srl, www.hpinfotech.com
                 ;*
                 ;* File              : flash.c
                 ;* Compiler          : CodeVisionAVR V2.xx
                 ;* Revision          : $Revision: 1.0 $
                 ;* Date              : $Date: December 9, 2010 $
                 ;* Updated by        : $Author: HP InfoTech $
                 ;*
                 ;* Target platform   : All AVRs with bootloader support
                 ;*
                 ;* AppNote           : AVR109 - Self-programming
                 ;*
                 ;* Description       : Flash operations for AVR109 Self-programming
                 ;****************************************************************************/
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;
                 ;//#define	SPMCR_REG	SPMCSR
                 ;
                 ;void dospmew(void)
                 ; 0001 0018 {
                 
                 	.CSEG
                 ; 0001 0019     #asm
                 ; 0001 001A          ldi   r22,$03
                 ; 0001 001B          WR_SPMCR_REG_R22
                 ; 0001 001C          spm
                 ; 0001 001D     #endasm
                 ; 0001 001E     _WAIT_FOR_SPM();
                 ; 0001 001F     #asm
                 ; 0001 0020         ldi   r22,$05
                 ; 0001 0021         WR_SPMCR_REG_R22
                 ; 0001 0022         spm
                 ; 0001 0023     #endasm
                 ; 0001 0024     _WAIT_FOR_SPM();
                 ; 0001 0025     while( SPMCR_REG & (1<<RWWSB) )
                 ; 0001 0026     {
                 ; 0001 0027     #asm
                 ; 0001 0028         ldi   r22,$11
                 ; 0001 0029         WR_SPMCR_REG_R22
                 ; 0001 002A         spm
                 ; 0001 002B     #endasm
                 ; 0001 002C         _WAIT_FOR_SPM();
                 ; 0001 002D     }
                 ; 0001 002E }
                 ;
                 ;void dospmw(void)
                 ; 0001 0031 {
                 ; 0001 0032     #asm
                 ; 0001 0033         ldi   r22,$05
                 ; 0001 0034         WR_SPMCR_REG_R22
                 ; 0001 0035         spm
                 ; 0001 0036     #endasm
                 ; 0001 0037     _WAIT_FOR_SPM();
                 ; 0001 0038     while( SPMCR_REG & (1<<RWWSB) )
                 ; 0001 0039     {
                 ; 0001 003A     #asm
                 ; 0001 003B         ldi   r22,$11
                 ; 0001 003C         WR_SPMCR_REG_R22
                 ; 0001 003D         spm
                 ; 0001 003E     #endasm
                 ; 0001 003F         _WAIT_FOR_SPM();
                 ; 0001 0040     }
                 ; 0001 0041 }
                 ;
                 ;void dospme(void)
                 ; 0001 0044 {
                 ; 0001 0045     #asm
                 ; 0001 0046         ldi   r22,$03
                 ; 0001 0047         WR_SPMCR_REG_R22
                 ; 0001 0048         spm
                 ; 0001 0049     #endasm
                 ; 0001 004A     _WAIT_FOR_SPM();
                 ; 0001 004B     while( SPMCR_REG & (1<<RWWSB) )
                 ; 0001 004C     {
                 ; 0001 004D     #asm
                 ; 0001 004E         ldi   r22,$11
                 ; 0001 004F         WR_SPMCR_REG_R22
                 ; 0001 0050         spm
                 ; 0001 0051     #endasm
                 ; 0001 0052         _WAIT_FOR_SPM();
                 ; 0001 0053     }
                 ; 0001 0054 }
                 ;
                 ;void dospm(void)
                 ; 0001 0057 {
                 _dospm:
                 ; .FSTART _dospm
                 ; 0001 0058     #asm
                 ; 0001 0059          ldi   r22,$01
00f9c5 e061               ldi   r22,$01
                 ; 0001 005A          WR_SPMCR_REG_R22
00f9c6 9360 0068          WR_SPMCR_REG_R22
                 ; 0001 005B          spm
00f9c8 95e8               spm
                 ; 0001 005C     #endasm
                 ; 0001 005D     _WAIT_FOR_SPM();
                 _0x20021:
00f9c9 91e0 0068 	LDS  R30,104
00f9cb 70e1      	ANDI R30,LOW(0x1)
00f9cc f7e1      	BRNE _0x20021
                 ; 0001 005E     while( SPMCR_REG & (1<<RWWSB) )
                 _0x20024:
00f9cd 91e0 0068 	LDS  R30,104
00f9cf 74e0      	ANDI R30,LOW(0x40)
00f9d0 f049      	BREQ _0x20026
                 ; 0001 005F     {
                 ; 0001 0060     #asm
                 ; 0001 0061         ldi   r22,$11
00f9d1 e161              ldi   r22,$11
                 ; 0001 0062         WR_SPMCR_REG_R22
00f9d2 9360 0068         WR_SPMCR_REG_R22
                 ; 0001 0063         spm
00f9d4 95e8              spm
                 ; 0001 0064     #endasm
                 ; 0001 0065         _WAIT_FOR_SPM();
                 _0x20027:
00f9d5 91e0 0068 	LDS  R30,104
00f9d7 70e1      	ANDI R30,LOW(0x1)
00f9d8 f7e1      	BRNE _0x20027
                 ; 0001 0066     }
00f9d9 cff3      	RJMP _0x20024
                 _0x20026:
                 ; 0001 0067 }
00f9da 9508      	RET
                 ; .FEND
                 ;
                 ;#pragma warn-
                 ;
                 ;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
                 ; 0001 006C {
                 ; 0001 006D #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 006E      ldd  r30,y+1
                 ; 0001 006F      ldd  r31,y+2
                 ; 0001 0070      ld   r22,y
                 ; 0001 0071      WR_SPMCR_REG_R22
                 ; 0001 0072      lpm
                 ; 0001 0073      mov  r30,r0
                 ; 0001 0074 #endasm
                 ; 0001 0075 }
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0001 0078 {
                 ; 0001 0079 #asm
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 007A      ldd  r0,y+1
                 ; 0001 007B      ld   r22,y
                 ; 0001 007C      WR_SPMCR_REG_R22
                 ; 0001 007D      spm
                 ; 0001 007E #endasm
                 ; 0001 007F }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 0082 {
                 ; 0001 0083     #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0084          ldd  r30,y+3
                 ; 0001 0085          ldd  r31,y+4
                 ; 0001 0086          ldd  r0,y+1
                 ; 0001 0087          ldd  r1,y+2
                 ; 0001 0088          ld   r22,y
                 ; 0001 0089          WR_SPMCR_REG_R22
                 ; 0001 008A          spm
                 ; 0001 008B     #endasm
                 ; 0001 008C }
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 008F {
                 ; 0001 0090 _WAIT_FOR_SPM();
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 ; 0001 0091     #asm
                 ; 0001 0092          ldd  r30,y+2
                 ; 0001 0093          ldd  r31,y+3
                 ; 0001 0094          ldd  r0,y+0
                 ; 0001 0095          ldd  r1,y+1
                 ; 0001 0096          //ldi   r22,LOW(1)
                 ; 0001 0097          //WR_SPMCR_REG_R22
                 ; 0001 0098          //spm
                 ; 0001 0099     #endasm
                 ; 0001 009A dospm();
                 ; 0001 009B }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 009E {
                 ; 0001 009F #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00A0      ldd  r30,y+1
                 ; 0001 00A1      ldd  r31,y+2
                 ; 0001 00A2      ld   r22,y
                 ; 0001 00A3      WR_SPMCR_REG_R22
                 ; 0001 00A4      spm
                 ; 0001 00A5 #endasm
                 ; 0001 00A6 }
                 ;
                 ;void __AddrToZByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00A9 {
                 ; 0001 00AA _WAIT_FOR_SPM();
                 ;	*addr -> Y+0
                 ; 0001 00AB #asm
                 ; 0001 00AC      ldd  r30,y+0
                 ; 0001 00AD      ldd  r31,y+1
                 ; 0001 00AE      //ld   r22,y
                 ; 0001 00AF      //WR_SPMCR_REG_R22
                 ; 0001 00B0      //spm
                 ; 0001 00B1 #endasm
                 ; 0001 00B2 dospmew();
                 ; 0001 00B3 }
                 ;
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 00B7 {
                 ; 0001 00B8 #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00B9      ldd  r30,y+3
                 ; 0001 00BA      ldd  r31,y+4
                 ; 0001 00BB      ldd  r22,y+5
                 ; 0001 00BC      out  rampz,r22
                 ; 0001 00BD      ldd  r0,y+1
                 ; 0001 00BE      ldd  r1,y+2
                 ; 0001 00BF      ld   r22,y
                 ; 0001 00C0      WR_SPMCR_REG_R22
                 ; 0001 00C1      spm
                 ; 0001 00C2 #endasm
                 ; 0001 00C3 }
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
                 ; 0001 00C6 {
                 ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F:
                 ; .FSTART ___AddrToZ24WordToR1R0ByteToSPMCR_SPM_F
                 ; 0001 00C7 _WAIT_FOR_SPM();
00f9db 93ba      	ST   -Y,R27
00f9dc 93aa      	ST   -Y,R26
                 ;	*addr -> Y+2
                 ;	data -> Y+0
                 _0x20030:
00f9dd 91e0 0068 	LDS  R30,104
00f9df 70e1      	ANDI R30,LOW(0x1)
00f9e0 f7e1      	BRNE _0x20030
                 ; 0001 00C8 #asm
                 ; 0001 00C9      ldd  r30,y+2
00f9e1 81ea           ldd  r30,y+2
                 ; 0001 00CA      ldd  r31,y+3
00f9e2 81fb           ldd  r31,y+3
                 ; 0001 00CB      ldd  r22,y+4
00f9e3 816c           ldd  r22,y+4
                 ; 0001 00CC      out  rampz,r22
00f9e4 bf6b           out  rampz,r22
                 ; 0001 00CD      ldd  r0,y+0
00f9e5 8008           ldd  r0,y+0
                 ; 0001 00CE      ldd  r1,y+1
00f9e6 8019           ldd  r1,y+1
                 ; 0001 00CF      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00D0      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00D1      //spm
                      //spm
                 ; 0001 00D2 #endasm
                 ; 0001 00D3 dospm();
00f9e7 940e f9c5 	CALL _dospm
                 ; 0001 00D4 }
00f9e9 9626      	ADIW R28,6
00f9ea 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 00D7 {
                 ; 0001 00D8 #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 00D9      ldd  r30,y+1
                 ; 0001 00DA      ldd  r31,y+2
                 ; 0001 00DB      ldd  r22,y+3
                 ; 0001 00DC      out  rampz,r22
                 ; 0001 00DD      ld   r22,y
                 ; 0001 00DE      WR_SPMCR_REG_R22
                 ; 0001 00DF      spm
                 ; 0001 00E0 #endasm
                 ; 0001 00E1 }
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_W(void flash *addr)
                 ; 0001 00E4 {
                 ___AddrToZ24ByteToSPMCR_SPM_W:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_W
                 ; 0001 00E5 _WAIT_FOR_SPM();
00f9eb 940e faed 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x20033:
00f9ed 91e0 0068 	LDS  R30,104
00f9ef 70e1      	ANDI R30,LOW(0x1)
00f9f0 f7e1      	BRNE _0x20033
                 ; 0001 00E6 #asm
                 ; 0001 00E7      ldd  r30,y+0
00f9f1 81e8           ldd  r30,y+0
                 ; 0001 00E8      ldd  r31,y+1
00f9f2 81f9           ldd  r31,y+1
                 ; 0001 00E9      ldd  r22,y+2
00f9f3 816a           ldd  r22,y+2
                 ; 0001 00EA      out  rampz,r22
00f9f4 bf6b           out  rampz,r22
                 ; 0001 00EB      //ld   r22,y
                      //ld   r22,y
                 ; 0001 00EC      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 00ED      //spm
                      //spm
                 ; 0001 00EE #endasm
                 ; 0001 00EF #asm
                 ; 0001 00F0      ldi   r22,$05
00f9f5 e065           ldi   r22,$05
                 ; 0001 00F1      WR_SPMCR_REG_R22
00f9f6 9360 0068      WR_SPMCR_REG_R22
                 ; 0001 00F2      spm
00f9f8 95e8           spm
                 ; 0001 00F3 #endasm
                 ; 0001 00F4 _WAIT_FOR_SPM();
                 _0x20036:
00f9f9 91e0 0068 	LDS  R30,104
00f9fb 70e1      	ANDI R30,LOW(0x1)
00f9fc f7e1      	BRNE _0x20036
                 ; 0001 00F5 do
                 _0x2003A:
                 ; 0001 00F6 {
                 ; 0001 00F7 #asm
                 ; 0001 00F8     ldi   r22,$11
00f9fd e161          ldi   r22,$11
                 ; 0001 00F9     WR_SPMCR_REG_R22
00f9fe 9360 0068     WR_SPMCR_REG_R22
                 ; 0001 00FA     spm
00fa00 95e8          spm
                 ; 0001 00FB #endasm
                 ; 0001 00FC     _WAIT_FOR_SPM();
                 _0x2003C:
00fa01 91e0 0068 	LDS  R30,104
00fa03 70e1      	ANDI R30,LOW(0x1)
00fa04 f7e1      	BRNE _0x2003C
                 ; 0001 00FD }
                 ; 0001 00FE while( SPMCR_REG & (1<<RWWSB) );
00fa05 91e0 0068 	LDS  R30,104
00fa07 74e0      	ANDI R30,LOW(0x40)
00fa08 f7a1      	BRNE _0x2003A
                 ; 0001 00FF //dospmw();
                 ; 0001 0100 }
00fa09 940c fa5d 	JMP  _0x2000001
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_E(void flash *addr)
                 ; 0001 0103 {
                 ___AddrToZ24ByteToSPMCR_SPM_E:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_E
                 ; 0001 0104 _WAIT_FOR_SPM();
00fa0b 940e faed 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x2003F:
00fa0d 91e0 0068 	LDS  R30,104
00fa0f 70e1      	ANDI R30,LOW(0x1)
00fa10 f7e1      	BRNE _0x2003F
                 ; 0001 0105 #asm
                 ; 0001 0106      ldd  r30,y+0
00fa11 81e8           ldd  r30,y+0
                 ; 0001 0107      ldd  r31,y+1
00fa12 81f9           ldd  r31,y+1
                 ; 0001 0108      ldd  r22,y+2
00fa13 816a           ldd  r22,y+2
                 ; 0001 0109      out  rampz,r22
00fa14 bf6b           out  rampz,r22
                 ; 0001 010A      //ld   r22,y
                      //ld   r22,y
                 ; 0001 010B      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 010C      //spm
                      //spm
                 ; 0001 010D #endasm
                 ; 0001 010E #asm
                 ; 0001 010F      ldi   r22,$03
00fa15 e063           ldi   r22,$03
                 ; 0001 0110      WR_SPMCR_REG_R22
00fa16 9360 0068      WR_SPMCR_REG_R22
                 ; 0001 0111      spm
00fa18 95e8           spm
                 ; 0001 0112 #endasm
                 ; 0001 0113 _WAIT_FOR_SPM();
                 _0x20042:
00fa19 91e0 0068 	LDS  R30,104
00fa1b 70e1      	ANDI R30,LOW(0x1)
00fa1c f7e1      	BRNE _0x20042
                 ; 0001 0114 do
                 _0x20046:
                 ; 0001 0115 {
                 ; 0001 0116 #asm
                 ; 0001 0117     ldi   r22,$11
00fa1d e161          ldi   r22,$11
                 ; 0001 0118     WR_SPMCR_REG_R22
00fa1e 9360 0068     WR_SPMCR_REG_R22
                 ; 0001 0119     spm
00fa20 95e8          spm
                 ; 0001 011A #endasm
                 ; 0001 011B     _WAIT_FOR_SPM();
                 _0x20048:
00fa21 91e0 0068 	LDS  R30,104
00fa23 70e1      	ANDI R30,LOW(0x1)
00fa24 f7e1      	BRNE _0x20048
                 ; 0001 011C }
                 ; 0001 011D while( SPMCR_REG & (1<<RWWSB) );
00fa25 91e0 0068 	LDS  R30,104
00fa27 74e0      	ANDI R30,LOW(0x40)
00fa28 f7a1      	BRNE _0x20046
                 ; 0001 011E //dospme();
                 ; 0001 011F }
00fa29 940c fa5d 	JMP  _0x2000001
                 ; .FEND
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM_EW(void flash *addr)
                 ; 0001 0122 {
                 ___AddrToZ24ByteToSPMCR_SPM_EW:
                 ; .FSTART ___AddrToZ24ByteToSPMCR_SPM_EW
                 ; 0001 0123 _WAIT_FOR_SPM();
00fa2b 940e faed 	CALL __PUTPARD2
                 ;	*addr -> Y+0
                 _0x2004B:
00fa2d 91e0 0068 	LDS  R30,104
00fa2f 70e1      	ANDI R30,LOW(0x1)
00fa30 f7e1      	BRNE _0x2004B
                 ; 0001 0124 #asm
                 ; 0001 0125      ldd  r30,y+0
00fa31 81e8           ldd  r30,y+0
                 ; 0001 0126      ldd  r31,y+1
00fa32 81f9           ldd  r31,y+1
                 ; 0001 0127      ldd  r22,y+2
00fa33 816a           ldd  r22,y+2
                 ; 0001 0128      out  rampz,r22
00fa34 bf6b           out  rampz,r22
                 ; 0001 0129      //ld   r22,y
                      //ld   r22,y
                 ; 0001 012A      //WR_SPMCR_REG_R22
                      //WR_SPMCR_REG_R22
                 ; 0001 012B      //spm
                      //spm
                 ; 0001 012C #endasm
                 ; 0001 012D #asm
                 ; 0001 012E      ldi   r22,$03
00fa35 e063           ldi   r22,$03
                 ; 0001 012F      WR_SPMCR_REG_R22
00fa36 9360 0068      WR_SPMCR_REG_R22
                 ; 0001 0130      spm
00fa38 95e8           spm
                 ; 0001 0131 #endasm
                 ; 0001 0132 _WAIT_FOR_SPM();
                 _0x2004E:
00fa39 91e0 0068 	LDS  R30,104
00fa3b 70e1      	ANDI R30,LOW(0x1)
00fa3c f7e1      	BRNE _0x2004E
                 ; 0001 0133 do
                 _0x20052:
                 ; 0001 0134 {
                 ; 0001 0135 #asm
                 ; 0001 0136     ldi   r22,$11
00fa3d e161          ldi   r22,$11
                 ; 0001 0137     WR_SPMCR_REG_R22
00fa3e 9360 0068     WR_SPMCR_REG_R22
                 ; 0001 0138     spm
00fa40 95e8          spm
                 ; 0001 0139 #endasm
                 ; 0001 013A     _WAIT_FOR_SPM();
                 _0x20054:
00fa41 91e0 0068 	LDS  R30,104
00fa43 70e1      	ANDI R30,LOW(0x1)
00fa44 f7e1      	BRNE _0x20054
                 ; 0001 013B }
                 ; 0001 013C while( SPMCR_REG & (1<<RWWSB) );
00fa45 91e0 0068 	LDS  R30,104
00fa47 74e0      	ANDI R30,LOW(0x40)
00fa48 f7a1      	BRNE _0x20052
                 ; 0001 013D #asm
                 ; 0001 013E     ldi   r22,$05
00fa49 e065          ldi   r22,$05
                 ; 0001 013F     WR_SPMCR_REG_R22
00fa4a 9360 0068     WR_SPMCR_REG_R22
                 ; 0001 0140     spm
00fa4c 95e8          spm
                 ; 0001 0141 #endasm
                 ; 0001 0142 _WAIT_FOR_SPM();
                 _0x20057:
00fa4d 91e0 0068 	LDS  R30,104
00fa4f 70e1      	ANDI R30,LOW(0x1)
00fa50 f7e1      	BRNE _0x20057
                 ; 0001 0143 do
                 _0x2005B:
                 ; 0001 0144 {
                 ; 0001 0145 #asm
                 ; 0001 0146     ldi   r22,$11
00fa51 e161          ldi   r22,$11
                 ; 0001 0147     WR_SPMCR_REG_R22
00fa52 9360 0068     WR_SPMCR_REG_R22
                 ; 0001 0148     spm
00fa54 95e8          spm
                 ; 0001 0149 #endasm
                 ; 0001 014A     _WAIT_FOR_SPM();
                 _0x2005D:
00fa55 91e0 0068 	LDS  R30,104
00fa57 70e1      	ANDI R30,LOW(0x1)
00fa58 f7e1      	BRNE _0x2005D
                 ; 0001 014B }
                 ; 0001 014C while( SPMCR_REG & (1<<RWWSB) );
00fa59 91e0 0068 	LDS  R30,104
00fa5b 74e0      	ANDI R30,LOW(0x40)
00fa5c f7a1      	BRNE _0x2005B
                 ; 0001 014D //dospmew();
                 ; 0001 014E }
                 _0x2000001:
00fa5d 9624      	ADIW R28,4
00fa5e 9508      	RET
                 ; .FEND
                 ;
                 ;#ifdef _WARNINGS_ON_
                 ;#pragma warn+
                 ;#endif
                 ;
                 ;// This file has been prepared for Doxygen automatic documentation generation.
                 ;/*! \file ********************************************************************
                 ;*
                 ;* Atmel Corporation
                 ;*
                 ;* - File              : Self_programming_main.c
                 ;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
                 ;*
                 ;* - Support mail      : avr@atmel.com
                 ;*
                 ;* - Supported devices : This example is written for ATmega128.
                 ;*
                 ;* - AppNote           : AVR106 - C functions for reading and writing
                 ;*                       to flash memory.
                 ;*
                 ;* - Description       : The file contains an example program using the Flash R/W
                 ;*                       functions provided with the files Self_programming.h /
                 ;*                       Self_programming.c . The program should be compiled using
                 ;*                       a linker file (*.xcl) that is configured to place the
                 ;*                       entire program code into the Boot section of the Flash memory.
                 ;*                       Please refer to the application note document for more
                 ;*                       information.
                 ;*
                 ;* $Revision: 2.0 $
                 ;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
                 ;*
                 ;*****************************************************************************/
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "flash.h"
                      #define WR_SPMCR_REG_R22 sts 0x68,r22
                 ;
                 ;#include "Self_programming.h"
                 ;void testWrite();
                 ;
                 ;
                 ;void main( void ){
                 ; 0002 0024 void main( void ){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0002 0025 
                 ; 0002 0026   //static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
                 ; 0002 0027   //#asm("cli")
                 ; 0002 0028   if(PORTA==0x55)
00fa5f b3eb      	IN   R30,0x1B
00fa60 35e5      	CPI  R30,LOW(0x55)
00fa61 f409      	BRNE _0x40003
                 ; 0002 0029     testWrite();                                          // Returns TRUE
00fa62 d001      	RCALL _testWrite
                 ; 0002 002A   //__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
                 ; 0002 002B   //__AddrToZ24ByteToSPMCR_SPM_W((void flash *)0);
                 ; 0002 002C   /*
                 ; 0002 002D   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
                 ; 0002 002E   unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
                 ; 0002 002F                                             // code stack
                 ; 0002 0030   int index;
                 ; 0002 0031 
                 ; 0002 0032   DDRC=0xFF;
                 ; 0002 0033   PORTC=0xFF;
                 ; 0002 0034   //DDRC=0x00;
                 ; 0002 0035   //PORTC=0x00;
                 ; 0002 0036   //MCUCR |= (1<<IVSEL);
                 ; 0002 0037                         // Move interrupt vectors to boot
                 ; 0002 0038   //RecoverFlash();
                 ; 0002 0039 
                 ; 0002 003A   dospm();
                 ; 0002 003B 
                 ; 0002 003C   for(index=0; index<PAGESIZE; index++){
                 ; 0002 003D     testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
                 ; 0002 003E   }
                 ; 0002 003F   PORTC.4=0;
                 ; 0002 0040   //for(;;){
                 ; 0002 0041   if(  WriteFlashPage(0x1000, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
                 ; 0002 0042     PORTC.5=0;                                          // Function returns TRUE
                 ; 0002 0043   if(  ReadFlashPage(0x1000, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
                 ; 0002 0044     PORTC.6=0;                                          // Function returns TRUE
                 ; 0002 0045   if(  WriteFlashByte(0x1004, 0x38))//;            // Writes 0x38 to byte address 0x204
                 ; 0002 0046     PORTC.5=0;                                          // Same as byte 4 on page 2
                 ; 0002 0047   */
                 ; 0002 0048 
                 ; 0002 0049   //}
                 ; 0002 004A }
                 _0x40003:
                 _0x40004:
00fa63 cfff      	RJMP _0x40004
                 ; .FEND
                 ;
                 ;
                 ;void testWrite()
                 ; 0002 004E {
                 _testWrite:
                 ; .FSTART _testWrite
                 ; 0002 004F   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
                 ; 0002 0050   unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
                 ; 0002 0051                                             // code stack
                 ; 0002 0052 
                 ; 0002 0053 
                 ; 0002 0054   static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
                 ; 0002 0055   int index;
                 ; 0002 0056 
                 ; 0002 0057   //DDRC=0xFF;
                 ; 0002 0058   //PORTC=0xFF;
                 ; 0002 0059   //DDRC=0x00;
                 ; 0002 005A   //PORTC=0x00;
                 ; 0002 005B   //MCUCR |= (1<<IVSEL);
                 ; 0002 005C                         // Move interrupt vectors to boot
                 ; 0002 005D   //RecoverFlash();
                 ; 0002 005E 
                 ; 0002 005F   //dospm();
                 ; 0002 0060 
                 ; 0002 0061   for(index=0; index<PAGESIZE; index++){
00fa64 50d2      	SUBI R29,2
00fa65 931a      	ST   -Y,R17
00fa66 930a      	ST   -Y,R16
                 ;	testBuffer1 -> Y+258
                 ;	testBuffer2 -> Y+2
                 ;	index -> R16,R17
                +
00fa67 e000     +LDI R16 , LOW ( 0 )
00fa68 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x40006:
                +
00fa69 3000     +CPI R16 , LOW ( 256 )
00fa6a e0e1     +LDI R30 , HIGH ( 256 )
00fa6b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
00fa6c f454      	BRGE _0x40007
                 ; 0002 0062     testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
00fa6d 01f8      	MOVW R30,R16
00fa6e 01de      	MOVW R26,R28
00fa6f 5fae      	SUBI R26,LOW(-(258))
00fa70 4fbe      	SBCI R27,HIGH(-(258))
00fa71 0fea      	ADD  R30,R26
00fa72 1ffb      	ADC  R31,R27
00fa73 8300      	ST   Z,R16
                 ; 0002 0063   }
                +
00fa74 5f0f     +SUBI R16 , LOW ( - 1 )
00fa75 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00fa76 cff2      	RJMP _0x40006
                 _0x40007:
                 ; 0002 0064   PORTC.4=0;
00fa77 98ac      	CBI  0x15,4
                 ; 0002 0065   //for(;;){
                 ; 0002 0066   if(  WriteFlashPage(0x1EF00, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
00fa78 d046      	RCALL SUBOPT_0x4
00fa79 01de      	MOVW R26,R28
00fa7a 5faa      	SUBI R26,LOW(-(262))
00fa7b 4fbe      	SBCI R27,HIGH(-(262))
00fa7c 940e f8eb 	CALL _WriteFlashPage
00fa7e 30e0      	CPI  R30,0
00fa7f f009      	BREQ _0x4000A
                 ; 0002 0067     PORTC.5=0;                                          // Function returns TRUE
00fa80 98ad      	CBI  0x15,5
                 ; 0002 0068   if(  ReadFlashPage(0x1EF00, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
                 _0x4000A:
00fa81 d03d      	RCALL SUBOPT_0x4
00fa82 01de      	MOVW R26,R28
00fa83 9616      	ADIW R26,6
00fa84 940e f88b 	CALL _ReadFlashPage
00fa86 30e0      	CPI  R30,0
00fa87 f009      	BREQ _0x4000D
                 ; 0002 0069     PORTC.6=0;                                          // Function returns TRUE
00fa88 98ae      	CBI  0x15,6
                 ; 0002 006A   if(  WriteFlashByte(0x1EF04, 0x38))//;            // Writes 0x38 to byte address 0x204
                 _0x4000D:
                +
00fa89 e0e4     +LDI R30 , LOW ( 0x1EF04 )
00fa8a eeff     +LDI R31 , HIGH ( 0x1EF04 )
00fa8b e061     +LDI R22 , BYTE3 ( 0x1EF04 )
00fa8c e070     +LDI R23 , BYTE4 ( 0x1EF04 )
                 	__GETD1N 0x1EF04
00fa8d 940e fae8 	CALL __PUTPARD1
00fa8f e3a8      	LDI  R26,LOW(56)
00fa90 940e f8b9 	CALL _WriteFlashByte
00fa92 30e0      	CPI  R30,0
00fa93 f009      	BREQ _0x40010
                 ; 0002 006B     PORTC.5=1;                                          // Same as byte 4 on page 2
00fa94 9aad      	SBI  0x15,5
                 ; 0002 006C   testChar = ReadFlashByte(0x1EF04);        // Reads back value from address 0x204
                 _0x40010:
                +
00fa95 e0a4     +LDI R26 , LOW ( 0x1EF04 )
00fa96 eebf     +LDI R27 , HIGH ( 0x1EF04 )
00fa97 e081     +LDI R24 , BYTE3 ( 0x1EF04 )
00fa98 e090     +LDI R25 , BYTE4 ( 0x1EF04 )
                 	__GETD2N 0x1EF04
00fa99 940e f883 	CALL _ReadFlashByte
00fa9b 93e0 0500 	STS  _testChar_S0020001000,R30
                 ; 0002 006D 
                 ; 0002 006E   if(testChar==0x38)
00fa9d 91a0 0500 	LDS  R26,_testChar_S0020001000
00fa9f 33a8      	CPI  R26,LOW(0x38)
00faa0 f429      	BRNE _0x40013
                 ; 0002 006F   {
                 ; 0002 0070     while(1)
                 _0x40014:
                 ; 0002 0071     {
                 ; 0002 0072       PORTC.6=0;
00faa1 98ae      	CBI  0x15,6
                 ; 0002 0073       delay_ms(500);
00faa2 d018      	RCALL SUBOPT_0x3
                 ; 0002 0074       PORTC.6=1;
00faa3 9aae      	SBI  0x15,6
                 ; 0002 0075       delay_ms(500);;
00faa4 d016      	RCALL SUBOPT_0x3
                 ; 0002 0076     }
00faa5 cffb      	RJMP _0x40014
                 ; 0002 0077   }
                 ; 0002 0078 }
                 _0x40013:
00faa6 8119      	LDD  R17,Y+1
00faa7 8108      	LDD  R16,Y+0
00faa8 9622      	ADIW R28,2
00faa9 5fde      	SUBI R29,-2
00faaa 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _testChar_S0020001000:
000500           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
00faab e0a0     +LDI R26 , LOW ( 0x1EF00 )
00faac eebf     +LDI R27 , HIGH ( 0x1EF00 )
00faad e081     +LDI R24 , BYTE3 ( 0x1EF00 )
00faae e090     +LDI R25 , BYTE4 ( 0x1EF00 )
                 	__GETD2N 0x1EF00
00faaf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00fab0 01f8      	MOVW R30,R16
00fab1 2766      	CLR  R22
00fab2 2777      	CLR  R23
00fab3 940e fae8 	CALL __PUTPARD1
00fab5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00fab6 940e faed 	CALL __PUTPARD2
00fab8 940e fae3 	CALL __GETD2S0
00faba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00fabb efa4      	LDI  R26,LOW(500)
00fabc e0b1      	LDI  R27,HIGH(500)
00fabd 940c fac6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
00fabf e0e0     +LDI R30 , LOW ( 0x1EF00 )
00fac0 eeff     +LDI R31 , HIGH ( 0x1EF00 )
00fac1 e061     +LDI R22 , BYTE3 ( 0x1EF00 )
00fac2 e070     +LDI R23 , BYTE4 ( 0x1EF00 )
                 	__GETD1N 0x1EF00
00fac3 940e fae8 	CALL __PUTPARD1
00fac5 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00fac6 9610      	adiw r26,0
00fac7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00fac8 ed80     +LDI R24 , LOW ( 0x7D0 )
00fac9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00faca 9701     +SBIW R24 , 1
00facb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00facc 95a8      	wdr
00facd 9711      	sbiw r26,1
00face f7c9      	brne __delay_ms0
                 __delay_ms1:
00facf 9508      	ret
                 
                 __ADDD12:
00fad0 0fea      	ADD  R30,R26
00fad1 1ffb      	ADC  R31,R27
00fad2 1f68      	ADC  R22,R24
00fad3 1f79      	ADC  R23,R25
00fad4 9508      	RET
                 
                 __ADDD21:
00fad5 0fae      	ADD  R26,R30
00fad6 1fbf      	ADC  R27,R31
00fad7 1f86      	ADC  R24,R22
00fad8 1f97      	ADC  R25,R23
00fad9 9508      	RET
                 
                 __GETW2PF:
00fada bf6b      	OUT  RAMPZ,R22
00fadb 91a7      	ELPM R26,Z+
00fadc 91b6      	ELPM R27,Z
00fadd 9508      	RET
                 
                 __GETD1S0:
00fade 81e8      	LD   R30,Y
00fadf 81f9      	LDD  R31,Y+1
00fae0 816a      	LDD  R22,Y+2
00fae1 817b      	LDD  R23,Y+3
00fae2 9508      	RET
                 
                 __GETD2S0:
00fae3 81a8      	LD   R26,Y
00fae4 81b9      	LDD  R27,Y+1
00fae5 818a      	LDD  R24,Y+2
00fae6 819b      	LDD  R25,Y+3
00fae7 9508      	RET
                 
                 __PUTPARD1:
00fae8 937a      	ST   -Y,R23
00fae9 936a      	ST   -Y,R22
00faea 93fa      	ST   -Y,R31
00faeb 93ea      	ST   -Y,R30
00faec 9508      	RET
                 
                 __PUTPARD2:
00faed 939a      	ST   -Y,R25
00faee 938a      	ST   -Y,R24
00faef 93ba      	ST   -Y,R27
00faf0 93aa      	ST   -Y,R26
00faf1 9508      	RET
                 
                 __CPD20:
00faf2 9710      	SBIW R26,0
00faf3 4080      	SBCI R24,0
00faf4 4090      	SBCI R25,0
00faf5 9508      	RET
                 
                 __SAVELOCR6:
00faf6 935a      	ST   -Y,R21
                 __SAVELOCR5:
00faf7 934a      	ST   -Y,R20
                 __SAVELOCR4:
00faf8 933a      	ST   -Y,R19
                 __SAVELOCR3:
00faf9 932a      	ST   -Y,R18
                 __SAVELOCR2:
00fafa 931a      	ST   -Y,R17
00fafb 930a      	ST   -Y,R16
00fafc 9508      	RET
                 
                 __LOADLOCR6:
00fafd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00fafe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00faff 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00fb00 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00fb01 8119      	LDD  R17,Y+1
00fb02 8108      	LD   R16,Y
00fb03 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   9 r1 :   3 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   3 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  26 r17:  24 r18:   4 r19:   6 r20:   4 r21:   3 r22:  55 r23:  20 
r24:  23 r25:  16 r26:  51 r27:  34 r28:  14 r29:   7 r30: 158 r31:  39 
x  :   6 y  : 129 z  :  15 
Registers used: 23 out of 35 (65.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :   7 
adiw  :   9 and   :   0 andi  :  29 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  42 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   8 cpi   :  14 cpse  :   0 dec   :   1 des   :   0 
elpm  :  14 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 
ijmp  :   0 in    :   6 inc   :   0 jmp   :  42 ld    :   5 ldd   :  91 
ldi   :  79 lds   :  21 lpm   :   0 lsl   :   0 lsr   :   0 mov   :   6 
movw  :  22 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   5 ori   :   0 out   :  17 pop   :   2 push  :   2 rcall :  11 
ret   :  22 reti  :   0 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   0 
sbci  :  11 sbi   :   3 sbic  :   2 sbis  :   0 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :  20 st    :  32 std   :   8 sts   :  12 sub   :   0 subi  :   9 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 44 out of 117 (37.6%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x01f000 0x01f608   1530     14   1544  131072   1.2%
[.dseg] 0x000100 0x000501      0      1      1    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
