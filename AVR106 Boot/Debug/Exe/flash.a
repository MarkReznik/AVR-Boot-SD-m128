;/*****************************************************************************
;*
;* (C) 2010, HP InfoTech srl, www.hpinfotech.com
;*
;* File              : flash.c
;* Compiler          : CodeVisionAVR V2.xx
;* Revision          : $Revision: 1.0 $
;* Date              : $Date: December 9, 2010 $
;* Updated by        : $Author: HP InfoTech $
;*
;* Target platform   : All AVRs with bootloader support
;*
;* AppNote           : AVR109 - Self-programming
;*
;* Description       : Flash operations for AVR109 Self-programming
;****************************************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "flash.h"
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 sts 0x68,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;
;//#define	SPMCR_REG	SPMCSR
;
;void dospmew(void)
; 0001 0018 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0019     #asm
;PCODE: $00000012 VOL: 0
; 0001 001A          ldi   r22,$03
         ldi   r22,$03
;PCODE: $00000013 VOL: 0
; 0001 001B          WR_SPMCR_REG_R22
         WR_SPMCR_REG_R22
;PCODE: $00000014 VOL: 0
; 0001 001C          spm
         spm
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 001D     #endasm
; 0001 001E     _WAIT_FOR_SPM();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 001F     #asm
;PCODE: $0000001D VOL: 0
; 0001 0020         ldi   r22,$05
        ldi   r22,$05
;PCODE: $0000001E VOL: 0
; 0001 0021         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000001F VOL: 0
; 0001 0022         spm
        spm
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0023     #endasm
; 0001 0024     _WAIT_FOR_SPM();
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0025     while( SPMCR_REG & (1<<RWWSB) )
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0026     {
; 0001 0027     #asm
;PCODE: $0000002C VOL: 0
; 0001 0028         ldi   r22,$11
        ldi   r22,$11
;PCODE: $0000002D VOL: 0
; 0001 0029         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000002E VOL: 0
; 0001 002A         spm
        spm
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 002B     #endasm
; 0001 002C         _WAIT_FOR_SPM();
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 002D     }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 002E }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;void dospmw(void)
; 0001 0031 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0032     #asm
;PCODE: $0000003D VOL: 0
; 0001 0033         ldi   r22,$05
        ldi   r22,$05
;PCODE: $0000003E VOL: 0
; 0001 0034         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000003F VOL: 0
; 0001 0035         spm
        spm
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0036     #endasm
; 0001 0037     _WAIT_FOR_SPM();
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0038     while( SPMCR_REG & (1<<RWWSB) )
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0039     {
; 0001 003A     #asm
;PCODE: $0000004C VOL: 0
; 0001 003B         ldi   r22,$11
        ldi   r22,$11
;PCODE: $0000004D VOL: 0
; 0001 003C         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000004E VOL: 0
; 0001 003D         spm
        spm
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 003E     #endasm
; 0001 003F         _WAIT_FOR_SPM();
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0040     }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0041 }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;void dospme(void)
; 0001 0044 {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 0045     #asm
;PCODE: $0000005D VOL: 0
; 0001 0046         ldi   r22,$03
        ldi   r22,$03
;PCODE: $0000005E VOL: 0
; 0001 0047         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000005F VOL: 0
; 0001 0048         spm
        spm
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0049     #endasm
; 0001 004A     _WAIT_FOR_SPM();
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 004B     while( SPMCR_REG & (1<<RWWSB) )
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 004C     {
; 0001 004D     #asm
;PCODE: $0000006C VOL: 0
; 0001 004E         ldi   r22,$11
        ldi   r22,$11
;PCODE: $0000006D VOL: 0
; 0001 004F         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000006E VOL: 0
; 0001 0050         spm
        spm
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0051     #endasm
; 0001 0052         _WAIT_FOR_SPM();
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0053     }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0054 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void dospm(void)
; 0001 0057 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0058     #asm
;PCODE: $0000007D VOL: 0
; 0001 0059          ldi   r22,$01
         ldi   r22,$01
;PCODE: $0000007E VOL: 0
; 0001 005A          WR_SPMCR_REG_R22
         WR_SPMCR_REG_R22
;PCODE: $0000007F VOL: 0
; 0001 005B          spm
         spm
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 005C     #endasm
; 0001 005D     _WAIT_FOR_SPM();
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 005E     while( SPMCR_REG & (1<<RWWSB) )
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 005F     {
; 0001 0060     #asm
;PCODE: $0000008C VOL: 0
; 0001 0061         ldi   r22,$11
        ldi   r22,$11
;PCODE: $0000008D VOL: 0
; 0001 0062         WR_SPMCR_REG_R22
        WR_SPMCR_REG_R22
;PCODE: $0000008E VOL: 0
; 0001 0063         spm
        spm
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0064     #endasm
; 0001 0065         _WAIT_FOR_SPM();
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0066     }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0067 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;#pragma warn-
;
;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
; 0001 006C {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 006D #asm
;PCODE: $0000009D VOL: 0
;	*addr -> Y+1
;	ctrl -> Y+0
;PCODE: $0000009E VOL: 0
; 0001 006E      ldd  r30,y+1
     ldd  r30,y+1
;PCODE: $0000009F VOL: 0
; 0001 006F      ldd  r31,y+2
     ldd  r31,y+2
;PCODE: $000000A0 VOL: 0
; 0001 0070      ld   r22,y
     ld   r22,y
;PCODE: $000000A1 VOL: 0
; 0001 0071      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $000000A2 VOL: 0
; 0001 0072      lpm
     lpm
;PCODE: $000000A3 VOL: 0
; 0001 0073      mov  r30,r0
     mov  r30,r0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0074 #endasm
; 0001 0075 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;
;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
; 0001 0078 {
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0079 #asm
;PCODE: $000000AB VOL: 0
;	data -> Y+1
;	ctrl -> Y+0
;PCODE: $000000AC VOL: 0
; 0001 007A      ldd  r0,y+1
     ldd  r0,y+1
;PCODE: $000000AD VOL: 0
; 0001 007B      ld   r22,y
     ld   r22,y
;PCODE: $000000AE VOL: 0
; 0001 007C      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $000000AF VOL: 0
; 0001 007D      spm
     spm
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 007E #endasm
; 0001 007F }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
; 0001 0082 {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 0083     #asm
;PCODE: $000000B7 VOL: 0
;	*addr -> Y+3
;	data -> Y+1
;	ctrl -> Y+0
;PCODE: $000000B8 VOL: 0
; 0001 0084          ldd  r30,y+3
         ldd  r30,y+3
;PCODE: $000000B9 VOL: 0
; 0001 0085          ldd  r31,y+4
         ldd  r31,y+4
;PCODE: $000000BA VOL: 0
; 0001 0086          ldd  r0,y+1
         ldd  r0,y+1
;PCODE: $000000BB VOL: 0
; 0001 0087          ldd  r1,y+2
         ldd  r1,y+2
;PCODE: $000000BC VOL: 0
; 0001 0088          ld   r22,y
         ld   r22,y
;PCODE: $000000BD VOL: 0
; 0001 0089          WR_SPMCR_REG_R22
         WR_SPMCR_REG_R22
;PCODE: $000000BE VOL: 0
; 0001 008A          spm
         spm
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 008B     #endasm
; 0001 008C }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;
;void __AddrToZWordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
; 0001 008F {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0090 _WAIT_FOR_SPM();
;PCODE: $000000C6 VOL: 0
;	*addr -> Y+2
;	data -> Y+0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0091     #asm
;PCODE: $000000CD VOL: 0
; 0001 0092          ldd  r30,y+2
         ldd  r30,y+2
;PCODE: $000000CE VOL: 0
; 0001 0093          ldd  r31,y+3
         ldd  r31,y+3
;PCODE: $000000CF VOL: 0
; 0001 0094          ldd  r0,y+0
         ldd  r0,y+0
;PCODE: $000000D0 VOL: 0
; 0001 0095          ldd  r1,y+1
         ldd  r1,y+1
;PCODE: $000000D1 VOL: 0
; 0001 0096          //ldi   r22,LOW(1)
         //ldi   r22,LOW(1)
;PCODE: $000000D2 VOL: 0
; 0001 0097          //WR_SPMCR_REG_R22
         //WR_SPMCR_REG_R22
;PCODE: $000000D3 VOL: 0
; 0001 0098          //spm
         //spm
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 0099     #endasm
; 0001 009A dospm();
;PCODE: $000000D6 VOL: 0
; 0001 009B }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
; 0001 009E {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 009F #asm
;PCODE: $000000DC VOL: 0
;	*addr -> Y+1
;	ctrl -> Y+0
;PCODE: $000000DD VOL: 0
; 0001 00A0      ldd  r30,y+1
     ldd  r30,y+1
;PCODE: $000000DE VOL: 0
; 0001 00A1      ldd  r31,y+2
     ldd  r31,y+2
;PCODE: $000000DF VOL: 0
; 0001 00A2      ld   r22,y
     ld   r22,y
;PCODE: $000000E0 VOL: 0
; 0001 00A3      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $000000E1 VOL: 0
; 0001 00A4      spm
     spm
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 00A5 #endasm
; 0001 00A6 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;void __AddrToZByteToSPMCR_SPM_W(void flash *addr)
; 0001 00A9 {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 00AA _WAIT_FOR_SPM();
;PCODE: $000000E9 VOL: 0
;	*addr -> Y+0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 00AB #asm
;PCODE: $000000F0 VOL: 0
; 0001 00AC      ldd  r30,y+0
     ldd  r30,y+0
;PCODE: $000000F1 VOL: 0
; 0001 00AD      ldd  r31,y+1
     ldd  r31,y+1
;PCODE: $000000F2 VOL: 0
; 0001 00AE      //ld   r22,y
     //ld   r22,y
;PCODE: $000000F3 VOL: 0
; 0001 00AF      //WR_SPMCR_REG_R22
     //WR_SPMCR_REG_R22
;PCODE: $000000F4 VOL: 0
; 0001 00B0      //spm
     //spm
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 00B1 #endasm
; 0001 00B2 dospmew();
;PCODE: $000000F7 VOL: 0
; 0001 00B3 }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;
;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
; 0001 00B7 {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0001 00B8 #asm
;PCODE: $000000FD VOL: 0
;	*addr -> Y+3
;	data -> Y+1
;	ctrl -> Y+0
;PCODE: $000000FE VOL: 0
; 0001 00B9      ldd  r30,y+3
     ldd  r30,y+3
;PCODE: $000000FF VOL: 0
; 0001 00BA      ldd  r31,y+4
     ldd  r31,y+4
;PCODE: $00000100 VOL: 0
; 0001 00BB      ldd  r22,y+5
     ldd  r22,y+5
;PCODE: $00000101 VOL: 0
; 0001 00BC      out  rampz,r22
     out  rampz,r22
;PCODE: $00000102 VOL: 0
; 0001 00BD      ldd  r0,y+1
     ldd  r0,y+1
;PCODE: $00000103 VOL: 0
; 0001 00BE      ldd  r1,y+2
     ldd  r1,y+2
;PCODE: $00000104 VOL: 0
; 0001 00BF      ld   r22,y
     ld   r22,y
;PCODE: $00000105 VOL: 0
; 0001 00C0      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $00000106 VOL: 0
; 0001 00C1      spm
     spm
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 00C2 #endasm
; 0001 00C3 }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;
;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(void flash *addr, unsigned int data)
; 0001 00C6 {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 00C7 _WAIT_FOR_SPM();
;PCODE: $0000010E VOL: 0
;	*addr -> Y+2
;	data -> Y+0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 00C8 #asm
;PCODE: $00000115 VOL: 0
; 0001 00C9      ldd  r30,y+2
     ldd  r30,y+2
;PCODE: $00000116 VOL: 0
; 0001 00CA      ldd  r31,y+3
     ldd  r31,y+3
;PCODE: $00000117 VOL: 0
; 0001 00CB      ldd  r22,y+4
     ldd  r22,y+4
;PCODE: $00000118 VOL: 0
; 0001 00CC      out  rampz,r22
     out  rampz,r22
;PCODE: $00000119 VOL: 0
; 0001 00CD      ldd  r0,y+0
     ldd  r0,y+0
;PCODE: $0000011A VOL: 0
; 0001 00CE      ldd  r1,y+1
     ldd  r1,y+1
;PCODE: $0000011B VOL: 0
; 0001 00CF      //ld   r22,y
     //ld   r22,y
;PCODE: $0000011C VOL: 0
; 0001 00D0      //WR_SPMCR_REG_R22
     //WR_SPMCR_REG_R22
;PCODE: $0000011D VOL: 0
; 0001 00D1      //spm
     //spm
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0001 00D2 #endasm
; 0001 00D3 dospm();
;PCODE: $00000120 VOL: 0
; 0001 00D4 }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;
;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
; 0001 00D7 {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 00D8 #asm
;PCODE: $00000126 VOL: 0
;	*addr -> Y+1
;	ctrl -> Y+0
;PCODE: $00000127 VOL: 0
; 0001 00D9      ldd  r30,y+1
     ldd  r30,y+1
;PCODE: $00000128 VOL: 0
; 0001 00DA      ldd  r31,y+2
     ldd  r31,y+2
;PCODE: $00000129 VOL: 0
; 0001 00DB      ldd  r22,y+3
     ldd  r22,y+3
;PCODE: $0000012A VOL: 0
; 0001 00DC      out  rampz,r22
     out  rampz,r22
;PCODE: $0000012B VOL: 0
; 0001 00DD      ld   r22,y
     ld   r22,y
;PCODE: $0000012C VOL: 0
; 0001 00DE      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $0000012D VOL: 0
; 0001 00DF      spm
     spm
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 00E0 #endasm
; 0001 00E1 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;void __AddrToZ24ByteToSPMCR_SPM_W(void flash *addr)
; 0001 00E4 {
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0001 00E5 _WAIT_FOR_SPM();
;PCODE: $00000135 VOL: 0
;	*addr -> Y+0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 00E6 #asm
;PCODE: $0000013C VOL: 0
; 0001 00E7      ldd  r30,y+0
     ldd  r30,y+0
;PCODE: $0000013D VOL: 0
; 0001 00E8      ldd  r31,y+1
     ldd  r31,y+1
;PCODE: $0000013E VOL: 0
; 0001 00E9      ldd  r22,y+2
     ldd  r22,y+2
;PCODE: $0000013F VOL: 0
; 0001 00EA      out  rampz,r22
     out  rampz,r22
;PCODE: $00000140 VOL: 0
; 0001 00EB      //ld   r22,y
     //ld   r22,y
;PCODE: $00000141 VOL: 0
; 0001 00EC      //WR_SPMCR_REG_R22
     //WR_SPMCR_REG_R22
;PCODE: $00000142 VOL: 0
; 0001 00ED      //spm
     //spm
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 00EE #endasm
; 0001 00EF #asm
;PCODE: $00000145 VOL: 0
; 0001 00F0      ldi   r22,$05
     ldi   r22,$05
;PCODE: $00000146 VOL: 0
; 0001 00F1      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $00000147 VOL: 0
; 0001 00F2      spm
     spm
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 00F3 #endasm
; 0001 00F4 _WAIT_FOR_SPM();
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0001 00F5 do
;PCODE: $00000150 VOL: 0
; 0001 00F6 {
; 0001 00F7 #asm
;PCODE: $00000151 VOL: 0
; 0001 00F8     ldi   r22,$11
    ldi   r22,$11
;PCODE: $00000152 VOL: 0
; 0001 00F9     WR_SPMCR_REG_R22
    WR_SPMCR_REG_R22
;PCODE: $00000153 VOL: 0
; 0001 00FA     spm
    spm
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 00FB #endasm
; 0001 00FC     _WAIT_FOR_SPM();
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 00FD }
; 0001 00FE while( SPMCR_REG & (1<<RWWSB) );
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0001 00FF //dospmw();
; 0001 0100 }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;
;void __AddrToZ24ByteToSPMCR_SPM_E(void flash *addr)
; 0001 0103 {
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 0104 _WAIT_FOR_SPM();
;PCODE: $00000167 VOL: 0
;	*addr -> Y+0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 0105 #asm
;PCODE: $0000016E VOL: 0
; 0001 0106      ldd  r30,y+0
     ldd  r30,y+0
;PCODE: $0000016F VOL: 0
; 0001 0107      ldd  r31,y+1
     ldd  r31,y+1
;PCODE: $00000170 VOL: 0
; 0001 0108      ldd  r22,y+2
     ldd  r22,y+2
;PCODE: $00000171 VOL: 0
; 0001 0109      out  rampz,r22
     out  rampz,r22
;PCODE: $00000172 VOL: 0
; 0001 010A      //ld   r22,y
     //ld   r22,y
;PCODE: $00000173 VOL: 0
; 0001 010B      //WR_SPMCR_REG_R22
     //WR_SPMCR_REG_R22
;PCODE: $00000174 VOL: 0
; 0001 010C      //spm
     //spm
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0001 010D #endasm
; 0001 010E #asm
;PCODE: $00000177 VOL: 0
; 0001 010F      ldi   r22,$03
     ldi   r22,$03
;PCODE: $00000178 VOL: 0
; 0001 0110      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $00000179 VOL: 0
; 0001 0111      spm
     spm
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0001 0112 #endasm
; 0001 0113 _WAIT_FOR_SPM();
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0001 0114 do
;PCODE: $00000182 VOL: 0
; 0001 0115 {
; 0001 0116 #asm
;PCODE: $00000183 VOL: 0
; 0001 0117     ldi   r22,$11
    ldi   r22,$11
;PCODE: $00000184 VOL: 0
; 0001 0118     WR_SPMCR_REG_R22
    WR_SPMCR_REG_R22
;PCODE: $00000185 VOL: 0
; 0001 0119     spm
    spm
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0001 011A #endasm
; 0001 011B     _WAIT_FOR_SPM();
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0001 011C }
; 0001 011D while( SPMCR_REG & (1<<RWWSB) );
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 011E //dospme();
; 0001 011F }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;
;void __AddrToZ24ByteToSPMCR_SPM_EW(void flash *addr)
; 0001 0122 {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 0123 _WAIT_FOR_SPM();
;PCODE: $00000199 VOL: 0
;	*addr -> Y+0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0001 0124 #asm
;PCODE: $000001A0 VOL: 0
; 0001 0125      ldd  r30,y+0
     ldd  r30,y+0
;PCODE: $000001A1 VOL: 0
; 0001 0126      ldd  r31,y+1
     ldd  r31,y+1
;PCODE: $000001A2 VOL: 0
; 0001 0127      ldd  r22,y+2
     ldd  r22,y+2
;PCODE: $000001A3 VOL: 0
; 0001 0128      out  rampz,r22
     out  rampz,r22
;PCODE: $000001A4 VOL: 0
; 0001 0129      //ld   r22,y
     //ld   r22,y
;PCODE: $000001A5 VOL: 0
; 0001 012A      //WR_SPMCR_REG_R22
     //WR_SPMCR_REG_R22
;PCODE: $000001A6 VOL: 0
; 0001 012B      //spm
     //spm
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0001 012C #endasm
; 0001 012D #asm
;PCODE: $000001A9 VOL: 0
; 0001 012E      ldi   r22,$03
     ldi   r22,$03
;PCODE: $000001AA VOL: 0
; 0001 012F      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $000001AB VOL: 0
; 0001 0130      spm
     spm
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 0131 #endasm
; 0001 0132 _WAIT_FOR_SPM();
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 0133 do
;PCODE: $000001B4 VOL: 0
; 0001 0134 {
; 0001 0135 #asm
;PCODE: $000001B5 VOL: 0
; 0001 0136     ldi   r22,$11
    ldi   r22,$11
;PCODE: $000001B6 VOL: 0
; 0001 0137     WR_SPMCR_REG_R22
    WR_SPMCR_REG_R22
;PCODE: $000001B7 VOL: 0
; 0001 0138     spm
    spm
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0001 0139 #endasm
; 0001 013A     _WAIT_FOR_SPM();
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 013B }
; 0001 013C while( SPMCR_REG & (1<<RWWSB) );
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0001 013D #asm
;PCODE: $000001C6 VOL: 0
; 0001 013E     ldi   r22,$05
    ldi   r22,$05
;PCODE: $000001C7 VOL: 0
; 0001 013F     WR_SPMCR_REG_R22
    WR_SPMCR_REG_R22
;PCODE: $000001C8 VOL: 0
; 0001 0140     spm
    spm
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0001 0141 #endasm
; 0001 0142 _WAIT_FOR_SPM();
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0001 0143 do
;PCODE: $000001D1 VOL: 0
; 0001 0144 {
; 0001 0145 #asm
;PCODE: $000001D2 VOL: 0
; 0001 0146     ldi   r22,$11
    ldi   r22,$11
;PCODE: $000001D3 VOL: 0
; 0001 0147     WR_SPMCR_REG_R22
    WR_SPMCR_REG_R22
;PCODE: $000001D4 VOL: 0
; 0001 0148     spm
    spm
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0001 0149 #endasm
; 0001 014A     _WAIT_FOR_SPM();
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 014B }
; 0001 014C while( SPMCR_REG & (1<<RWWSB) );
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 014D //dospmew();
; 0001 014E }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;
;#ifdef _WARNINGS_ON_
;#pragma warn+
;#endif
;
