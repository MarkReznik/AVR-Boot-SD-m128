;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          : IAR EWAVR 2.28a / 3.10c and newer
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : The file contains an example program using the Flash R/W
;*                       functions provided with the files Self_programming.h /
;*                       Self_programming.c . The program should be compiled using
;*                       a linker file (*.xcl) that is configured to place the
;*                       entire program code into the Boot section of the Flash memory.
;*                       Please refer to the application note document for more
;*                       information.
;*
;* $Revision: 2.0 $
;* $Date: Wednesday, January 18, 2006 15:18:52 UTC $
;*
;*****************************************************************************/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "flash.h"
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 sts 0x68,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;
;#include "Self_programming.h"
;void testWrite();
;
;
;void main( void ){
; 0002 0024 void main( void ){

	.CSEG
;PCODE: $00000010 VOL: 0
; 0002 0025 
; 0002 0026   //static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
; 0002 0027   //#asm("cli")
; 0002 0028   if(PORTA==0x55)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0029     testWrite();                                          // Returns TRUE
;PCODE: $00000014 VOL: 0
; 0002 002A   //__AddrToZ24WordToR1R0ByteToSPMCR_SPM_F(0,0);
; 0002 002B   //__AddrToZ24ByteToSPMCR_SPM_W((void flash *)0);
; 0002 002C   /*
; 0002 002D   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
; 0002 002E   unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
; 0002 002F                                             // code stack
; 0002 0030   int index;
; 0002 0031 
; 0002 0032   DDRC=0xFF;
; 0002 0033   PORTC=0xFF;
; 0002 0034   //DDRC=0x00;
; 0002 0035   //PORTC=0x00;
; 0002 0036   //MCUCR |= (1<<IVSEL);
; 0002 0037                         // Move interrupt vectors to boot
; 0002 0038   //RecoverFlash();
; 0002 0039 
; 0002 003A   dospm();
; 0002 003B 
; 0002 003C   for(index=0; index<PAGESIZE; index++){
; 0002 003D     testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
; 0002 003E   }
; 0002 003F   PORTC.4=0;
; 0002 0040   //for(;;){
; 0002 0041   if(  WriteFlashPage(0x1000, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
; 0002 0042     PORTC.5=0;                                          // Function returns TRUE
; 0002 0043   if(  ReadFlashPage(0x1000, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
; 0002 0044     PORTC.6=0;                                          // Function returns TRUE
; 0002 0045   if(  WriteFlashByte(0x1004, 0x38))//;            // Writes 0x38 to byte address 0x204
; 0002 0046     PORTC.5=0;                                          // Same as byte 4 on page 2
; 0002 0047   */
; 0002 0048 
; 0002 0049   //}
; 0002 004A }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;
;void testWrite()
; 0002 004E {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 004F   unsigned char testBuffer1[PAGESIZE];      // Declares variables for testing
; 0002 0050   unsigned char testBuffer2[PAGESIZE];      // Note. Each array uses PAGESIZE bytes of
; 0002 0051                                             // code stack
; 0002 0052 
; 0002 0053 
; 0002 0054   static unsigned char testChar; // A warning will come saying that this var is set but never used. Ignore it.
; 0002 0055   int index;
; 0002 0056 
; 0002 0057   //DDRC=0xFF;
; 0002 0058   //PORTC=0xFF;
; 0002 0059   //DDRC=0x00;
; 0002 005A   //PORTC=0x00;
; 0002 005B   //MCUCR |= (1<<IVSEL);
; 0002 005C                         // Move interrupt vectors to boot
; 0002 005D   //RecoverFlash();
; 0002 005E 
; 0002 005F   //dospm();
; 0002 0060 
; 0002 0061   for(index=0; index<PAGESIZE; index++){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;	testBuffer1 -> Y+258
;	testBuffer2 -> Y+2
;	index -> R16,R17
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0062     testBuffer1[index]=(unsigned char)index; // Fills testBuffer1 with values 0,1,2..255
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0063   }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0064   PORTC.4=0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 0065   //for(;;){
; 0002 0066   if(  WriteFlashPage(0x1EF00, testBuffer1))//;     // Writes testbuffer1 to Flash page 2
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0067     PORTC.5=0;                                          // Function returns TRUE
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 0068   if(  ReadFlashPage(0x1EF00, testBuffer2))//;      // Reads back Flash page 2 to TestBuffer2
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 0069     PORTC.6=0;                                          // Function returns TRUE
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 006A   if(  WriteFlashByte(0x1EF04, 0x38))//;            // Writes 0x38 to byte address 0x204
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 006B     PORTC.5=1;                                          // Same as byte 4 on page 2
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 006C   testChar = ReadFlashByte(0x1EF04);        // Reads back value from address 0x204
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 006D 
; 0002 006E   if(testChar==0x38)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 006F   {
; 0002 0070     while(1)
;PCODE: $00000053 VOL: 0
; 0002 0071     {
; 0002 0072       PORTC.6=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 0073       delay_ms(500);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 0074       PORTC.6=1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 0075       delay_ms(500);;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0076     }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 0077   }
; 0002 0078 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
